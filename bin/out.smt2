(set-logic SLHV)
(declare-hvar emp IntHeap)
(declare-locvar nil IntLoc)
(datatype pt_record_0 ((Pt_R_0 (loc IntLoc))))
(datatype pt_record_0 ((Pt_R_0 (loc IntLoc))))
(declare-const loc_1 Int)
(declare-const $r_main0_1 Int)
(declare-const $r_main0_0 Int)
(declare-const invalidDeref_1 Bool)
(declare-const invalidDeref6_1 Bool)
(declare-const fable_$p8_main0_1 Int)
(declare-const fable_$p8_main02_1 Int)
(declare-const fable_$p7_main0_1 Int)
(declare-const fable_$p7_main01_1 Int)
(declare-const fable_$p6_main0_1 Int)
(declare-const fable_$p6_main02_1 Int)
(declare-const fable_$p5_main0_1 Int)
(declare-const fable_$p5_main01_1 Int)
(declare-const fable_$p4_main0_1 Int)
(declare-const fable_$p4_main01_1 Int)
(declare-const fable_$p3_main0_1 Int)
(declare-const fable_$p3_main01_1 Int)
(declare-const fable_$p2_main0_1 Int)
(declare-const fable_$p2_main01_1 Int)
(declare-const fable_$p1_main0_1 Int)
(declare-const fable_$p1_main01_1 Int)
(declare-const fable_$p0_main0_1 Int)
(declare-const fable_$p0_main01_1 Int)
(declare-hvar H_1 IntHeap)
(declare-hvar H7_1 IntHeap)
(declare-locvar $p8_main0_1 IntLoc)
(declare-locvar $p8_main01_1 IntLoc)
(declare-locvar $p7_main0_1 IntLoc)
(declare-locvar $p7_main01_1 IntLoc)
(declare-locvar $p6_main0_1 IntLoc)
(declare-locvar $p6_main01_1 IntLoc)
(declare-locvar $p5_main0_1 IntLoc)
(declare-locvar $p5_main01_1 IntLoc)
(declare-locvar $p4_main0_1 IntLoc)
(declare-locvar $p4_main01_1 IntLoc)
(declare-locvar $p3_main0_1 IntLoc)
(declare-locvar $p3_main01_1 IntLoc)
(declare-locvar $p2_main0_1 IntLoc)
(declare-locvar $p2_main01_1 IntLoc)
(declare-locvar $p1_main0_1 IntLoc)
(declare-locvar $p1_main01_1 IntLoc)
(declare-locvar $p0_main0_1 IntLoc)
(declare-locvar $p0_main01_1 IntLoc)
(declare-const $i9_main0_1 Int)
(declare-const $i9_main01_1 Int)
(declare-const invalidFree_0 Bool)
(declare-const invalidDeref5_1 Bool)
(declare-locvar l25 IntLoc)
(declare-hvar h8 IntHeap)
(declare-locvar nil IntLoc)
(declare-locvar $p0_main01 IntLoc)
(declare-const invalidDeref4_1 Bool)
(declare-locvar l23 IntLoc)
(declare-hvar h7 IntHeap)
(declare-const invalidDeref3_1 Bool)
(declare-locvar l21 IntLoc)
(declare-hvar h5 IntHeap)
(declare-hvar H6_1 IntHeap)
(declare-const d6_1 Int)
(declare-locvar l20 IntLoc)
(declare-hvar H5_1 IntHeap)
(declare-locvar $p3_main01 IntLoc)
(declare-const invalidDeref_0 Bool)
(declare-locvar l18 IntLoc)
(declare-hvar h3 IntHeap)
(declare-hvar H4_1 IntHeap)
(declare-const d5_1 Int)
(declare-locvar l17 IntLoc)
(declare-hvar H3_1 IntHeap)
(declare-locvar $p1_main01 IntLoc)
(declare-locvar l16 IntLoc)
(declare-locvar l15 IntLoc)
(declare-locvar l14 IntLoc)
(declare-locvar l13 IntLoc)
(declare-hvar H_0 IntHeap)
(declare-const loc_0 Int)
(declare-hvar emp IntHeap)
(assert
 (let (($x529 (or (= loc_1 2) (= loc_1 3))))
 (let (($x519 (= invalidDeref6_1 invalidDeref_1)))
 (let (($x516 (= fable_$p8_main02_1 fable_$p8_main0_1)))
 (let (($x513 (= fable_$p7_main01_1 fable_$p7_main0_1)))
 (let (($x510 (= fable_$p6_main02_1 fable_$p6_main0_1)))
 (let (($x507 (= fable_$p5_main01_1 fable_$p5_main0_1)))
 (let (($x504 (= fable_$p4_main01_1 fable_$p4_main0_1)))
 (let (($x501 (= fable_$p3_main01_1 fable_$p3_main0_1)))
 (let (($x498 (= fable_$p2_main01_1 fable_$p2_main0_1)))
 (let (($x495 (= fable_$p1_main01_1 fable_$p1_main0_1)))
 (let (($x492 (= fable_$p0_main01_1 fable_$p0_main0_1)))
 (let (($x489 (= H7_1 H_1)))
 (let (($x486 (= $p8_main01_1 $p8_main0_1)))
 (let (($x483 (= $p7_main01_1 $p7_main0_1)))
 (let (($x480 (= $p6_main01_1 $p6_main0_1)))
 (let (($x477 (= $p5_main01_1 $p5_main0_1)))
 (let (($x474 (= $p4_main01_1 $p4_main0_1)))
 (let (($x471 (= $p3_main01_1 $p3_main0_1)))
 (let (($x467 (= $p2_main01_1 $p2_main0_1)))
 (let (($x464 (= $p1_main01_1 $p1_main0_1)))
 (let (($x460 (= $p0_main01_1 $p0_main0_1)))
 (let (($x456 (= $i9_main01_1 $i9_main0_1)))
 (let (($x373 (and (not (= $p6_main01_1 $p8_main01_1)) (= $i9_main01_1 0))))
 (let (($x371 (= $p6_main01_1 $p8_main01_1)))
 (let (($x375 (and $x371 (= $i9_main01_1 1))))
 (let (($x383 (or (= $p7_main01_1 nil) (= H7_1 (uplus h8 (pt $p7_main01_1 (Pt_R_0 l25)))))))
 (let (($x384 (and $x383 invalidDeref6_1)))
 (let ((?x171 (locadd $p0_main01 (* 0 16))))
 (let ((?x209 (locadd ?x171 (* 8 1))))
 (let (($x393 (or (= $p5_main01_1 nil) (= H7_1 (uplus h7 (pt $p5_main01_1 (Pt_R_0 l23)))))))
 (let (($x394 (and $x393 invalidDeref5_1)))
 (let (($x398 (or (or (= $p5_main01_1 (locadd ?x171 (* 0 1))) invalidDeref4_1) invalidFree_0)))
 (let (($x403 (or (= $p4_main01_1 nil) (= H6_1 (uplus h5 (pt $p4_main01_1 (Pt_R_0 l21)))))))
 (let (($x404 (and $x403 invalidDeref4_1)))
 (let (($x412 (= H6_1 (uplus H5_1 (pt l20 (Pt_R_1 d6_1))))))
 (let (($x416 (or (and (and (= $p3_main01 l20) (= fable_$p3_main01_1 1)) $x412) invalidDeref3_1)))
 (let (($x422 (or (= $p2_main01_1 nil) (= H4_1 (uplus h3 (pt $p2_main01_1 (Pt_R_0 l18)))))))
 (let (($x423 (and $x422 invalidDeref3_1)))
 (let (($x427 (or (or (= $p2_main01_1 (locadd ?x171 (* 0 1))) invalidDeref_0) invalidFree_0)))
 (let (($x431 (= H4_1 (uplus H3_1 (pt l17 (Pt_R_1 d5_1))))))
 (let (($x435 (or (and (and (= $p1_main01 l17) (= fable_$p1_main01_1 1)) $x431) invalidDeref_0)))
 (let ((?x143 (uplus (pt l13 (Pt_R_0 l14)) (pt l15 (Pt_R_0 l16)))))
 (let (($x438 (= H3_1 (uplus H_0 ?x143))))
 (let (($x439 (= fable_$p0_main01_1 3)))
 (let (($x141 (= l15 (locadd l13 1))))
 (let (($x135 (= $p0_main01 l13)))
 (let (($x142 (and $x135 $x141)))
 (let (($x444 (and (or (or (and (and $x142 $x439) $x438) invalidDeref_0) invalidFree_0) (or $x435 invalidFree_0))))
 (let (($x447 (and (and (and $x444 $x427) (or $x423 invalidDeref_0)) (or $x416 invalidFree_0))))
 (let (($x448 (and $x447 (or (or (= $p4_main01_1 ?x209) invalidDeref3_1) invalidFree_0))))
 (let (($x451 (and (and (and $x448 (or $x404 invalidDeref3_1)) $x398) (or $x394 invalidDeref4_1))))
 (let (($x452 (and $x451 (or (or (= $p7_main01_1 ?x209) invalidDeref5_1) invalidFree_0))))
 (let (($x454 (and (and $x452 (or $x384 invalidDeref5_1)) (or (or (or $x375 $x373) invalidDeref6_1) invalidFree_0))))
 (let (($x475 (and (and (and (and (and (and $x454 $x456) $x460) $x464) $x467) $x471) $x474)))
 (let (($x493 (and (and (and (and (and (and $x475 $x477) $x480) $x483) $x486) $x489) $x492)))
 (let (($x511 (and (and (and (and (and (and $x493 $x495) $x498) $x501) $x504) $x507) $x510)))
 (let (($x525 (and (and (and (and $x511 $x513) $x516) $x519) (and true (= $r_main0_0 $r_main0_1)))))
 (let (($x278 (= loc_0 5)))
 (let (($x531 (not $x278)))
 (let (($x284 (not invalidFree_0)))
 (and (and (and (and (= H_0 emp) $x278) (not invalidDeref_0)) $x284) (or $x531 (and $x525 $x529))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
