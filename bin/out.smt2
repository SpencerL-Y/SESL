(set-logic SLHV)
(declare-hvar emp IntHeap)
(declare-locvar nil IntLoc)
(declare-datatype pt_record_0 ((Pt_R_0 (loc IntLoc))))
(declare-datatype pt_record_1 ((Pt_R_1 (data Int))))
(declare-const loc_1 Int)
(declare-const invalidDeref_1 Bool)
(declare-const invalidDeref1_1 Bool)
(declare-const fable_$p1_main0_1 Int)
(declare-const fable_$p1_main01_1 Int)
(declare-const fable_$p0_main0_1 Int)
(declare-const fable_$p0_main01_1 Int)
(declare-hvar H_1 IntHeap)
(declare-hvar H2_1 IntHeap)
(declare-const $r_main0_1 Int)
(declare-const $r_main01_1 Int)
(declare-locvar $p1_main0_1 IntLoc)
(declare-locvar $p1_main01_1 IntLoc)
(declare-locvar $p0_main0_1 IntLoc)
(declare-locvar $p0_main01_1 IntLoc)
(declare-const invalidFree_0 Bool)
(declare-const invalidDeref_0 Bool)
(declare-locvar l2 IntLoc)
(declare-hvar h1 IntHeap)
(declare-hvar H1_1 IntHeap)
(declare-locvar nil IntLoc)
(declare-const d1_1 Int)
(declare-locvar l1 IntLoc)
(declare-hvar H_0 IntHeap)
(declare-locvar $p0_main01 IntLoc)
(declare-const loc_0 Int)
(declare-hvar emp IntHeap)
(assert
 (let (($x133 (= loc_1 1)))
 (let (($x130 (= invalidDeref1_1 invalidDeref_1)))
 (let (($x127 (= fable_$p1_main01_1 fable_$p1_main0_1)))
 (let (($x124 (= fable_$p0_main01_1 fable_$p0_main0_1)))
 (let (($x121 (= H2_1 H_1)))
 (let (($x118 (= $r_main01_1 $r_main0_1)))
 (let (($x115 (= $p1_main01_1 $p1_main0_1)))
 (let (($x112 (= $p0_main01_1 $p0_main0_1)))
 (let (($x92 (or (= $p1_main01_1 nil) (= H1_1 (uplus h1 (pt $p1_main01_1 (Pt_R_0 l2)))))))
 (let (($x93 (and $x92 invalidDeref1_1)))
 (let ((?x32 (locadd (locadd nil (* 0 16)) (* 8 1))))
 (let (($x101 (= H1_1 (uplus H_0 (pt l1 (Pt_R_1 d1_1))))))
 (let (($x105 (or (and (and (= $p0_main01 l1) (= fable_$p0_main01_1 1)) $x101) invalidDeref_0)))
 (let (($x107 (and (or $x105 invalidFree_0) (or (or (= $p1_main01_1 ?x32) invalidDeref_0) invalidFree_0))))
 (let (($x109 (and (and $x107 (or $x93 invalidDeref_0)) (or (or (= $r_main01_1 0) invalidDeref1_1) invalidFree_0))))
 (let (($x128 (and (and (and (and (and (and $x109 $x112) $x115) $x118) $x121) $x124) $x127)))
 (let (($x58 (= loc_0 2)))
 (let (($x135 (not $x58)))
 (let (($x64 (not invalidFree_0)))
 (and (and (and (and (= H_0 emp) $x58) (not invalidDeref_0)) $x64) (or $x135 (and (and $x128 $x130) $x133)))))))))))))))))))))))
(check-sat)
