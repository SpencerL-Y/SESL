(set-logic SLHV)
(declare-hvar emp IntHeap)
(declare-locvar nil IntLoc)
(declare-datatype pt_record_0 ((Pt_R_0 (loc IntLoc))))
(declare-datatype pt_record_1 ((Pt_R_1 (data Int))))
(declare-const d5 Int)
(declare-locvar l8 IntLoc)
(declare-hvar ah1 IntHeap)
(declare-hvar AH_1 IntHeap)
(declare-const d4 Int)
(declare-locvar l6 IntLoc)
(declare-hvar h5 IntHeap)
(declare-hvar H_1 IntHeap)
(declare-locvar l7 IntLoc)
(declare-const loc_1 Int)
(declare-hvar H4_1 IntHeap)
(declare-hvar AH2_1 IntHeap)
(declare-const $r_main01_1 Int)
(declare-const $r_main0_1 Int)
(declare-locvar $p5_main01_1 IntLoc)
(declare-locvar $p5_main0_1 IntLoc)
(declare-locvar $p4_main01_1 IntLoc)
(declare-locvar $p4_main0_1 IntLoc)
(declare-locvar $p3_main01_1 IntLoc)
(declare-locvar $p3_main0_1 IntLoc)
(declare-locvar $p2_main01_1 IntLoc)
(declare-locvar $p2_main0_1 IntLoc)
(declare-locvar $p1_main01_1 IntLoc)
(declare-locvar $p1_main0_1 IntLoc)
(declare-locvar $p0_main01_1 IntLoc)
(declare-locvar $p0_main0_1 IntLoc)
(declare-hvar h3_1 IntHeap)
(declare-const d2_1 Int)
(declare-hvar H3_1 IntHeap)
(declare-hvar h1_1 IntHeap)
(declare-locvar l4_1 IntLoc)
(declare-hvar H2_1 IntHeap)
(declare-locvar l3_1 IntLoc)
(declare-hvar AH1_1 IntHeap)
(declare-const d1_1 Int)
(declare-hvar H1_1 IntHeap)
(declare-locvar l1_1 IntLoc)
(declare-hvar AH_0 IntHeap)
(declare-locvar l2_1 IntLoc)
(declare-hvar H_0 IntHeap)
(declare-const loc_0 Int)
(assert
 (let (($x367 (= AH_1 (uplus ah1 (pt l8 (Pt_R_1 d5))))))
 (let (($x360 (or (= H_1 (uplus h5 (pt l6 (Pt_R_0 l7)))) (= H_1 (uplus h5 (pt l6 (Pt_R_1 d4)))))))
 (let (($x302 (= loc_1 2)))
 (let (($x295 (= H_1 H4_1)))
 (let (($x292 (= AH_1 AH2_1)))
 (let (($x289 (= $r_main0_1 $r_main01_1)))
 (let (($x286 (= $p5_main0_1 $p5_main01_1)))
 (let (($x283 (= $p4_main0_1 $p4_main01_1)))
 (let (($x280 (= $p3_main0_1 $p3_main01_1)))
 (let (($x277 (= $p2_main0_1 $p2_main01_1)))
 (let (($x278 (and (and (= $p0_main0_1 $p0_main01_1) (= $p1_main0_1 $p1_main01_1)) $x277)))
 (let (($x296 (and (and (and (and (and (and $x278 $x280) $x283) $x286) $x289) $x292) $x295)))
 (let (($x327 (and $x296 true)))
 (let (($x190 (= $r_main01_1 0)))
 (let (($x196 (= H4_1 (uplus h3_1 (pt $p5_main01_1 (Pt_R_1 10))))))
 (let (($x200 (= H3_1 (uplus h3_1 (pt $p5_main01_1 (Pt_R_1 d2_1))))))
 (let (($x201 (and $x200 $x196)))
 (let (($x212 (= $p5_main01_1 $p1_main01_1)))
 (let (($x214 (= $p4_main01_1 $p0_main01_1)))
 (let (($x221 (= H3_1 (uplus h1_1 (pt $p3_main01_1 (Pt_R_0 $p1_main01_1))))))
 (let (($x225 (= H2_1 (uplus h1_1 (pt $p3_main01_1 (Pt_R_0 l4_1))))))
 (let (($x226 (and $x225 $x221)))
 (let (($x237 (= $p3_main01_1 $p0_main01_1)))
 (let (($x239 (= $p2_main01_1 $p1_main01_1)))
 (let (($x243 (= AH2_1 (uplus AH1_1 (pt l3_1 (Pt_R_1 3))))))
 (let (($x244 (= $p1_main01_1 l3_1)))
 (let (($x248 (= H2_1 (uplus H1_1 (pt l3_1 (Pt_R_1 d1_1))))))
 (let (($x250 (and (and $x248 $x244) $x243)))
 (let (($x254 (= AH1_1 (uplus AH_0 (pt l1_1 (Pt_R_1 2))))))
 (let (($x255 (= $p0_main01_1 l1_1)))
 (let (($x259 (= H1_1 (uplus H_0 (pt l1_1 (Pt_R_0 l2_1))))))
 (let (($x261 (and (and $x259 $x255) $x254)))
 (let (($x341 (and (and (and (and (and (and $x261 $x250) $x239) $x237) $x226) $x214) $x212)))
 (let (($x159 (= loc_0 1)))
 (let (($x161 (and (and (= H_0 emp) (= AH_0 emp)) $x159)))
 (let (($x347 (and $x161 (=> $x159 (and (and (and (and $x341 $x201) $x190) $x327) $x302)))))
 (and $x347 (and (and $x302 $x360) $x367)))))))))))))))))))))))))))))))))))))))
(check-sat)
