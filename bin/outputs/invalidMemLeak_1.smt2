(set-logic SLHV)
(declare-hvar emp IntHeap)
(declare-locvar nil IntLoc)
(declare-datatype pt_record_0 ((Pt_R_0 (loc IntLoc))))
(declare-datatype pt_record_1 ((Pt_R_1 (data Int))))
(declare-const d11 Int)
(declare-locvar l16 IntLoc)
(declare-hvar ah7 IntHeap)
(declare-hvar AH_1 IntHeap)
(declare-const d10 Int)
(declare-locvar l14 IntLoc)
(declare-hvar h4 IntHeap)
(declare-hvar H_1 IntHeap)
(declare-locvar l15 IntLoc)
(declare-const loc_1 Int)
(declare-const $r_main0_0 Int)
(declare-const $r_main0_1 Int)
(declare-locvar $p7_main0_0 IntLoc)
(declare-locvar $p7_main0_1 IntLoc)
(declare-locvar $p6_main0_0 IntLoc)
(declare-locvar $p6_main0_1 IntLoc)
(declare-hvar H3_1 IntHeap)
(declare-hvar AH3_1 IntHeap)
(declare-locvar $p4_main01_1 IntLoc)
(declare-locvar $p4_main0_1 IntLoc)
(declare-locvar $p3_main01_1 IntLoc)
(declare-locvar $p3_main0_1 IntLoc)
(declare-locvar $p2_main01_1 IntLoc)
(declare-locvar $p2_main0_1 IntLoc)
(declare-locvar $p1_main01_1 IntLoc)
(declare-locvar $p1_main0_1 IntLoc)
(declare-locvar $p0_main01_1 IntLoc)
(declare-locvar $p0_main0_1 IntLoc)
(declare-const $i5_main01_1 Int)
(declare-const $i5_main0_1 Int)
(declare-locvar l6_1 IntLoc)
(declare-hvar AH2_1 IntHeap)
(declare-locvar l7_1 IntLoc)
(declare-hvar H2_1 IntHeap)
(declare-hvar h1_1 IntHeap)
(declare-locvar l5_1 IntLoc)
(declare-const d2_1 Int)
(declare-hvar H1_1 IntHeap)
(declare-const d1_1 Int)
(declare-locvar l3_1 IntLoc)
(declare-locvar l4_1 IntLoc)
(declare-hvar ah1 IntHeap)
(declare-hvar AH1_1 IntHeap)
(declare-locvar l1_1 IntLoc)
(declare-hvar AH_0 IntHeap)
(declare-locvar l2_1 IntLoc)
(declare-hvar H_0 IntHeap)
(declare-const loc_0 Int)
(assert
 (let (($x487 (or (= H_1 (uplus h4 (pt l14 (Pt_R_0 l15)))) (= H_1 (uplus h4 (pt l14 (Pt_R_1 d10)))))))
 (let (($x496 (and (and false $x487) (= AH_1 (uplus ah7 (pt l16 (Pt_R_1 d11)))))))
 (let (($x418 (= loc_1 2)))
 (let (($x411 (= $r_main0_1 $r_main0_0)))
 (let (($x412 (and true $x411)))
 (let (($x406 (= $p7_main0_1 $p7_main0_0)))
 (let (($x407 (and (and true (= $p6_main0_1 $p6_main0_0)) $x406)))
 (let (($x396 (= H_1 H3_1)))
 (let (($x393 (= AH_1 AH3_1)))
 (let (($x390 (= $p4_main0_1 $p4_main01_1)))
 (let (($x387 (= $p3_main0_1 $p3_main01_1)))
 (let (($x384 (= $p2_main0_1 $p2_main01_1)))
 (let (($x381 (= $p1_main0_1 $p1_main01_1)))
 (let (($x382 (and (and (= $i5_main0_1 $i5_main01_1) (= $p0_main0_1 $p0_main01_1)) $x381)))
 (let (($x397 (and (and (and (and (and $x382 $x384) $x387) $x390) $x393) $x396)))
 (let (($x398 (and $x397 true)))
 (let (($x311 (or (and (= $p4_main01_1 $p1_main01_1) (= $i5_main01_1 1)) (and (not (= $p4_main01_1 $p1_main01_1)) (= $i5_main01_1 0)))))
 (let (($x313 (= $p4_main01_1 $p3_main01_1)))
 (let (($x317 (= AH3_1 (uplus AH2_1 (pt l6_1 (Pt_R_1 2))))))
 (let (($x318 (= $p3_main01_1 l6_1)))
 (let (($x322 (= H3_1 (uplus H2_1 (pt l6_1 (Pt_R_0 l7_1))))))
 (let (($x324 (and (and $x322 $x318) $x317)))
 (let (($x326 (= H2_1 h1_1)))
 (let (($x327 (= $p2_main01_1 l5_1)))
 (let (($x331 (= H1_1 (uplus h1_1 (pt l5_1 (Pt_R_1 d2_1))))))
 (let (($x334 (= d1_1 1)))
 (let (($x336 (= $p2_main01_1 l3_1)))
 (let (($x340 (= H1_1 (uplus h1_1 (pt l3_1 (Pt_R_0 l4_1))))))
 (let (($x343 (= d1_1 2)))
 (let (($x345 (and (=> $x343 (and (and $x340 $x336) $x326)) (=> $x334 (and (and $x331 $x327) $x326)))))
 (let (($x346 (= AH2_1 ah1)))
 (let (($x350 (= AH1_1 (uplus ah1 (pt $p2_main01_1 (Pt_R_1 d1_1))))))
 (let (($x352 (and (and $x350 $x346) $x345)))
 (let (($x354 (= $p2_main01_1 $p1_main01_1)))
 (let (($x356 (= $p1_main01_1 $p0_main01_1)))
 (let (($x360 (= AH1_1 (uplus AH_0 (pt l1_1 (Pt_R_1 2))))))
 (let (($x361 (= $p0_main01_1 l1_1)))
 (let (($x365 (= H1_1 (uplus H_0 (pt l1_1 (Pt_R_0 l2_1))))))
 (let (($x367 (and (and $x365 $x361) $x360)))
 (let (($x468 (and (and (and (and (and (and $x367 $x356) $x354) $x352) $x324) $x313) $x311)))
 (let (($x277 (= loc_0 1)))
 (let (($x279 (and (and (= H_0 emp) (= AH_0 emp)) $x277)))
 (let (($x474 (and $x279 (=> $x277 (and (and (and (and $x468 $x398) $x407) $x412) $x418)))))
 (and $x474 $x496)))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
