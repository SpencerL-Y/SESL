// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/sesl ../testcases/printtest/exec.c -ll ../testcases/printtest/exec_IR.ll --bpl ../testcases/printtest/exec.bpl -t --sh-mem-leak --add-line-info

const main: ref;
axiom (main == $sub.ref(0, 1032));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $p0: ref8;
  var $p1: ref;
  var $p2: ref8;
  var $p3: ref32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref32;
  var $p7: ref32;
  var $i8: i1;
  var $p9: ref8;
  var $p10: ref32;
  var $p11: ref;
  var $p12: ref32;
  var $p13: ref8;
  var $p14: ref8;
$bb0:
  assume {:sourceloc "../testcases/printtest/exec.c", 161, 20} true;
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  assume {:sourceloc "../testcases/printtest/exec.c", 161, 20} true;
  call $p0 := malloc(16);
  assume {:sourceloc "../testcases/printtest/exec.c", 161, 20} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "../testcases/printtest/exec.c", 162, 15} true;
  call $p2 := malloc(1);
  assume {:sourceloc "../testcases/printtest/exec.c", 162, 15} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "../testcases/printtest/exec.c", 162, 11} true;
  $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/printtest/exec.c", 162, 13} true;
  $M.0 := $store.ref($M.0, $p4, $p2);
  assume {:sourceloc "../testcases/printtest/exec.c", 163, 14} true;
  $p5 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/printtest/exec.c", 163, 14} true;
  $p6 := $load.ref($M.0, $p5);
  assume {:sourceloc "../testcases/printtest/exec.c", 163, 26} true;
  $p7 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/printtest/exec.c", 163, 16} true;
  $i8 := $eq.ref($p6, $p7);
  assume {:sourceloc "../testcases/printtest/exec.c", 163, 8} true;
  assume {:branchcond $i8} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i8 == 1);
  assume {:sourceloc "../testcases/printtest/exec.c", 164, 18} true;
  call $p9 := malloc(1123123);
  assume {:sourceloc "../testcases/printtest/exec.c", 164, 18} true;
  $p10 := $bitcast.ref.ref($p9);
  assume {:sourceloc "../testcases/printtest/exec.c", 165, 5} true;
  goto $bb3;
$bb2:
  assume {:sourceloc "../testcases/printtest/exec.c", 163, 8} true;
  assume !(($i8 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "../testcases/printtest/exec.c", 166, 16} true;
  $p11 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/printtest/exec.c", 166, 16} true;
  $p12 := $load.ref($M.0, $p11);
  assume {:sourceloc "../testcases/printtest/exec.c", 166, 10} true;
  $p13 := $bitcast.ref.ref($p12);
  assume {:sourceloc "../testcases/printtest/exec.c", 166, 5} true;
  call free_($p13);
  assume {:sourceloc "../testcases/printtest/exec.c", 167, 10} true;
  $p14 := $bitcast.ref.ref($p1);
  assume {:sourceloc "../testcases/printtest/exec.c", 167, 5} true;
  call free_($p14);
  assume {:sourceloc "../testcases/printtest/exec.c", 168, 5} true;
  $r := 0;
  return;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 2064));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const malloc: ref;
axiom (malloc == $sub.ref(0, 3096));
procedure  malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $malloc($i0);
}
const free_: ref;
axiom (free_ == $sub.ref(0, 4128));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 5160));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 6192));
procedure  __SMACK_static_init()
{
$bb0:
  return;
}
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
