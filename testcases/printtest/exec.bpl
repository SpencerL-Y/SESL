// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/smack ../testcases/printtest/exec.c -ll ../testcases/printtest/exec_IR.ll --bpl ../testcases/printtest/exec.bpl -t --sh-mem-leak

const n: ref;
axiom (n == $sub.ref(0, 1028));
const a: ref;
axiom (a == $sub.ref(0, 2060));
const b: ref;
axiom (b == $sub.ref(0, 3092));
const main: ref;
axiom (main == $sub.ref(0, 4124));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i64;
  var $i2: i64;
  var $p3: ref8;
  var $p4: ref32;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref8;
  var $p9: ref32;
  var $p10: ref32;
  var $p11: ref32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $p15: ref32;
  var $i16: i64;
  var $p17: ref32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $p22: ref32;
  var $i23: i64;
  var $p24: ref32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref32;
  var $p28: ref32;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref32;
  var $p32: ref8;
  var $p33: ref32;
  var $p34: ref32;
  var $p35: ref8;
  var $p36: ref32;
  var $p37: ref8;
  var $p38: ref32;
  var $p39: ref32;
  var $p40: ref8;
$bb0:
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  $M.0 := 128;
  call {:cexpr "n"} boogie_si_record_i32(128);
  $i0 := $M.0;
  $i1 := $sext.i32.i64($i0);
  $i2 := $mul.i64($i1, 4);
  call $p3 := malloc($i2);
  $p4 := $bitcast.ref.ref($p3);
  $M.1 := $p3;
  $i5 := $M.0;
  $i6 := $sext.i32.i64($i5);
  $i7 := $mul.i64($i6, 4);
  call $p8 := malloc($i7);
  $p9 := $bitcast.ref.ref($p8);
  $M.2 := $p8;
  $p10 := $M.2;
  $p11 := $add.ref($p10, $mul.ref(1, 4));
  $M.2 := $p11;
  $M.3 := $store.i32($M.3, $p10, 0);
  $i12 := $M.0;
  $i13 := $slt.i32(0, $i12);
  assume {:branchcond $i13} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i13 == 1);
  $i14 := 0;
  goto $bb4;
$bb2:
  assume !(($i13 == 1));
  goto $bb3;
$bb3:
  $i21 := 0;
  goto $bb8;
$bb4:
  $p15 := $M.1;
  $i16 := $sext.i32.i64($i14);
  $p17 := $add.ref($p15, $mul.ref($i16, 4));
  $M.4 := $store.i32($M.4, $p17, $sub.i32(0, 1));
  goto $bb5;
$bb5:
  $i18 := $add.i32($i14, 1);
  call {:cexpr "i"} boogie_si_record_i32($i18);
  $i19 := $M.0;
  $i20 := $slt.i32($i18, $i19);
  assume {:branchcond $i20} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i20 == 1);
  $i14 := $i18;
  goto $bb4;
$bb7:
  assume !(($i20 == 1));
  goto $bb3;
$bb8:
  $p22 := $M.2;
  $i23 := $sext.i32.i64($i21);
  $p24 := $add.ref($p22, $mul.ref($i23, 4));
  $M.3 := $store.i32($M.3, $p24, $sub.i32(0, 1));
  goto $bb9;
$bb9:
  $i25 := $add.i32($i21, 1);
  call {:cexpr "i"} boogie_si_record_i32($i25);
  $i26 := $slt.i32($i25, 127);
  assume {:branchcond $i26} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i26 == 1);
  $i21 := $i25;
  goto $bb8;
$bb11:
  assume !(($i26 == 1));
  $p27 := $M.2;
  $p28 := $add.ref($p27, $mul.ref($sub.ref(0, 2), 4));
  $i29 := $load.i32($M.3, $p28);
  $i30 := $ne.i32($i29, 0);
  assume {:branchcond $i30} true;
  goto $bb12, $bb13;
$bb12:
  assume ($i30 == 1);
  $p31 := $M.1;
  $p32 := $bitcast.ref.ref($p31);
  call free_($p32);
  $p33 := $M.2;
  $p34 := $add.ref($p33, $mul.ref($sub.ref(0, 1), 4));
  $p35 := $bitcast.ref.ref($p34);
  call free_($p35);
  goto $bb14;
$bb13:
  assume !(($i30 == 1));
  $p36 := $M.1;
  $p37 := $bitcast.ref.ref($p36);
  call free_($p37);
  $p38 := $M.2;
  $p39 := $add.ref($p38, $mul.ref($sub.ref(0, 1), 4));
  $p40 := $bitcast.ref.ref($p39);
  call free_($p40);
  goto $bb14;
$bb14:
  $r := 0;
  return;
}
const malloc: ref;
axiom (malloc == $sub.ref(0, 5156));
procedure  malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $malloc($i0);
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 6188));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const free_: ref;
axiom (free_ == $sub.ref(0, 7220));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 8252));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 9284));
procedure  __SMACK_static_init()
{
$bb0:
  $M.0 := 0;
  call {:cexpr "n"} boogie_si_record_i32(0);
  $M.1 := $0.ref;
  $M.2 := $0.ref;
  return;
}
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
