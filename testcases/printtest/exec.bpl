// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/smack ../testcases/printtest/exec.c -ll ../testcases/printtest/exec_IR.ll --bpl ../testcases/printtest/exec.bpl -t --sh-mem-leak --add-line-info

const {:global_variable} {:pointer_to_size 16} .str: ref;
axiom (.str == $sub.ref(0, 1026));
const {:global_variable} {:pointer_to_size 240} {:count 30} .str.1: ref;
axiom (.str.1 == $sub.ref(0, 2080));
const {:global_variable} {:pointer_to_size 152} {:count 19} __PRETTY_FUNCTION__.reach_error: ref;
axiom (__PRETTY_FUNCTION__.reach_error == $sub.ref(0, 3123));
const reach_error: ref;
axiom (reach_error == $sub.ref(0, 4155));
procedure  reach_error()
{
$bb0:
  assume {:sourceloc "../testcases/printtest/exec.c", 7, 22} true;
  assume {:sourceloc "../testcases/printtest/exec.c", 7, 22} true;
  call __assert_fail(.str, .str.1, 7, __PRETTY_FUNCTION__.reach_error);
  assume {:sourceloc "../testcases/printtest/exec.c", 7, 22} true;
  assume false;
}
const __assert_fail: ref;
axiom (__assert_fail == $sub.ref(0, 5187));
procedure  __assert_fail($p0: ref, $p1: ref, $i2: i32, $p3: ref);
const foo: ref;
axiom (foo == $sub.ref(0, 6219));
procedure  foo($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref8;
  var $i7: i32;
  var $i8: i1;
$bb0:
  assume {:sourceloc "../testcases/printtest/exec.c", 13, 19} true;
  call {:cexpr "foo:arg:n"} boogie_si_record_i32($i2);
  assume {:sourceloc "../testcases/printtest/exec.c", 13, 19} true;
  $i3 := $slt.i32(0, $i2);
  assume {:sourceloc "../testcases/printtest/exec.c", 13, 5} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "../testcases/printtest/exec.c", 13, 5} true;
  $i4 := 0;
  goto $bb4;
$bb2:
  assume {:sourceloc "../testcases/printtest/exec.c", 13, 5} true;
  assume !(($i3 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "../testcases/printtest/exec.c", 15, 5} true;
  goto $bb8;
$bb4:
  assume {:sourceloc "../testcases/printtest/exec.c", 14, 9} true;
  $i5 := $sext.i32.i64($i4);
  assume {:sourceloc "../testcases/printtest/exec.c", 14, 9} true;
  $p6 := $add.ref($p0, $mul.ref($i5, 1));
  assume {:sourceloc "../testcases/printtest/exec.c", 14, 14} true;
  $M.0 := $store.i8($M.0, $p6, $sub.i8(0, 1));
  assume {:sourceloc "../testcases/printtest/exec.c", 14, 9} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "../testcases/printtest/exec.c", 13, 25} true;
  $i7 := $add.i32($i4, 1);
  call {:cexpr "i"} boogie_si_record_i32($i7);
  assume {:sourceloc "../testcases/printtest/exec.c", 13, 19} true;
  $i8 := $slt.i32($i7, $i2);
  assume {:sourceloc "../testcases/printtest/exec.c", 13, 5} true;
  assume {:branchcond $i8} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i8 == 1);
  $i4 := $i7;
  goto $bb4;
$bb7:
  assume !(($i8 == 1));
  assume {:sourceloc "../testcases/printtest/exec.c", 13, 5} true;
  goto $bb3;
$bb8:
  assume {:sourceloc "../testcases/printtest/exec.c", 16, 14} true;
  $M.0 := $store.i8($M.0, $p1, $sub.i8(0, 1));
  assume {:sourceloc "../testcases/printtest/exec.c", 16, 9} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "../testcases/printtest/exec.c", 17, 1} true;
  return;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 7251));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const test_1: ref;
axiom (test_1 == $sub.ref(0, 8283));
procedure  test_1()
{
  var $i0: i64;
  var $i1: i64;
  var $p2: ref8;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref8;
  var $p6: ref8;
  var $p7: ref8;
  var $i8: i8;
  var $i9: i1;
$bb0:
  assume {:sourceloc "../testcases/printtest/exec.c", 23, 16} true;
  assume {:sourceloc "../testcases/printtest/exec.c", 23, 16} true;
  $i0 := $sext.i32.i64(2);
  assume {:sourceloc "../testcases/printtest/exec.c", 23, 18} true;
  $i1 := $mul.i64($i0, 1);
  assume {:sourceloc "../testcases/printtest/exec.c", 23, 9} true;
  call $p2 := malloc($i1);
  assume {:sourceloc "../testcases/printtest/exec.c", 24, 16} true;
  $i3 := $sext.i32.i64(2);
  assume {:sourceloc "../testcases/printtest/exec.c", 24, 18} true;
  $i4 := $mul.i64($i3, 1);
  assume {:sourceloc "../testcases/printtest/exec.c", 24, 9} true;
  call $p5 := malloc($i4);
  assume {:sourceloc "../testcases/printtest/exec.c", 25, 7} true;
  $p6 := $add.ref($p5, $mul.ref(1, 1));
  assume {:sourceloc "../testcases/printtest/exec.c", 25, 10} true;
  $M.0 := $store.i8($M.0, $p5, 0);
  assume {:sourceloc "../testcases/printtest/exec.c", 26, 5} true;
  call foo($p2, $p6, 2);
  assume {:sourceloc "../testcases/printtest/exec.c", 27, 9} true;
  $p7 := $add.ref($p6, $mul.ref($sub.ref(0, 1), 1));
  assume {:sourceloc "../testcases/printtest/exec.c", 27, 9} true;
  $i8 := $load.i8($M.0, $p7);
  assume {:sourceloc "../testcases/printtest/exec.c", 27, 9} true;
  $i9 := $ne.i8($i8, 0);
  assume {:sourceloc "../testcases/printtest/exec.c", 27, 9} true;
  assume {:branchcond $i9} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i9 == 1);
  assume {:sourceloc "../testcases/printtest/exec.c", 28, 9} true;
  call free_($p2);
  assume {:sourceloc "../testcases/printtest/exec.c", 29, 9} true;
  call free_($p6);
  assume {:sourceloc "../testcases/printtest/exec.c", 30, 5} true;
  goto $bb3;
$bb2:
  assume !(($i9 == 1));
  assume {:sourceloc "../testcases/printtest/exec.c", 32, 9} true;
  call free_($p2);
  assume {:sourceloc "../testcases/printtest/exec.c", 33, 9} true;
  call free_($p6);
  goto $bb3;
$bb3:
  assume {:sourceloc "../testcases/printtest/exec.c", 35, 1} true;
  return;
}
const malloc: ref;
axiom (malloc == $sub.ref(0, 9315));
procedure  malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $malloc($i0);
}
const free_: ref;
axiom (free_ == $sub.ref(0, 10347));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const recursive: ref;
axiom (recursive == $sub.ref(0, 11379));
procedure  recursive($i0: i32)
  returns ($r: i32)
{
  var $i1: i1;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i2: i32;
$bb0:
  assume {:sourceloc "../testcases/printtest/exec.c", 38, 11} true;
  call {:cexpr "recursive:arg:n"} boogie_si_record_i32($i0);
  assume {:sourceloc "../testcases/printtest/exec.c", 38, 11} true;
  $i1 := $eq.i32($i0, 1);
  assume {:sourceloc "../testcases/printtest/exec.c", 38, 9} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "../testcases/printtest/exec.c", 38, 17} true;
  $i2 := 1;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "../testcases/printtest/exec.c", 39, 29} true;
  $i3 := $sub.i32($i0, 1);
  assume {:sourceloc "../testcases/printtest/exec.c", 39, 17} true;
  call $i4 := recursive($i3);
  assume {:sourceloc "../testcases/printtest/exec.c", 39, 34} true;
  $i5 := $add.i32($i4, 1);
  assume {:sourceloc "../testcases/printtest/exec.c", 39, 10} true;
  $i2 := $i5;
  goto $bb3;
$bb3:
  assume {:sourceloc "../testcases/printtest/exec.c", 0, 0} true;
  assume {:sourceloc "../testcases/printtest/exec.c", 40, 1} true;
  $r := $i2;
  return;
}
const test_2: ref;
axiom (test_2 == $sub.ref(0, 12411));
procedure  test_2()
{
  var $i0: i32;
$bb0:
  assume {:sourceloc "../testcases/printtest/exec.c", 43, 13} true;
  assume {:sourceloc "../testcases/printtest/exec.c", 43, 13} true;
  call $i0 := recursive(2);
  call {:cexpr "t"} boogie_si_record_i32($i0);
  assume {:sourceloc "../testcases/printtest/exec.c", 48, 1} true;
  return;
}
const add_1: ref;
axiom (add_1 == $sub.ref(0, 13443));
procedure  add_1($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
$bb0:
  assume {:sourceloc "../testcases/printtest/exec.c", 51, 10} true;
  assume {:sourceloc "../testcases/printtest/exec.c", 51, 10} true;
  $i1 := $load.i32($M.0, $p0);
  assume {:sourceloc "../testcases/printtest/exec.c", 51, 10} true;
  $i2 := $add.i32($i1, 1);
  assume {:sourceloc "../testcases/printtest/exec.c", 51, 10} true;
  $M.0 := $store.i32($M.0, $p0, $i2);
  assume {:sourceloc "../testcases/printtest/exec.c", 52, 1} true;
  return;
}
const add_2: ref;
axiom (add_2 == $sub.ref(0, 14475));
procedure  add_2($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
$bb0:
  assume {:sourceloc "../testcases/printtest/exec.c", 55, 8} true;
  assume {:sourceloc "../testcases/printtest/exec.c", 55, 8} true;
  $i1 := $load.i32($M.0, $p0);
  assume {:sourceloc "../testcases/printtest/exec.c", 55, 8} true;
  $i2 := $add.i32($i1, 2);
  assume {:sourceloc "../testcases/printtest/exec.c", 55, 8} true;
  $M.0 := $store.i32($M.0, $p0, $i2);
  assume {:sourceloc "../testcases/printtest/exec.c", 56, 1} true;
  return;
}
const test_3: ref;
axiom (test_3 == $sub.ref(0, 15507));
procedure  test_3()
{
  var $p0: ref8;
  var $p1: ref32;
  var $p2: ref32;
  var $p3: ref32;
  var $p4: ref32;
  var $p5: ref8;
  var $p6: ref32;
  var $i7: i32;
  var $p8: ref32;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref8;
  var $p12: ref8;
  var $i13: i1;
$bb0:
  assume {:sourceloc "../testcases/printtest/exec.c", 59, 20} true;
  assume {:sourceloc "../testcases/printtest/exec.c", 59, 20} true;
  call $p0 := malloc(8);
  assume {:sourceloc "../testcases/printtest/exec.c", 59, 14} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "../testcases/printtest/exec.c", 60, 12} true;
  $p2 := $add.ref($p1, $mul.ref(1, 4));
  assume {:sourceloc "../testcases/printtest/exec.c", 60, 17} true;
  $M.0 := $store.i32($M.0, $p2, 0);
  assume {:sourceloc "../testcases/printtest/exec.c", 60, 5} true;
  $p3 := $add.ref($p1, $mul.ref(0, 4));
  assume {:sourceloc "../testcases/printtest/exec.c", 60, 10} true;
  $M.0 := $store.i32($M.0, $p3, 0);
  assume {:sourceloc "../testcases/printtest/exec.c", 61, 5} true;
  call add_1($p1);
  assume {:sourceloc "../testcases/printtest/exec.c", 62, 13} true;
  $p4 := $add.ref($p1, $mul.ref(1, 4));
  assume {:sourceloc "../testcases/printtest/exec.c", 62, 5} true;
  call add_2($p4);
  assume {:sourceloc "../testcases/printtest/exec.c", 64, 21} true;
  call $p5 := malloc(12);
  assume {:sourceloc "../testcases/printtest/exec.c", 64, 14} true;
  $p6 := $bitcast.ref.ref($p5);
  assume {:sourceloc "../testcases/printtest/exec.c", 65, 5} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "../testcases/printtest/exec.c", 66, 16} true;
  $i7 := $load.i32($M.0, $p1);
  call {:cexpr "sum"} boogie_si_record_i32($i7);
  assume {:sourceloc "../testcases/printtest/exec.c", 67, 5} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "../testcases/printtest/exec.c", 66, 16} true;
  $p8 := $add.ref($p1, $mul.ref(1, 4));
  assume {:sourceloc "../testcases/printtest/exec.c", 66, 16} true;
  $i9 := $load.i32($M.0, $p8);
  assume {:sourceloc "../testcases/printtest/exec.c", 66, 13} true;
  $i10 := $add.i32($i7, $i9);
  call {:cexpr "sum"} boogie_si_record_i32($i10);
  assume {:sourceloc "../testcases/printtest/exec.c", 67, 5} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "../testcases/printtest/exec.c", 68, 13} true;
  $i13 := $eq.i32($i10, 3);
  assume {:sourceloc "../testcases/printtest/exec.c", 68, 9} true;
  assume {:branchcond $i13} true;
  goto $bb4, $bb6;
$bb4:
  assume ($i13 == 1);
  assume {:sourceloc "../testcases/printtest/exec.c", 69, 14} true;
  $p11 := $bitcast.ref.ref($p6);
  assume {:sourceloc "../testcases/printtest/exec.c", 69, 9} true;
  call free_($p11);
  assume {:sourceloc "../testcases/printtest/exec.c", 70, 5} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "../testcases/printtest/exec.c", 71, 10} true;
  $p12 := $bitcast.ref.ref($p1);
  assume {:sourceloc "../testcases/printtest/exec.c", 71, 5} true;
  call free_($p12);
  assume {:sourceloc "../testcases/printtest/exec.c", 72, 1} true;
  return;
$bb6:
  assume {:sourceloc "../testcases/printtest/exec.c", 68, 9} true;
  assume !(($i13 == 1));
  goto $bb5;
}
const test_4: ref;
axiom (test_4 == $sub.ref(0, 16539));
procedure  test_4()
{
  var $p0: ref8;
  var $p1: ref32;
  var $p2: ref32;
  var $p3: ref32;
  var $p4: ref32;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref32;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref8;
  var $p11: ref32;
  var $i12: i32;
  var $p13: ref32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref8;
  var $i17: i1;
$bb0:
  assume {:sourceloc "../testcases/printtest/exec.c", 75, 20} true;
  assume {:sourceloc "../testcases/printtest/exec.c", 75, 20} true;
  call $p0 := malloc(8);
  assume {:sourceloc "../testcases/printtest/exec.c", 75, 14} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "../testcases/printtest/exec.c", 76, 12} true;
  $p2 := $add.ref($p1, $mul.ref(1, 4));
  assume {:sourceloc "../testcases/printtest/exec.c", 76, 17} true;
  $M.0 := $store.i32($M.0, $p2, 0);
  assume {:sourceloc "../testcases/printtest/exec.c", 76, 5} true;
  $p3 := $add.ref($p1, $mul.ref(0, 4));
  assume {:sourceloc "../testcases/printtest/exec.c", 76, 10} true;
  $M.0 := $store.i32($M.0, $p3, 0);
  assume {:sourceloc "../testcases/printtest/exec.c", 77, 5} true;
  $p4 := $add.ref($p1, $mul.ref(0, 4));
  assume {:sourceloc "../testcases/printtest/exec.c", 77, 10} true;
  $i5 := $load.i32($M.0, $p4);
  assume {:sourceloc "../testcases/printtest/exec.c", 77, 10} true;
  $i6 := $add.i32($i5, 1);
  assume {:sourceloc "../testcases/printtest/exec.c", 77, 10} true;
  $M.0 := $store.i32($M.0, $p4, $i6);
  assume {:sourceloc "../testcases/printtest/exec.c", 78, 5} true;
  $p7 := $add.ref($p1, $mul.ref(1, 4));
  assume {:sourceloc "../testcases/printtest/exec.c", 78, 10} true;
  $i8 := $load.i32($M.0, $p7);
  assume {:sourceloc "../testcases/printtest/exec.c", 78, 10} true;
  $i9 := $add.i32($i8, 2);
  assume {:sourceloc "../testcases/printtest/exec.c", 78, 10} true;
  $M.0 := $store.i32($M.0, $p7, $i9);
  assume {:sourceloc "../testcases/printtest/exec.c", 80, 21} true;
  call $p10 := malloc(12);
  assume {:sourceloc "../testcases/printtest/exec.c", 80, 14} true;
  $p11 := $bitcast.ref.ref($p10);
  assume {:sourceloc "../testcases/printtest/exec.c", 81, 5} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "../testcases/printtest/exec.c", 82, 16} true;
  $i12 := $load.i32($M.0, $p1);
  call {:cexpr "sum"} boogie_si_record_i32($i12);
  assume {:sourceloc "../testcases/printtest/exec.c", 83, 5} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "../testcases/printtest/exec.c", 82, 16} true;
  $p13 := $add.ref($p1, $mul.ref(1, 4));
  assume {:sourceloc "../testcases/printtest/exec.c", 82, 16} true;
  $i14 := $load.i32($M.0, $p13);
  assume {:sourceloc "../testcases/printtest/exec.c", 82, 13} true;
  $i15 := $add.i32($i12, $i14);
  call {:cexpr "sum"} boogie_si_record_i32($i15);
  assume {:sourceloc "../testcases/printtest/exec.c", 83, 5} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "../testcases/printtest/exec.c", 84, 13} true;
  $i17 := $eq.i32($i15, 3);
  assume {:sourceloc "../testcases/printtest/exec.c", 84, 9} true;
  assume {:branchcond $i17} true;
  goto $bb4, $bb6;
$bb4:
  assume ($i17 == 1);
  assume {:sourceloc "../testcases/printtest/exec.c", 85, 14} true;
  $p16 := $bitcast.ref.ref($p11);
  assume {:sourceloc "../testcases/printtest/exec.c", 85, 9} true;
  call free_($p16);
  assume {:sourceloc "../testcases/printtest/exec.c", 86, 5} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "../testcases/printtest/exec.c", 87, 1} true;
  return;
$bb6:
  assume {:sourceloc "../testcases/printtest/exec.c", 84, 9} true;
  assume !(($i17 == 1));
  goto $bb5;
}
const test_5: ref;
axiom (test_5 == $sub.ref(0, 17571));
procedure  test_5()
{
  var $p0: ref8;
  var $p1: ref32;
  var $p2: ref32;
  var $p3: ref32;
  var $p4: ref8;
  var $p5: ref32;
  var $p6: ref32;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref8;
  var $p10: ref8;
$bb0:
  assume {:sourceloc "../testcases/printtest/exec.c", 90, 20} true;
  assume {:sourceloc "../testcases/printtest/exec.c", 90, 20} true;
  call $p0 := malloc(8);
  assume {:sourceloc "../testcases/printtest/exec.c", 90, 14} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "../testcases/printtest/exec.c", 91, 12} true;
  $p2 := $add.ref($p1, $mul.ref(1, 4));
  assume {:sourceloc "../testcases/printtest/exec.c", 91, 17} true;
  $M.0 := $store.i32($M.0, $p2, 0);
  assume {:sourceloc "../testcases/printtest/exec.c", 91, 5} true;
  $p3 := $add.ref($p1, $mul.ref(0, 4));
  assume {:sourceloc "../testcases/printtest/exec.c", 91, 10} true;
  $M.0 := $store.i32($M.0, $p3, 0);
  assume {:sourceloc "../testcases/printtest/exec.c", 92, 5} true;
  call add_2($p1);
  assume {:sourceloc "../testcases/printtest/exec.c", 93, 21} true;
  call $p4 := malloc(12);
  assume {:sourceloc "../testcases/printtest/exec.c", 93, 14} true;
  $p5 := $bitcast.ref.ref($p4);
  assume {:sourceloc "../testcases/printtest/exec.c", 94, 9} true;
  $p6 := $add.ref($p1, $mul.ref(0, 4));
  assume {:sourceloc "../testcases/printtest/exec.c", 94, 9} true;
  $i7 := $load.i32($M.0, $p6);
  assume {:sourceloc "../testcases/printtest/exec.c", 94, 14} true;
  $i8 := $eq.i32($i7, 2);
  assume {:sourceloc "../testcases/printtest/exec.c", 94, 9} true;
  assume {:branchcond $i8} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i8 == 1);
  assume {:sourceloc "../testcases/printtest/exec.c", 95, 14} true;
  $p9 := $bitcast.ref.ref($p5);
  assume {:sourceloc "../testcases/printtest/exec.c", 95, 9} true;
  call free_($p9);
  assume {:sourceloc "../testcases/printtest/exec.c", 96, 5} true;
  goto $bb3;
$bb2:
  assume {:sourceloc "../testcases/printtest/exec.c", 94, 9} true;
  assume !(($i8 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "../testcases/printtest/exec.c", 97, 10} true;
  $p10 := $bitcast.ref.ref($p1);
  assume {:sourceloc "../testcases/printtest/exec.c", 97, 5} true;
  call free_($p10);
  assume {:sourceloc "../testcases/printtest/exec.c", 98, 1} true;
  return;
}
const test_6: ref;
axiom (test_6 == $sub.ref(0, 18603));
procedure  test_6()
  returns ($r: i32)
{
  var $p0: ref;
$bb0:
  assume {:sourceloc "../testcases/printtest/exec.c", 128, 5} true;
  call $p0 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume true;
  assume {:sourceloc "../testcases/printtest/exec.c", 128, 5} true;
  call alloc_data($p0);
  assume {:sourceloc "../testcases/printtest/exec.c", 129, 5} true;
  call free_data($p0);
  assume {:sourceloc "../testcases/printtest/exec.c", 130, 5} true;
  $r := 0;
  return;
}
const alloc_data: ref;
axiom (alloc_data == $sub.ref(0, 19635));
procedure  alloc_data($p0: ref)
{
  var $p1: ref8;
  var $p2: ref;
  var $p3: ref8;
  var $p4: ref;
$bb0:
  assume {:sourceloc "../testcases/printtest/exec.c", 108, 17} true;
  assume {:sourceloc "../testcases/printtest/exec.c", 108, 17} true;
  call $p1 := malloc(16);
  assume {:sourceloc "../testcases/printtest/exec.c", 108, 12} true;
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/printtest/exec.c", 108, 15} true;
  $M.1 := $store.ref($M.1, $p2, $p1);
  assume {:sourceloc "../testcases/printtest/exec.c", 109, 17} true;
  call $p3 := malloc(24);
  assume {:sourceloc "../testcases/printtest/exec.c", 109, 12} true;
  $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/printtest/exec.c", 109, 15} true;
  $M.2 := $store.ref($M.2, $p4, $p3);
  assume {:sourceloc "../testcases/printtest/exec.c", 110, 1} true;
  return;
}
const free_data: ref;
axiom (free_data == $sub.ref(0, 20667));
procedure  free_data($p0: ref)
{
  var $p1: ref;
  var $p2: ref8;
  var $p3: ref;
  var $p4: ref8;
  var $i5: i1;
$bb0:
  assume {:sourceloc "../testcases/printtest/exec.c", 114, 22} true;
  assume {:sourceloc "../testcases/printtest/exec.c", 114, 22} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/printtest/exec.c", 114, 22} true;
  $p2 := $load.ref($M.1, $p1);
  assume {:sourceloc "../testcases/printtest/exec.c", 115, 22} true;
  $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/printtest/exec.c", 115, 22} true;
  $p4 := $load.ref($M.2, $p3);
  assume {:sourceloc "../testcases/printtest/exec.c", 117, 12} true;
  $i5 := $eq.ref($p2, $p4);
  assume {:sourceloc "../testcases/printtest/exec.c", 117, 9} true;
  assume {:branchcond $i5} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i5 == 1);
  assume {:sourceloc "../testcases/printtest/exec.c", 118, 9} true;
  call free_($p2);
  assume {:sourceloc "../testcases/printtest/exec.c", 119, 9} true;
  call free_($p4);
  assume {:sourceloc "../testcases/printtest/exec.c", 120, 5} true;
  goto $bb3;
$bb2:
  assume {:sourceloc "../testcases/printtest/exec.c", 117, 9} true;
  assume !(($i5 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "../testcases/printtest/exec.c", 124, 1} true;
  return;
}
const loopN: ref;
axiom (loopN == $sub.ref(0, 21699));
procedure  loopN($i0: i32)
  returns ($r: i32)
{
  var $i1: i1;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i2: i32;
$bb0:
  assume {:sourceloc "../testcases/printtest/exec.c", 135, 23} true;
  call {:cexpr "loopN:arg:n"} boogie_si_record_i32($i0);
  assume {:sourceloc "../testcases/printtest/exec.c", 135, 23} true;
  $i1 := $slt.i32(0, $i0);
  assume {:sourceloc "../testcases/printtest/exec.c", 135, 5} true;
  $i2 := 0;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "../testcases/printtest/exec.c", 135, 5} true;
  $i3, $i4 := 0, 0;
  goto $bb4;
$bb2:
  assume {:sourceloc "../testcases/printtest/exec.c", 135, 5} true;
  assume !(($i1 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "../testcases/printtest/exec.c", 0, 0} true;
  assume {:sourceloc "../testcases/printtest/exec.c", 138, 5} true;
  $r := $i2;
  return;
$bb4:
  assume {:sourceloc "../testcases/printtest/exec.c", 136, 13} true;
  $i5 := $add.i32($i4, $i3);
  call {:cexpr "sum"} boogie_si_record_i32($i5);
  assume {:sourceloc "../testcases/printtest/exec.c", 137, 5} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "../testcases/printtest/exec.c", 135, 28} true;
  $i6 := $add.i32($i3, 1);
  call {:cexpr "i"} boogie_si_record_i32($i6);
  assume {:sourceloc "../testcases/printtest/exec.c", 135, 23} true;
  $i7 := $slt.i32($i6, $i0);
  assume {:sourceloc "../testcases/printtest/exec.c", 135, 5} true;
  $i8 := $i5;
  assume {:branchcond $i7} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i7 == 1);
  $i3, $i4 := $i6, $i5;
  goto $bb4;
$bb7:
  assume !(($i7 == 1));
  assume {:sourceloc "../testcases/printtest/exec.c", 135, 5} true;
  $i2 := $i8;
  goto $bb3;
}
const main: ref;
axiom (main == $sub.ref(0, 22731));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $i0: i32;
$bb0:
  assume {:sourceloc "../testcases/printtest/exec.c", 148, 5} true;
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  assume {:sourceloc "../testcases/printtest/exec.c", 148, 5} true;
  call $i0 := test_6();
  assume {:sourceloc "../testcases/printtest/exec.c", 149, 5} true;
  $r := 0;
  return;
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 23763));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 24795));
procedure  __SMACK_static_init()
{
$bb0:
  return;
}
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
