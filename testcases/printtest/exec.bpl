// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/smack ../testcases/printtest/exec.c -ll ../testcases/printtest/exec_IR.ll --bpl ../testcases/printtest/exec.bpl -t

const main: ref;
axiom (main == $sub.ref(0, 1032));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $i0: i1;
  var $i1: i1;
  var $i2: i8;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
$bb0:
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  $i0 := $trunc.i8.i1(1);
  $i1 := $xor.i1($i0, 1);
  $i2 := $zext.i1.i8($i1);
  call {:cexpr "na"} boogie_si_record_i8($i2);
  $i3 := $sext.i32.i64(1);
  $i4 := $mul.i64($i3, 4);
  call $p5 := malloc($i4);
  $p6 := $bitcast.ref.ref($p5);
  $p7 := $bitcast.ref.ref($p6);
  call free_($p7);
  $r := 0;
  return;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 2064));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const malloc: ref;
axiom (malloc == $sub.ref(0, 3096));
procedure  malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $malloc($i0);
}
const free_: ref;
axiom (free_ == $sub.ref(0, 4128));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 5160));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 6192));
procedure  __SMACK_static_init()
{
$bb0:
  return;
}
procedure  boogie_si_record_i8(x: i8);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
