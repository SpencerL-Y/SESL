// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/sesl ../testcases/printtest/exec.c -ll ../testcases/printtest/exec_IR.ll --bpl ../testcases/printtest/exec.bpl -t --sh-mem-leak --add-line-info

const main: ref;
axiom (main == $sub.ref(0, 1032));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $p0: ref8;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref32;
  var $p5: ref;
  var $p6: ref8;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref8;
  var $p11: ref32;
  var $p12: ref;
  var $p13: ref8;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref8;
  var $p18: ref32;
  var $p19: ref;
  var $p20: ref8;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref8;
  var $p25: ref32;
  var $p26: ref;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref32;
  var $p32: ref;
  var $p33: ref32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref32;
  var $p37: ref8;
  var $p38: ref8;
  var $i39: i1;
$bb0:
  assume {:sourceloc "../testcases/printtest/exec.c", 176, 6} true;
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  assume {:sourceloc "../testcases/printtest/exec.c", 176, 6} true;
  call $p0 := malloc(32);
  assume {:sourceloc "../testcases/printtest/exec.c", 176, 6} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "../testcases/printtest/exec.c", 177, 5} true;
  $p2 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/printtest/exec.c", 177, 10} true;
  $M.0 := $store.ref($M.0, $p2, $0.ref);
  assume {:sourceloc "../testcases/printtest/exec.c", 178, 5} true;
  $p3 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/printtest/exec.c", 178, 10} true;
  $M.1 := $store.ref($M.1, $p3, $0.ref);
  assume {:sourceloc "../testcases/printtest/exec.c", 179, 17} true;
  $p4 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
  assume {:sourceloc "../testcases/printtest/exec.c", 179, 5} true;
  $p5 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
  assume {:sourceloc "../testcases/printtest/exec.c", 179, 11} true;
  $M.2 := $store.ref($M.2, $p5, $p4);
  assume {:sourceloc "../testcases/printtest/exec.c", 181, 6} true;
  call $p6 := malloc(32);
  assume {:sourceloc "../testcases/printtest/exec.c", 181, 6} true;
  $p7 := $bitcast.ref.ref($p6);
  assume {:sourceloc "../testcases/printtest/exec.c", 182, 5} true;
  $p8 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/printtest/exec.c", 182, 10} true;
  $M.0 := $store.ref($M.0, $p8, $p0);
  assume {:sourceloc "../testcases/printtest/exec.c", 183, 8} true;
  $p9 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/printtest/exec.c", 183, 13} true;
  $M.1 := $store.ref($M.1, $p9, $p6);
  assume {:sourceloc "../testcases/printtest/exec.c", 184, 13} true;
  call $p10 := malloc(4);
  assume {:sourceloc "../testcases/printtest/exec.c", 184, 13} true;
  $p11 := $bitcast.ref.ref($p10);
  assume {:sourceloc "../testcases/printtest/exec.c", 184, 5} true;
  $p12 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(16, 1));
  assume {:sourceloc "../testcases/printtest/exec.c", 184, 11} true;
  $M.2 := $store.ref($M.2, $p12, $p10);
  assume {:sourceloc "../testcases/printtest/exec.c", 186, 6} true;
  call $p13 := malloc(32);
  assume {:sourceloc "../testcases/printtest/exec.c", 186, 6} true;
  $p14 := $bitcast.ref.ref($p13);
  assume {:sourceloc "../testcases/printtest/exec.c", 187, 5} true;
  $p15 := $add.ref($add.ref($p14, $mul.ref(0, 32)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/printtest/exec.c", 187, 10} true;
  $M.0 := $store.ref($M.0, $p15, $p6);
  assume {:sourceloc "../testcases/printtest/exec.c", 188, 8} true;
  $p16 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/printtest/exec.c", 188, 13} true;
  $M.1 := $store.ref($M.1, $p16, $p13);
  assume {:sourceloc "../testcases/printtest/exec.c", 189, 13} true;
  call $p17 := malloc(4);
  assume {:sourceloc "../testcases/printtest/exec.c", 189, 13} true;
  $p18 := $bitcast.ref.ref($p17);
  assume {:sourceloc "../testcases/printtest/exec.c", 189, 5} true;
  $p19 := $add.ref($add.ref($p14, $mul.ref(0, 32)), $mul.ref(16, 1));
  assume {:sourceloc "../testcases/printtest/exec.c", 189, 11} true;
  $M.2 := $store.ref($M.2, $p19, $p17);
  assume {:sourceloc "../testcases/printtest/exec.c", 191, 6} true;
  call $p20 := malloc(32);
  assume {:sourceloc "../testcases/printtest/exec.c", 191, 6} true;
  $p21 := $bitcast.ref.ref($p20);
  assume {:sourceloc "../testcases/printtest/exec.c", 192, 5} true;
  $p22 := $add.ref($add.ref($p21, $mul.ref(0, 32)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/printtest/exec.c", 192, 10} true;
  $M.0 := $store.ref($M.0, $p22, $p13);
  assume {:sourceloc "../testcases/printtest/exec.c", 193, 8} true;
  $p23 := $add.ref($add.ref($p14, $mul.ref(0, 32)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/printtest/exec.c", 193, 13} true;
  $M.1 := $store.ref($M.1, $p23, $p20);
  assume {:sourceloc "../testcases/printtest/exec.c", 194, 13} true;
  call $p24 := malloc(4);
  assume {:sourceloc "../testcases/printtest/exec.c", 194, 13} true;
  $p25 := $bitcast.ref.ref($p24);
  assume {:sourceloc "../testcases/printtest/exec.c", 194, 5} true;
  $p26 := $add.ref($add.ref($p21, $mul.ref(0, 32)), $mul.ref(16, 1));
  assume {:sourceloc "../testcases/printtest/exec.c", 194, 11} true;
  $M.2 := $store.ref($M.2, $p26, $p24);
  assume {:sourceloc "../testcases/printtest/exec.c", 196, 21} true;
  $i27 := $ne.ref($0.ref, $p21);
  assume {:sourceloc "../testcases/printtest/exec.c", 196, 2} true;
  assume {:branchcond $i27} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i27 == 1);
  assume {:sourceloc "../testcases/printtest/exec.c", 196, 2} true;
  $p28 := $p20;
  goto $bb4;
$bb2:
  assume {:sourceloc "../testcases/printtest/exec.c", 196, 2} true;
  assume !(($i27 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "../testcases/printtest/exec.c", 206, 2} true;
  $r := 0;
  return;
$bb4:
  assume {:sourceloc "../testcases/printtest/exec.c", 199, 16} true;
  $p29 := $add.ref($add.ref($p28, $mul.ref(0, 32)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/printtest/exec.c", 199, 16} true;
  $p30 := $load.ref($M.0, $p29);
  assume {:sourceloc "../testcases/printtest/exec.c", 200, 11} true;
  $p31 := $add.ref($add.ref($p28, $mul.ref(0, 32)), $mul.ref(24, 1));
  assume {:sourceloc "../testcases/printtest/exec.c", 200, 22} true;
  $p32 := $add.ref($add.ref($p28, $mul.ref(0, 32)), $mul.ref(16, 1));
  assume {:sourceloc "../testcases/printtest/exec.c", 200, 22} true;
  $p33 := $load.ref($M.2, $p32);
  assume {:sourceloc "../testcases/printtest/exec.c", 200, 16} true;
  $i34 := $ne.ref($p31, $p33);
  assume {:sourceloc "../testcases/printtest/exec.c", 200, 7} true;
  assume {:branchcond $i34} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i34 == 1);
  assume {:sourceloc "../testcases/printtest/exec.c", 202, 12} true;
  $p35 := $add.ref($add.ref($p28, $mul.ref(0, 32)), $mul.ref(16, 1));
  assume {:sourceloc "../testcases/printtest/exec.c", 202, 12} true;
  $p36 := $load.ref($M.2, $p35);
  assume {:sourceloc "../testcases/printtest/exec.c", 202, 9} true;
  $p37 := $bitcast.ref.ref($p36);
  assume {:sourceloc "../testcases/printtest/exec.c", 202, 4} true;
  call free_($p37);
  assume {:sourceloc "../testcases/printtest/exec.c", 203, 3} true;
  goto $bb7;
$bb6:
  assume {:sourceloc "../testcases/printtest/exec.c", 200, 7} true;
  assume !(($i34 == 1));
  goto $bb7;
$bb7:
  assume {:sourceloc "../testcases/printtest/exec.c", 204, 8} true;
  $p38 := $bitcast.ref.ref($p28);
  assume {:sourceloc "../testcases/printtest/exec.c", 204, 3} true;
  call free_($p38);
  assume {:sourceloc "../testcases/printtest/exec.c", 196, 21} true;
  $i39 := $ne.ref($0.ref, $p30);
  assume {:sourceloc "../testcases/printtest/exec.c", 196, 2} true;
  assume {:branchcond $i39} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i39 == 1);
  $p28 := $p30;
  goto $bb4;
$bb9:
  assume !(($i39 == 1));
  assume {:sourceloc "../testcases/printtest/exec.c", 196, 2} true;
  goto $bb3;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 2064));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const malloc: ref;
axiom (malloc == $sub.ref(0, 3096));
procedure  malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $malloc($i0);
}
const free_: ref;
axiom (free_ == $sub.ref(0, 4128));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 5160));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 6192));
procedure  __SMACK_static_init()
{
$bb0:
  return;
}
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
