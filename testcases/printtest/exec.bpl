// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/smack ../testcases/printtest/exec.c -ll ../testcases/printtest/exec_IR.ll --bpl ../testcases/printtest/exec.bpl -t --sh-mem-leak

const main: ref;
axiom (main == $sub.ref(0, 1032));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref32;
  var $p2: ref8;
  var $p3: ref8;
  var $i4: i8;
  var $i5: i32;
$bb0:
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  call $p0 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.0 := $store.i32($M.0, $p1, 0);
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(4, 1));
  $M.1 := $store.i8($M.1, $p2, 100);
  $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(4, 1));
  $i4 := $load.i8($M.1, $p3);
  $i5 := $sext.i8.i32($i4);
  call {:cexpr "a"} boogie_si_record_i32($i5);
  $r := 0;
  return;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 2064));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 3096));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 4128));
procedure  __SMACK_static_init()
{
$bb0:
  return;
}
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
