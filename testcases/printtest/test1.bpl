// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/smack ../testcases/printtest/test1.c -ll ../testcases/printtest/test1_IR.ll --bpl ../testcases/printtest/test1.bpl -t

const main: ref;
axiom (main == $sub.ref(0, 1032));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
$bb0:
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  call $p0 := malloc(4);
  $p1 := $bitcast.ref.ref($p0);
  $i2 := $load.i32($M.0, $p1);
  call {:cexpr "p"} boogie_si_record_i32($i2);
  $p3 := $add.ref($p1, $mul.ref(1, 4));
  $i4 := $add.i32(3, 1);
  call {:cexpr "a"} boogie_si_record_i32($i4);
  $i5 := $add.i32($i4, 1);
  call {:cexpr "a"} boogie_si_record_i32($i5);
  $r := 0;
  return;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 2064));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const malloc: ref;
axiom (malloc == $sub.ref(0, 3096));
procedure  malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $malloc($i0);
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 4128));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 5160));
procedure  __SMACK_static_init()
{
$bb0:
  return;
}
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
