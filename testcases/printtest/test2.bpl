// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/smack ../testcases/printtest/test2.c -ll ../testcases/printtest/test2_IR.ll --bpl ../testcases/printtest/test2.bpl -t

const fun_call: ref;
axiom (fun_call == $sub.ref(0, 1032));
procedure  fun_call()
{
$bb0:
  return;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 2064));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const test_function_call: ref;
axiom (test_function_call == $sub.ref(0, 3096));
procedure  test_function_call()
{
  var $i0: i1;
$bb0:
  $i0 := $slt.i32(3, 3);
  assume {:branchcond $i0} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i0 == 1);
  call fun_call();
  goto $bb3;
$bb2:
  assume !(($i0 == 1));
  goto $bb3;
$bb3:
  return;
}
const main: ref;
axiom (main == $sub.ref(0, 4128));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i1;
  var $p3: ref;
  var $i4: i1;
  var $i5: i32;
$bb0:
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  call $p0 := malloc(4);
  $p1 := $bitcast.ref.ref($p0);
  $i2 := $eq.ref($p1, $0.ref);
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  $p3 := $bitcast.ref.ref($p1);
  call free_($p3);
  $i4 := $ne.ref($p1, $0.ref);
  assume {:branchcond $i4} true;
  goto $bb4, $bb5;
$bb2:
  assume !(($i2 == 1));
  goto $bb3;
$bb3:
  call test_function_call();
  $i5 := 0;
  goto $bb6;
$bb4:
  assume ($i4 == 1);
  $i5 := 1;
  goto $bb6;
$bb5:
  assume !(($i4 == 1));
  goto $bb3;
$bb6:
  $r := $i5;
  return;
}
const malloc: ref;
axiom (malloc == $sub.ref(0, 5160));
procedure  malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $malloc($i0);
}
const free_: ref;
axiom (free_ == $sub.ref(0, 6192));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 7224));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 8256));
procedure  __SMACK_static_init()
{
$bb0:
  return;
}
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
