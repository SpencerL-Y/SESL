// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/smack ../testcases/printtest/test_with_function.c -ll ../testcases/printtest/test_with_function_IR.ll --bpl ../testcases/printtest/test_with_function.bpl -t --sh-mem-leak

const foo: ref;
axiom (foo == $sub.ref(0, 1032));
procedure  foo($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref8;
  var $i7: i32;
  var $i8: i1;
$bb0:
  call {:cexpr "foo:arg:n"} boogie_si_record_i32($i2);
  $i3 := $slt.i32(0, $i2);
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  $i4 := 0;
  goto $bb4;
$bb2:
  assume !(($i3 == 1));
  goto $bb3;
$bb3:
  goto $bb8;
$bb4:
  $i5 := $sext.i32.i64($i4);
  $p6 := $add.ref($p0, $mul.ref($i5, 1));
  $M.0 := $store.i8($M.0, $p6, $sub.i8(0, 1));
  goto $bb5;
$bb5:
  $i7 := $add.i32($i4, 1);
  call {:cexpr "i"} boogie_si_record_i32($i7);
  $i8 := $slt.i32($i7, $i2);
  assume {:branchcond $i8} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i8 == 1);
  $i4 := $i7;
  goto $bb4;
$bb7:
  assume !(($i8 == 1));
  goto $bb3;
$bb8:
  $M.1 := $store.i8($M.1, $p1, $sub.i8(0, 1));
  goto $bb9;
$bb9:
  return;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 2064));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const test_1: ref;
axiom (test_1 == $sub.ref(0, 3096));
procedure  test_1()
{
  var $i0: i64;
  var $i1: i64;
  var $p2: ref8;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref8;
  var $p6: ref8;
  var $p7: ref8;
  var $i8: i8;
  var $i9: i1;
$bb0:
  $i0 := $sext.i32.i64(2);
  $i1 := $mul.i64($i0, 1);
  call $p2 := malloc($i1);
  $i3 := $sext.i32.i64(2);
  $i4 := $mul.i64($i3, 1);
  call $p5 := malloc($i4);
  $p6 := $add.ref($p5, $mul.ref(1, 1));
  $M.2 := $store.i8($M.2, $p5, 0);
  call foo($p2, $p6, 2);
  $p7 := $add.ref($p6, $mul.ref($sub.ref(0, 1), 1));
  $i8 := $load.i8($M.2, $p7);
  $i9 := $ne.i8($i8, 0);
  assume {:branchcond $i9} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i9 == 1);
  call free_($p2);
  call free_($p6);
  goto $bb3;
$bb2:
  assume !(($i9 == 1));
  call free_($p2);
  call free_($p6);
  goto $bb3;
$bb3:
  return;
}
const malloc: ref;
axiom (malloc == $sub.ref(0, 4128));
procedure  malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $malloc($i0);
}
const free_: ref;
axiom (free_ == $sub.ref(0, 5160));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const main: ref;
axiom (main == $sub.ref(0, 6192));
procedure {:entrypoint} main()
  returns ($r: i32)
{
$bb0:
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  call test_1();
  $r := 0;
  return;
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 7224));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 8256));
procedure  __SMACK_static_init()
{
$bb0:
  return;
}
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
