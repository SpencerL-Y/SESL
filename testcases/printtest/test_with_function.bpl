// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/smack ../testcases/printtest/test_with_function.c -ll ../testcases/printtest/test_with_function_IR.ll --bpl ../testcases/printtest/test_with_function.bpl -t --sh-mem-leak

const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 1032));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const recursive: ref;
axiom (recursive == $sub.ref(0, 2064));
procedure  recursive($i0: i32)
  returns ($r: i32)
{
  var $i1: i1;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i2: i32;
$bb0:
  call {:cexpr "recursive:arg:n"} boogie_si_record_i32($i0);
  $i1 := $eq.i32($i0, 1);
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  $i2 := 1;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  $i3 := $sub.i32($i0, 1);
  call $i4 := recursive($i3);
  $i5 := $add.i32($i4, 1);
  $i2 := $i5;
  goto $bb3;
$bb3:
  $r := $i2;
  return;
}
const test_2: ref;
axiom (test_2 == $sub.ref(0, 3096));
procedure  test_2()
{
  var $i0: i32;
$bb0:
  call $i0 := recursive(2);
  call {:cexpr "t"} boogie_si_record_i32($i0);
  return;
}
const main: ref;
axiom (main == $sub.ref(0, 4128));
procedure {:entrypoint} main()
  returns ($r: i32)
{
$bb0:
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  call test_2();
  $r := 0;
  return;
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 5160));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 6192));
procedure  __SMACK_static_init()
{
$bb0:
  return;
}
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
