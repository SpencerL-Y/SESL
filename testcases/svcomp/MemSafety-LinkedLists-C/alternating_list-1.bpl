// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/smack ../svcomp/MemSafety-LinkedLists-C//alternating_list-1.c -ll ../svcomp/MemSafety-LinkedLists-C//alternating_list-1_IR.ll --bpl ../svcomp/MemSafety-LinkedLists-C//alternating_list-1.bpl -t --sh-mem-leak

const reach_error: ref;
axiom (reach_error == $sub.ref(0, 1032));
procedure  reach_error()
{
$bb0:
  return;
}
const myexit: ref;
axiom (myexit == $sub.ref(0, 2064));
procedure  myexit($i0: i32)
{
$bb0:
  call {:cexpr "myexit:arg:s"} boogie_si_record_i32($i0);
  goto $bb1;
$bb1:
  assume true;
  goto $bb1;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 3096));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const llvm.dbg.label: ref;
axiom (llvm.dbg.label == $sub.ref(0, 4128));
procedure  llvm.dbg.label($p0: ref);
const main: ref;
axiom (main == $sub.ref(0, 5160));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $p0: ref8;
  var $p1: ref;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref32;
  var $p12: ref32;
  var $p10: ref;
  var $i11: i32;
  var $p13: ref8;
  var $p14: ref;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p5: ref;
  var $p22: ref32;
  var $p23: ref32;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref32;
  var $i30: i32;
  var $i31: i1;
  var $p34: ref32;
  var $i35: i32;
  var $i36: i1;
  var $p32: ref;
  var $i33: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref32;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref32;
  var $i43: i32;
  var $i44: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref8;
  var $p50: ref32;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p45: ref;
  var $p54: ref8;
$bb0:
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  call $p0 := malloc(16);
  $p1 := $bitcast.ref.ref($p0);
  $i2 := $eq.ref($p1, $0.ref);
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  call myexit(1);
  goto $bb3;
$bb2:
  assume !(($i2 == 1));
  goto $bb3;
$bb3:
  call $i3 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
  $i4 := $ne.i32($i3, 0);
  $p5 := $p0;
  assume {:branchcond $i4} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i4 == 1);
  $p6, $i7 := $p0, 1;
  goto $bb7;
$bb5:
  assume !(($i4 == 1));
  goto $bb6;
$bb6:
  $p22 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.0 := $store.i32($M.0, $p22, 3);
  $p23 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
  $i24 := $load.i32($M.0, $p23);
  $i25 := $ne.i32($i24, 3);
  assume {:branchcond $i25} true;
  goto $bb16, $bb17;
$bb7:
  $i8 := $ne.i32($i7, 0);
  assume {:branchcond $i8} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i8 == 1);
  $p9 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.0 := $store.i32($M.0, $p9, 1);
  $p10, $i11 := $p6, 0;
  goto $bb10;
$bb9:
  assume !(($i8 == 1));
  $p12 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.0 := $store.i32($M.0, $p12, 2);
  $p10, $i11 := $p6, 1;
  goto $bb10;
$bb10:
  call $p13 := malloc(16);
  $p14 := $bitcast.ref.ref($p13);
  $i15 := $eq.ref($p14, $0.ref);
  assume {:branchcond $i15} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i15 == 1);
  call myexit(1);
  goto $bb13;
$bb12:
  assume !(($i15 == 1));
  goto $bb13;
$bb13:
  $p16 := $add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.1 := $store.ref($M.1, $p16, $p13);
  $p17 := $add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p18 := $load.ref($M.1, $p17);
  call $i19 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i19);
  $i20 := $ne.i32($i19, 0);
  $p21 := $p18;
  assume {:branchcond $i20} true;
  goto $bb14, $bb15;
$bb14:
  assume ($i20 == 1);
  $p6, $i7 := $p18, $i11;
  goto $bb7;
$bb15:
  assume !(($i20 == 1));
  $p5 := $p21;
  goto $bb6;
$bb16:
  assume ($i25 == 1);
  $p26, $i27 := $p0, 1;
  goto $bb19;
$bb17:
  assume !(($i25 == 1));
  goto $bb18;
$bb18:
  $p42 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
  $i43 := $load.i32($M.0, $p42);
  $i44 := $ne.i32($i43, 3);
  $p45 := $p0;
  assume {:branchcond $i44} true;
  goto $bb30, $bb31;
$bb19:
  $i28 := $ne.i32($i27, 0);
  assume {:branchcond $i28} true;
  goto $bb20, $bb21;
$bb20:
  assume ($i28 == 1);
  $p29 := $add.ref($add.ref($p26, $mul.ref(0, 16)), $mul.ref(0, 1));
  $i30 := $load.i32($M.0, $p29);
  $i31 := $ne.i32($i30, 1);
  assume {:branchcond $i31} true;
  goto $bb22, $bb23;
$bb21:
  assume !(($i28 == 1));
  $p34 := $add.ref($add.ref($p26, $mul.ref(0, 16)), $mul.ref(0, 1));
  $i35 := $load.i32($M.0, $p34);
  $i36 := $ne.i32($i35, 2);
  assume {:branchcond $i36} true;
  goto $bb26, $bb27;
$bb22:
  assume ($i31 == 1);
  goto $bb24;
$bb23:
  assume !(($i31 == 1));
  $p32, $i33 := $p26, 0;
  goto $bb25;
$bb24:
  assume true;
  call reach_error();
  call abort();
  assume false;
$bb25:
  $p37 := $add.ref($add.ref($p32, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p38 := $load.ref($M.1, $p37);
  $p39 := $add.ref($add.ref($p38, $mul.ref(0, 16)), $mul.ref(0, 1));
  $i40 := $load.i32($M.0, $p39);
  $i41 := $ne.i32($i40, 3);
  assume {:branchcond $i41} true;
  goto $bb28, $bb29;
$bb26:
  assume ($i36 == 1);
  goto $bb24;
$bb27:
  assume !(($i36 == 1));
  $p32, $i33 := $p26, 1;
  goto $bb25;
$bb28:
  assume ($i41 == 1);
  $p26, $i27 := $p38, $i33;
  goto $bb19;
$bb29:
  assume !(($i41 == 1));
  goto $bb18;
$bb30:
  assume ($i44 == 1);
  $p46 := $p0;
  goto $bb33;
$bb31:
  assume !(($i44 == 1));
  goto $bb32;
$bb32:
  $p54 := $bitcast.ref.ref($p45);
  call free_($p54);
  $r := 0;
  return;
$bb33:
  $p47 := $add.ref($add.ref($p46, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p48 := $load.ref($M.1, $p47);
  $p49 := $bitcast.ref.ref($p46);
  call free_($p49);
  $p50 := $add.ref($add.ref($p48, $mul.ref(0, 16)), $mul.ref(0, 1));
  $i51 := $load.i32($M.0, $p50);
  $i52 := $ne.i32($i51, 3);
  $p53 := $p48;
  assume {:branchcond $i52} true;
  goto $bb34, $bb35;
$bb34:
  assume ($i52 == 1);
  $p46 := $p48;
  goto $bb33;
$bb35:
  assume !(($i52 == 1));
  $p45 := $p53;
  goto $bb32;
}
const malloc: ref;
axiom (malloc == $sub.ref(0, 6192));
procedure  malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $malloc($i0);
}
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0, 7224));
procedure  __VERIFIER_nondet_int()
  returns ($r: i32);
const free_: ref;
axiom (free_ == $sub.ref(0, 8256));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const abort: ref;
axiom (abort == $sub.ref(0, 9288));
procedure  abort();
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 10320));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 11352));
procedure  __SMACK_static_init()
{
$bb0:
  return;
}
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
