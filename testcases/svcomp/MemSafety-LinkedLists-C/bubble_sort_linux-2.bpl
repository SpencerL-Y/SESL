// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/smack ../svcomp/MemSafety-LinkedLists-C//bubble_sort_linux-2.c -ll ../svcomp/MemSafety-LinkedLists-C//bubble_sort_linux-2_IR.ll --bpl ../svcomp/MemSafety-LinkedLists-C//bubble_sort_linux-2.bpl -t --sh-mem-leak

const {:global_variable} {:pointer_to_size 128} gl_list: ref;
axiom (gl_list == $sub.ref(0, 1040));
const reach_error: ref;
axiom (reach_error == $sub.ref(0, 2072));
procedure  reach_error()
{
$bb0:
  return;
}
const main: ref;
axiom (main == $sub.ref(0, 3104));
procedure {:entrypoint} main()
  returns ($r: i32)
{
$bb0:
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  call gl_read();
  call inspect(gl_list);
  call gl_sort();
  call inspect(gl_list);
  call gl_destroy();
  $r := 0;
  return;
}
const gl_read: ref;
axiom (gl_read == $sub.ref(0, 4136));
procedure  gl_read()
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i1;
$bb0:
  goto $bb1;
$bb1:
  call $i0 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
  call gl_insert($i0);
  goto $bb2;
$bb2:
  call $i1 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
  $i2 := $ne.i32($i1, 0);
  assume {:branchcond $i2} true;
  goto $bb3, $bb4;
$bb3:
  assume ($i2 == 1);
  goto $bb1;
$bb4:
  assume !(($i2 == 1));
  return;
}
const inspect: ref;
axiom (inspect == $sub.ref(0, 5168));
procedure  inspect($p0: ref)
{
  var $i1: i1;
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i1;
  var $p17: ref8;
  var $p18: ref8;
  var $p19: ref;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i1;
  var $p41: ref;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i1;
  var $p46: ref32;
  var $p47: ref;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i1;
  var $p70: ref;
  var $p65: ref;
  var $p71: ref8;
  var $p72: ref8;
  var $p73: ref;
  var $i74: i1;
$bb0:
  goto $bb1;
$bb1:
  $i1 := $ne.ref($p0, $0.ref);
  assume {:branchcond $i1} true;
  goto $bb2, $bb4;
$bb2:
  assume ($i1 == 1);
  goto $bb3;
$bb3:
  goto $bb5;
$bb4:
  assume !(($i1 == 1));
  call fail();
  goto $bb3;
$bb5:
  goto $bb6;
$bb6:
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p3 := $load.ref($M.0, $p2);
  $i4 := $ne.ref($p3, $p0);
  assume {:branchcond $i4} true;
  goto $bb7, $bb9;
$bb7:
  assume ($i4 == 1);
  goto $bb8;
$bb8:
  goto $bb10;
$bb9:
  assume !(($i4 == 1));
  call fail();
  goto $bb8;
$bb10:
  goto $bb11;
$bb11:
  $p5 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p6 := $load.ref($M.0, $p5);
  $i7 := $ne.ref($p6, $p0);
  assume {:branchcond $i7} true;
  goto $bb12, $bb14;
$bb12:
  assume ($i7 == 1);
  goto $bb13;
$bb13:
  goto $bb15;
$bb14:
  assume !(($i7 == 1));
  call fail();
  goto $bb13;
$bb15:
  $p8 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p9 := $load.ref($M.0, $p8);
  goto $bb16;
$bb16:
  $i10 := $ne.ref($p9, $0.ref);
  assume {:branchcond $i10} true;
  goto $bb17, $bb19;
$bb17:
  assume ($i10 == 1);
  goto $bb18;
$bb18:
  goto $bb20;
$bb19:
  assume !(($i10 == 1));
  call fail();
  goto $bb18;
$bb20:
  goto $bb21;
$bb21:
  $p11 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p12 := $load.ref($M.0, $p11);
  $i13 := $ne.ref($p12, $p9);
  assume {:branchcond $i13} true;
  goto $bb22, $bb24;
$bb22:
  assume ($i13 == 1);
  goto $bb23;
$bb23:
  goto $bb25;
$bb24:
  assume !(($i13 == 1));
  call fail();
  goto $bb23;
$bb25:
  goto $bb26;
$bb26:
  $p14 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p15 := $load.ref($M.0, $p14);
  $i16 := $ne.ref($p15, $p9);
  assume {:branchcond $i16} true;
  goto $bb27, $bb29;
$bb27:
  assume ($i16 == 1);
  goto $bb28;
$bb28:
  goto $bb30;
$bb29:
  assume !(($i16 == 1));
  call fail();
  goto $bb28;
$bb30:
  $p17 := $bitcast.ref.ref($p9);
  $p18 := $add.ref($p17, $mul.ref($sub.i64(0, $p2i.ref.i64($add.ref($add.ref($0.ref, $mul.ref(0, 40)), $mul.ref(8, 1)))), 1));
  $p19 := $bitcast.ref.ref($p18);
  goto $bb31;
$bb31:
  $i20 := $ne.ref($p19, $0.ref);
  assume {:branchcond $i20} true;
  goto $bb32, $bb34;
$bb32:
  assume ($i20 == 1);
  goto $bb33;
$bb33:
  goto $bb35;
$bb34:
  assume !(($i20 == 1));
  call fail();
  goto $bb33;
$bb35:
  goto $bb36;
$bb36:
  $p21 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(24, 1));
  $p22 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
  $p23 := $load.ref($M.0, $p22);
  $p24 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(24, 1));
  $i25 := $eq.ref($p23, $p24);
  assume {:branchcond $i25} true;
  goto $bb37, $bb39;
$bb37:
  assume ($i25 == 1);
  goto $bb38;
$bb38:
  goto $bb40;
$bb39:
  assume !(($i25 == 1));
  call fail();
  goto $bb38;
$bb40:
  goto $bb41;
$bb41:
  $p26 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(24, 1));
  $p27 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
  $p28 := $load.ref($M.0, $p27);
  $p29 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(24, 1));
  $i30 := $eq.ref($p28, $p29);
  assume {:branchcond $i30} true;
  goto $bb42, $bb44;
$bb42:
  assume ($i30 == 1);
  goto $bb43;
$bb43:
  goto $bb45;
$bb44:
  assume !(($i30 == 1));
  call fail();
  goto $bb43;
$bb45:
  goto $bb46;
$bb46:
  $p31 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(24, 1));
  $p32 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
  $p33 := $load.ref($M.0, $p32);
  $p34 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(8, 1));
  $i35 := $ne.ref($p33, $p34);
  assume {:branchcond $i35} true;
  goto $bb47, $bb49;
$bb47:
  assume ($i35 == 1);
  goto $bb48;
$bb48:
  goto $bb50;
$bb49:
  assume !(($i35 == 1));
  call fail();
  goto $bb48;
$bb50:
  goto $bb51;
$bb51:
  $p36 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(24, 1));
  $p37 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
  $p38 := $load.ref($M.0, $p37);
  $p39 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(8, 1));
  $i40 := $ne.ref($p38, $p39);
  assume {:branchcond $i40} true;
  goto $bb52, $bb54;
$bb52:
  assume ($i40 == 1);
  goto $bb53;
$bb53:
  goto $bb55;
$bb54:
  assume !(($i40 == 1));
  call fail();
  goto $bb53;
$bb55:
  goto $bb56;
$bb56:
  $p41 := $bitcast.ref.ref($p9);
  $i42 := $ne.ref($p19, $p41);
  assume {:branchcond $i42} true;
  goto $bb57, $bb59;
$bb57:
  assume ($i42 == 1);
  goto $bb58;
$bb58:
  goto $bb60;
$bb59:
  assume !(($i42 == 1));
  call fail();
  goto $bb58;
$bb60:
  goto $bb61;
$bb61:
  $p43 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(8, 1));
  $p44 := $bitcast.ref.ref($p43);
  $i45 := $ne.ref($p19, $p44);
  assume {:branchcond $i45} true;
  goto $bb62, $bb64;
$bb62:
  assume ($i45 == 1);
  goto $bb63;
$bb63:
  goto $bb65;
$bb64:
  assume !(($i45 == 1));
  call fail();
  goto $bb63;
$bb65:
  goto $bb66;
$bb66:
  $p46 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(0, 1));
  $p47 := $bitcast.ref.ref($p46);
  $i48 := $eq.ref($p19, $p47);
  assume {:branchcond $i48} true;
  goto $bb67, $bb69;
$bb67:
  assume ($i48 == 1);
  goto $bb68;
$bb68:
  goto $bb70;
$bb69:
  assume !(($i48 == 1));
  call fail();
  goto $bb68;
$bb70:
  goto $bb71;
$bb71:
  $p49 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(8, 1));
  $p50 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(0, 1));
  $p51 := $load.ref($M.0, $p50);
  $p52 := $add.ref($add.ref($p51, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p53 := $load.ref($M.0, $p52);
  $i54 := $eq.ref($p9, $p53);
  assume {:branchcond $i54} true;
  goto $bb72, $bb74;
$bb72:
  assume ($i54 == 1);
  goto $bb73;
$bb73:
  goto $bb75;
$bb74:
  assume !(($i54 == 1));
  call fail();
  goto $bb73;
$bb75:
  goto $bb76;
$bb76:
  $p55 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(8, 1));
  $p56 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(8, 1));
  $p57 := $load.ref($M.0, $p56);
  $p58 := $add.ref($add.ref($p57, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p59 := $load.ref($M.0, $p58);
  $i60 := $eq.ref($p9, $p59);
  assume {:branchcond $i60} true;
  goto $bb77, $bb79;
$bb77:
  assume ($i60 == 1);
  goto $bb78;
$bb78:
  goto $bb80;
$bb79:
  assume !(($i60 == 1));
  call fail();
  goto $bb78;
$bb80:
  $p61 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p62 := $load.ref($M.0, $p61);
  $p63 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(8, 1));
  $i64 := $ne.ref($p63, $p62);
  $p65 := $p62;
  assume {:branchcond $i64} true;
  goto $bb81, $bb82;
$bb81:
  assume ($i64 == 1);
  $p66 := $p62;
  goto $bb84;
$bb82:
  assume !(($i64 == 1));
  goto $bb83;
$bb83:
  goto $bb88;
$bb84:
  goto $bb85;
$bb85:
  $p67 := $add.ref($add.ref($p66, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p68 := $load.ref($M.0, $p67);
  $i69 := $ne.ref($p63, $p68);
  $p70 := $p68;
  assume {:branchcond $i69} true;
  goto $bb86, $bb87;
$bb86:
  assume ($i69 == 1);
  $p66 := $p68;
  goto $bb84;
$bb87:
  assume !(($i69 == 1));
  $p65 := $p70;
  goto $bb83;
$bb88:
  $p71 := $bitcast.ref.ref($p65);
  $p72 := $add.ref($p71, $mul.ref($sub.i64(0, $p2i.ref.i64($add.ref($add.ref($0.ref, $mul.ref(0, 40)), $mul.ref(8, 1)))), 1));
  $p73 := $bitcast.ref.ref($p72);
  $i74 := $eq.ref($p73, $p19);
  assume {:branchcond $i74} true;
  goto $bb89, $bb91;
$bb89:
  assume ($i74 == 1);
  goto $bb90;
$bb90:
  goto $bb92;
$bb91:
  assume !(($i74 == 1));
  call fail();
  goto $bb90;
$bb92:
  return;
}
const gl_sort: ref;
axiom (gl_sort == $sub.ref(0, 6200));
procedure  gl_sort()
{
  var $i0: i1;
$bb0:
  goto $bb1;
$bb1:
  call $i0 := gl_sort_pass();
  assume {:branchcond $i0} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i0 == 1);
  goto $bb1;
$bb3:
  assume !(($i0 == 1));
  return;
}
const gl_destroy: ref;
axiom (gl_destroy == $sub.ref(0, 7232));
procedure  gl_destroy()
{
  var $p0: ref;
  var $i1: i1;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref8;
  var $p6: ref8;
  var $p7: ref;
  var $p8: ref8;
  var $p9: ref;
  var $i10: i1;
$bb0:
  $p0 := $load.ref($M.0, gl_list);
  $i1 := $ne.ref(gl_list, $p0);
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  $p2 := $p0;
  goto $bb4;
$bb2:
  assume !(($i1 == 1));
  goto $bb3;
$bb3:
  return;
$bb4:
  $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p4 := $load.ref($M.0, $p3);
  $M.0 := $store.ref($M.0, gl_list, $p4);
  $p5 := $bitcast.ref.ref($p2);
  $p6 := $add.ref($p5, $mul.ref($sub.i64(0, $p2i.ref.i64($add.ref($add.ref($0.ref, $mul.ref(0, 40)), $mul.ref(8, 1)))), 1));
  $p7 := $bitcast.ref.ref($p6);
  $p8 := $bitcast.ref.ref($p7);
  call free_($p8);
  $p9 := $load.ref($M.0, gl_list);
  $i10 := $ne.ref(gl_list, $p9);
  assume {:branchcond $i10} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i10 == 1);
  $p2 := $p9;
  goto $bb4;
$bb6:
  assume !(($i10 == 1));
  goto $bb3;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 8264));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const free_: ref;
axiom (free_ == $sub.ref(0, 9296));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const gl_sort_pass: ref;
axiom (gl_sort_pass == $sub.ref(0, 10328));
procedure  gl_sort_pass()
  returns ($r: i1)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i8;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i1;
  var $p20: ref;
  var $i21: i1;
  var $i19: i8;
  var $i4: i8;
  var $i22: i8;
  var $i23: i8;
  var $i24: i1;
$bb0:
  $p0 := $load.ref($M.0, gl_list);
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p2 := $load.ref($M.0, $p1);
  $i3 := $ne.ref(gl_list, $p2);
  $i4 := 0;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  $p5, $p6, $i7, $p8 := $p2, $p0, 0, $p0;
  goto $bb4;
$bb2:
  assume !(($i3 == 1));
  goto $bb3;
$bb3:
  $i23 := $i4;
  goto $bb12;
$bb4:
  $p9, $i10 := $p5, $i7;
  goto $bb5;
$bb5:
  call $i11 := val_from_node($p8);
  call {:cexpr "val0"} boogie_si_record_i32($i11);
  call $i12 := val_from_node($p9);
  call {:cexpr "val1"} boogie_si_record_i32($i12);
  $i13 := $sle.i32($i11, $i12);
  $i14, $p15 := $i10, $p9;
  assume {:branchcond $i13} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i13 == 1);
  $p16 := $add.ref($add.ref($p15, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p17 := $load.ref($M.0, $p16);
  $i18 := $ne.ref(gl_list, $p17);
  $i19 := $i14;
  assume {:branchcond $i18} true;
  goto $bb8, $bb9;
$bb7:
  assume !(($i13 == 1));
  call list_move($p8, $p9);
  $p20 := $load.ref($M.0, $p6);
  $i21 := $ne.ref(gl_list, $p20);
  $i22 := 1;
  assume {:branchcond $i21} true;
  goto $bb10, $bb11;
$bb8:
  assume ($i18 == 1);
  $p5, $p6, $i7, $p8 := $p17, $p15, $i14, $p15;
  goto $bb4;
$bb9:
  assume !(($i18 == 1));
  $i4 := $i19;
  goto $bb3;
$bb10:
  assume ($i21 == 1);
  $p9, $i10 := $p20, 1;
  goto $bb5;
$bb11:
  assume !(($i21 == 1));
  $i23 := $i22;
  goto $bb12;
$bb12:
  $i24 := $trunc.i8.i1($i23);
  $r := $i24;
  return;
}
const val_from_node: ref;
axiom (val_from_node == $sub.ref(0, 11360));
procedure  val_from_node($p0: ref)
  returns ($r: i32)
{
  var $p1: ref8;
  var $p2: ref8;
  var $p3: ref;
  var $p4: ref32;
  var $i5: i32;
$bb0:
  $p1 := $bitcast.ref.ref($p0);
  $p2 := $add.ref($p1, $mul.ref($sub.i64(0, $p2i.ref.i64($add.ref($add.ref($0.ref, $mul.ref(0, 40)), $mul.ref(8, 1)))), 1));
  $p3 := $bitcast.ref.ref($p2);
  $p4 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
  $i5 := $load.i32($M.0, $p4);
  $r := $i5;
  return;
}
const list_move: ref;
axiom (list_move == $sub.ref(0, 12392));
procedure  list_move($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
$bb0:
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p3 := $load.ref($M.0, $p2);
  $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p5 := $load.ref($M.0, $p4);
  call __list_del($p3, $p5);
  call list_add($p0, $p1);
  return;
}
const __list_del: ref;
axiom (__list_del == $sub.ref(0, 13424));
procedure  __list_del($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
$bb0:
  $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.0 := $store.ref($M.0, $p2, $p0);
  $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p3, $p1);
  return;
}
const list_add: ref;
axiom (list_add == $sub.ref(0, 14456));
procedure  list_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
$bb0:
  $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p3 := $load.ref($M.0, $p2);
  call __list_add($p0, $p1, $p3);
  return;
}
const __list_add: ref;
axiom (__list_add == $sub.ref(0, 15488));
procedure  __list_add($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
$bb0:
  $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.0 := $store.ref($M.0, $p3, $p0);
  $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p4, $p2);
  $p5 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.0 := $store.ref($M.0, $p5, $p1);
  $p6 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p6, $p0);
  return;
}
const fail: ref;
axiom (fail == $sub.ref(0, 16520));
procedure  fail()
{
$bb0:
  goto $bb1;
$bb1:
  assume true;
  call reach_error();
  call abort();
  assume false;
}
const llvm.dbg.label: ref;
axiom (llvm.dbg.label == $sub.ref(0, 17552));
procedure  llvm.dbg.label($p0: ref);
const abort: ref;
axiom (abort == $sub.ref(0, 18584));
procedure  abort();
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0, 19616));
procedure  __VERIFIER_nondet_int()
  returns ($r: i32);
const gl_insert: ref;
axiom (gl_insert == $sub.ref(0, 20648));
procedure  gl_insert($i0: i32)
{
  var $p1: ref8;
  var $p2: ref;
  var $i3: i1;
  var $p4: ref32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
$bb0:
  call {:cexpr "gl_insert:arg:value"} boogie_si_record_i32($i0);
  call $p1 := malloc(40);
  $p2 := $bitcast.ref.ref($p1);
  $i3 := $ne.ref($p2, $0.ref);
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  $p4 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
  $M.0 := $store.i32($M.0, $p4, $i0);
  $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
  call list_add($p5, gl_list);
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  call abort();
  assume false;
$bb3:
  $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
  $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
  $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p8, $p6);
  $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
  $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
  $p11 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p11, $p9);
  goto $bb4;
$bb4:
  return;
}
const malloc: ref;
axiom (malloc == $sub.ref(0, 21680));
procedure  malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $malloc($i0);
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 22712));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 23744));
procedure  __SMACK_static_init()
{
$bb0:
  $M.0 := $store.ref($M.0, gl_list, gl_list);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(gl_list, $mul.ref(0, 16)), $mul.ref(8, 1)), gl_list);
  return;
}
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
