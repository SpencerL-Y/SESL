// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/smack ../svcomp/MemSafety-LinkedLists-C//dancing.c -ll ../svcomp/MemSafety-LinkedLists-C//dancing_IR.ll --bpl ../svcomp/MemSafety-LinkedLists-C//dancing.bpl -t --sh-mem-leak

const assume_abort_if_not: ref;
axiom (assume_abort_if_not == $sub.ref(0, 1032));
procedure  assume_abort_if_not($i0: i32)
{
  var $i1: i1;
$bb0:
  call {:cexpr "assume_abort_if_not:arg:cond"} boogie_si_record_i32($i0);
  $i1 := $ne.i32($i0, 0);
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  return;
$bb2:
  assume !(($i1 == 1));
  call abort();
  assume false;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 2064));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const abort: ref;
axiom (abort == $sub.ref(0, 3096));
procedure  abort();
const reach_error: ref;
axiom (reach_error == $sub.ref(0, 4128));
procedure  reach_error()
{
$bb0:
  return;
}
const __VERIFIER_assert: ref;
axiom (__VERIFIER_assert == $sub.ref(0, 5160));
procedure  __VERIFIER_assert($i0: i32)
{
  var $i1: i1;
$bb0:
  call {:cexpr "__VERIFIER_assert:arg:cond"} boogie_si_record_i32($i0);
  $i1 := $ne.i32($i0, 0);
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  return;
$bb2:
  assume !(($i1 == 1));
  goto $bb3;
$bb3:
  assume true;
  call reach_error();
  call abort();
  assume false;
}
const llvm.dbg.label: ref;
axiom (llvm.dbg.label == $sub.ref(0, 6192));
procedure  llvm.dbg.label($p0: ref);
const remove: ref;
axiom (remove == $sub.ref(0, 7224));
procedure  remove($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
$bb0:
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p2 := $load.ref($M.0, $p1);
  $i3 := $ne.ref($p2, $0.ref);
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p5 := $load.ref($M.1, $p4);
  $p6 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p7 := $load.ref($M.0, $p6);
  $p8 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.1 := $store.ref($M.1, $p8, $p5);
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  goto $bb3;
$bb3:
  $p9 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p10 := $load.ref($M.1, $p9);
  $i11 := $ne.ref($p10, $0.ref);
  assume {:branchcond $i11} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i11 == 1);
  $p12 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p13 := $load.ref($M.0, $p12);
  $p14 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p15 := $load.ref($M.1, $p14);
  $p16 := $add.ref($add.ref($p15, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.0 := $store.ref($M.0, $p16, $p13);
  goto $bb6;
$bb5:
  assume !(($i11 == 1));
  goto $bb6;
$bb6:
  return;
}
const re_insert: ref;
axiom (re_insert == $sub.ref(0, 8256));
procedure  re_insert($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
$bb0:
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p2 := $load.ref($M.0, $p1);
  $i3 := $ne.ref($p2, $0.ref);
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p5 := $load.ref($M.0, $p4);
  $p6 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.1 := $store.ref($M.1, $p6, $p0);
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  goto $bb3;
$bb3:
  $p7 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p8 := $load.ref($M.1, $p7);
  $i9 := $ne.ref($p8, $0.ref);
  assume {:branchcond $i9} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i9 == 1);
  $p10 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p11 := $load.ref($M.1, $p10);
  $p12 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.0 := $store.ref($M.0, $p12, $p0);
  goto $bb6;
$bb5:
  assume !(($i9 == 1));
  goto $bb6;
$bb6:
  return;
}
const is_list_containing_x: ref;
axiom (is_list_containing_x == $sub.ref(0, 9288));
procedure  is_list_containing_x($p0: ref, $p1: ref)
  returns ($r: i1)
{
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i3: i1;
$bb0:
  $i2 := $eq.ref($p0, $p1);
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  $i3 := 1;
  goto $bb3;
$bb2:
  assume !(($i2 == 1));
  $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p5 := $load.ref($M.0, $p4);
  $i6 := $ne.ref($p5, $0.ref);
  assume {:branchcond $i6} true;
  goto $bb4, $bb5;
$bb3:
  $r := $i3;
  return;
$bb4:
  assume ($i6 == 1);
  $p7 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p8 := $load.ref($M.0, $p7);
  call $i9 := is_list_containing_x($p8, $p1);
  $i3 := $i9;
  goto $bb3;
$bb5:
  assume !(($i6 == 1));
  $i3 := 0;
  goto $bb3;
}
const main: ref;
axiom (main == $sub.ref(0, 10320));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref8;
  var $p7: ref;
  var $i8: i1;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i1;
  var $p15: ref;
  var $i16: i1;
  var $p17: ref;
  var $p4: ref;
  var $p10: ref;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i23: i1;
  var $i24: i1;
  var $p21: ref;
  var $i22: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
$bb0:
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  call $p0 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.1 := $store.ref($M.1, $p1, $0.ref);
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.0 := $store.ref($M.0, $p2, $0.ref);
  call $i3 := __VERIFIER_nondet_bool();
  call {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
  $p4 := $p0;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  $p5 := $p0;
  goto $bb4;
$bb2:
  assume !(($i3 == 1));
  goto $bb3;
$bb3:
  $p10 := $p4;
  goto $bb7;
$bb4:
  call $p6 := malloc(16);
  $p7 := $bitcast.ref.ref($p6);
  $i8 := $eq.ref($p7, $0.ref);
  $p9 := $p5;
  assume {:branchcond $i8} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i8 == 1);
  $p10 := $p9;
  goto $bb7;
$bb6:
  assume !(($i8 == 1));
  $p11 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.1 := $store.ref($M.1, $p11, $p0);
  $p12 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.0 := $store.ref($M.0, $p12, $0.ref);
  $p13 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.0 := $store.ref($M.0, $p13, $p6);
  call $i14 := __VERIFIER_nondet_bool();
  call {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i14);
  $p15 := $p5;
  assume {:branchcond $i14} true;
  goto $bb8, $bb9;
$bb7:
  call $i18 := is_list_containing_x($p0, $p10);
  $i19 := $zext.i1.i32($i18);
  call assume_abort_if_not($i19);
  call remove($p10);
  $i20 := $eq.ref($p0, $p10);
  $p21, $i22 := $p10, 1;
  assume {:branchcond $i20} true;
  goto $bb13, $bb15;
$bb8:
  assume ($i14 == 1);
  $p15 := $p6;
  goto $bb10;
$bb9:
  assume !(($i14 == 1));
  goto $bb10;
$bb10:
  call $i16 := __VERIFIER_nondet_bool();
  call {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i16);
  $p17 := $p15;
  assume {:branchcond $i16} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i16 == 1);
  $p5 := $p15;
  goto $bb4;
$bb12:
  assume !(($i16 == 1));
  $p4 := $p17;
  goto $bb3;
$bb13:
  assume ($i20 == 1);
  goto $bb14;
$bb14:
  $i25 := $zext.i1.i32($i22);
  call __VERIFIER_assert($i25);
  call re_insert($p10);
  call $i26 := is_list_containing_x($p0, $p21);
  $i27 := $zext.i1.i32($i26);
  call __VERIFIER_assert($i27);
  $r := 0;
  return;
$bb15:
  assume !(($i20 == 1));
  call $i23 := is_list_containing_x($p0, $p10);
  $i24 := $xor.i1($i23, 1);
  $p21, $i22 := $p10, $i24;
  goto $bb14;
}
const __VERIFIER_nondet_bool: ref;
axiom (__VERIFIER_nondet_bool == $sub.ref(0, 11352));
procedure  __VERIFIER_nondet_bool()
  returns ($r: i1);
const malloc: ref;
axiom (malloc == $sub.ref(0, 12384));
procedure  malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $malloc($i0);
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 13416));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 14448));
procedure  __SMACK_static_init()
{
$bb0:
  return;
}
procedure  boogie_si_record_i1(x: i1);
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
