// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/smack ../svcomp/MemSafety-LinkedLists-C//dll-optional-2.c -ll ../svcomp/MemSafety-LinkedLists-C//dll-optional-2_IR.ll --bpl ../svcomp/MemSafety-LinkedLists-C//dll-optional-2.bpl -t --sh-mem-leak

const reach_error: ref;
axiom (reach_error == $sub.ref(0, 1032));
procedure  reach_error()
{
$bb0:
  return;
}
const main: ref;
axiom (main == $sub.ref(0, 2064));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $p0: ref8;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref32;
  var $p7: ref8;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref32;
  var $p16: ref;
  var $p17: ref32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref8;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref32;
  var $p34: ref8;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref32;
  var $p43: ref;
  var $p44: ref32;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref32;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $i58: i1;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref32;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref8;
  var $p69: ref8;
  var $i70: i1;
$bb0:
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  call $p0 := malloc(32);
  $p1 := $bitcast.ref.ref($p0);
  $p2 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p2, $0.ref);
  $p3 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
  $M.1 := $store.ref($M.1, $p3, $0.ref);
  call $i4 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
  $i5 := $ne.i32($i4, 0);
  assume {:branchcond $i5} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i5 == 1);
  $p6 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
  $M.2 := $store.i32($M.2, $p6, 2);
  call $p7 := malloc(32);
  $p8 := $bitcast.ref.ref($p7);
  $p9 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
  $M.3 := $store.ref($M.3, $p9, $p7);
  $p10 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
  $p11 := $load.ref($M.3, $p10);
  $p12 := $add.ref($add.ref($p11, $mul.ref(0, 32)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p12, $0.ref);
  goto $bb3;
$bb2:
  assume !(($i5 == 1));
  call $i13 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i13);
  $i14 := $ne.i32($i13, 0);
  assume {:branchcond $i14} true;
  goto $bb4, $bb5;
$bb3:
  call $i19 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i19);
  $i20 := $ne.i32($i19, 0);
  assume {:branchcond $i20} true;
  goto $bb7, $bb8;
$bb4:
  assume ($i14 == 1);
  $p15 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
  $M.2 := $store.i32($M.2, $p15, 1);
  $p16 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
  $M.3 := $store.ref($M.3, $p16, $p0);
  goto $bb6;
$bb5:
  assume !(($i14 == 1));
  $p17 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
  $M.2 := $store.i32($M.2, $p17, 0);
  $p18 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
  $M.3 := $store.ref($M.3, $p18, $p0);
  goto $bb6;
$bb6:
  goto $bb3;
$bb7:
  assume ($i20 == 1);
  $p21 := $p0;
  goto $bb10;
$bb8:
  assume !(($i20 == 1));
  goto $bb9;
$bb9:
  $i48 := $ne.ref($p1, $0.ref);
  assume {:branchcond $i48} true;
  goto $bb19, $bb20;
$bb10:
  call $p22 := malloc(32);
  $p23 := $bitcast.ref.ref($p22);
  $p24 := $add.ref($add.ref($p21, $mul.ref(0, 32)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p24, $p22);
  $p25 := $add.ref($add.ref($p21, $mul.ref(0, 32)), $mul.ref(0, 1));
  $p26 := $load.ref($M.0, $p25);
  $p27 := $add.ref($add.ref($p26, $mul.ref(0, 32)), $mul.ref(8, 1));
  $M.1 := $store.ref($M.1, $p27, $p21);
  $p28 := $add.ref($add.ref($p21, $mul.ref(0, 32)), $mul.ref(0, 1));
  $p29 := $load.ref($M.0, $p28);
  $p30 := $add.ref($add.ref($p29, $mul.ref(0, 32)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p30, $0.ref);
  call $i31 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i31);
  $i32 := $ne.i32($i31, 0);
  assume {:branchcond $i32} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i32 == 1);
  $p33 := $add.ref($add.ref($p29, $mul.ref(0, 32)), $mul.ref(24, 1));
  $M.2 := $store.i32($M.2, $p33, 2);
  call $p34 := malloc(32);
  $p35 := $bitcast.ref.ref($p34);
  $p36 := $add.ref($add.ref($p29, $mul.ref(0, 32)), $mul.ref(16, 1));
  $M.3 := $store.ref($M.3, $p36, $p34);
  $p37 := $add.ref($add.ref($p29, $mul.ref(0, 32)), $mul.ref(16, 1));
  $p38 := $load.ref($M.3, $p37);
  $p39 := $add.ref($add.ref($p38, $mul.ref(0, 32)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p39, $0.ref);
  goto $bb13;
$bb12:
  assume !(($i32 == 1));
  call $i40 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i40);
  $i41 := $ne.i32($i40, 0);
  assume {:branchcond $i41} true;
  goto $bb14, $bb15;
$bb13:
  call $i46 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i46);
  $i47 := $ne.i32($i46, 0);
  assume {:branchcond $i47} true;
  goto $bb17, $bb18;
$bb14:
  assume ($i41 == 1);
  $p42 := $add.ref($add.ref($p29, $mul.ref(0, 32)), $mul.ref(24, 1));
  $M.2 := $store.i32($M.2, $p42, 1);
  $p43 := $add.ref($add.ref($p29, $mul.ref(0, 32)), $mul.ref(16, 1));
  $M.3 := $store.ref($M.3, $p43, $p29);
  goto $bb16;
$bb15:
  assume !(($i41 == 1));
  $p44 := $add.ref($add.ref($p29, $mul.ref(0, 32)), $mul.ref(24, 1));
  $M.2 := $store.i32($M.2, $p44, 0);
  $p45 := $add.ref($add.ref($p29, $mul.ref(0, 32)), $mul.ref(16, 1));
  $M.3 := $store.ref($M.3, $p45, $p29);
  goto $bb16;
$bb16:
  goto $bb13;
$bb17:
  assume ($i47 == 1);
  $p21 := $p29;
  goto $bb10;
$bb18:
  assume !(($i47 == 1));
  goto $bb9;
$bb19:
  assume ($i48 == 1);
  $p49 := $p0;
  goto $bb22;
$bb20:
  assume !(($i48 == 1));
  goto $bb21;
$bb21:
  $i59 := $ne.ref($p1, $0.ref);
  assume {:branchcond $i59} true;
  goto $bb32, $bb33;
$bb22:
  goto $bb23;
$bb23:
  $p50 := $add.ref($add.ref($p49, $mul.ref(0, 32)), $mul.ref(24, 1));
  $i51 := $load.i32($M.2, $p50);
  $i52 := $eq.i32($i51, 2);
  assume {:branchcond $i52} true;
  goto $bb24, $bb25;
$bb24:
  assume ($i52 == 1);
  $p53 := $add.ref($add.ref($p49, $mul.ref(0, 32)), $mul.ref(16, 1));
  $p54 := $load.ref($M.3, $p53);
  $i55 := $eq.ref($p54, $p49);
  assume {:branchcond $i55} true;
  goto $bb27, $bb28;
$bb25:
  assume !(($i52 == 1));
  goto $bb26;
$bb26:
  call reach_error();
  call abort();
  assume false;
$bb27:
  assume ($i55 == 1);
  goto $bb29;
$bb28:
  assume !(($i55 == 1));
  goto $bb26;
$bb29:
  $p56 := $add.ref($add.ref($p49, $mul.ref(0, 32)), $mul.ref(0, 1));
  $p57 := $load.ref($M.0, $p56);
  $i58 := $ne.ref($p57, $0.ref);
  assume {:branchcond $i58} true;
  goto $bb30, $bb31;
$bb30:
  assume ($i58 == 1);
  $p49 := $p57;
  goto $bb22;
$bb31:
  assume !(($i58 == 1));
  goto $bb21;
$bb32:
  assume ($i59 == 1);
  $p60 := $p0;
  goto $bb35;
$bb33:
  assume !(($i59 == 1));
  goto $bb34;
$bb34:
  $r := 0;
  return;
$bb35:
  $p61 := $add.ref($add.ref($p60, $mul.ref(0, 32)), $mul.ref(0, 1));
  $p62 := $load.ref($M.0, $p61);
  $p63 := $add.ref($add.ref($p60, $mul.ref(0, 32)), $mul.ref(24, 1));
  $i64 := $load.i32($M.2, $p63);
  $i65 := $eq.i32($i64, 2);
  assume {:branchcond $i65} true;
  goto $bb36, $bb37;
$bb36:
  assume ($i65 == 1);
  $p66 := $add.ref($add.ref($p60, $mul.ref(0, 32)), $mul.ref(16, 1));
  $p67 := $load.ref($M.3, $p66);
  $p68 := $bitcast.ref.ref($p67);
  call free_($p68);
  goto $bb38;
$bb37:
  assume !(($i65 == 1));
  goto $bb38;
$bb38:
  $p69 := $bitcast.ref.ref($p60);
  call free_($p69);
  $i70 := $ne.ref($p62, $0.ref);
  assume {:branchcond $i70} true;
  goto $bb39, $bb40;
$bb39:
  assume ($i70 == 1);
  $p60 := $p62;
  goto $bb35;
$bb40:
  assume !(($i70 == 1));
  goto $bb34;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 3096));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const malloc: ref;
axiom (malloc == $sub.ref(0, 4128));
procedure  malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $malloc($i0);
}
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0, 5160));
procedure  __VERIFIER_nondet_int()
  returns ($r: i32);
const abort: ref;
axiom (abort == $sub.ref(0, 6192));
procedure  abort();
const free_: ref;
axiom (free_ == $sub.ref(0, 7224));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 8256));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 9288));
procedure  __SMACK_static_init()
{
$bb0:
  return;
}
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
