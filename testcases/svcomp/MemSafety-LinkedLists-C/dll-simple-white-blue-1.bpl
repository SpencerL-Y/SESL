// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/smack ../svcomp/MemSafety-LinkedLists-C//dll-simple-white-blue-1.c -ll ../svcomp/MemSafety-LinkedLists-C//dll-simple-white-blue-1_IR.ll --bpl ../svcomp/MemSafety-LinkedLists-C//dll-simple-white-blue-1.bpl -t --sh-mem-leak

const reach_error: ref;
axiom (reach_error == $sub.ref(0, 1032));
procedure  reach_error()
{
$bb0:
  return;
}
const main: ref;
axiom (main == $sub.ref(0, 2064));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $p0: ref8;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref32;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref8;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref8;
  var $p23: ref;
  var $p24: ref32;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i1;
  var $p42: ref;
  var $p31: ref;
  var $p36: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref8;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref32;
  var $p51: ref;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p27: ref;
  var $p57: ref32;
  var $i58: i32;
  var $i59: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref32;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $p60: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref32;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $i77: i1;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref8;
  var $i83: i1;
$bb0:
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  call $p0 := malloc(24);
  $p1 := $bitcast.ref.ref($p0);
  $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p2, $0.ref);
  $p3 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
  $M.1 := $store.ref($M.1, $p3, $0.ref);
  $p4 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
  $M.2 := $store.i32($M.2, $p4, 0);
  call $i5 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
  $i6 := $ne.i32($i5, 0);
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1);
  $p7 := $p0;
  goto $bb4;
$bb2:
  assume !(($i6 == 1));
  goto $bb3;
$bb3:
  call $i20 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i20);
  $i21 := $ne.i32($i20, 0);
  assume {:branchcond $i21} true;
  goto $bb7, $bb8;
$bb4:
  call $p8 := malloc(24);
  $p9 := $bitcast.ref.ref($p8);
  $p10 := $add.ref($add.ref($p7, $mul.ref(0, 24)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p10, $p8);
  $p11 := $add.ref($add.ref($p7, $mul.ref(0, 24)), $mul.ref(0, 1));
  $p12 := $load.ref($M.0, $p11);
  $p13 := $add.ref($add.ref($p12, $mul.ref(0, 24)), $mul.ref(8, 1));
  $M.1 := $store.ref($M.1, $p13, $p7);
  $p14 := $add.ref($add.ref($p7, $mul.ref(0, 24)), $mul.ref(0, 1));
  $p15 := $load.ref($M.0, $p14);
  $p16 := $add.ref($add.ref($p15, $mul.ref(0, 24)), $mul.ref(16, 1));
  $M.2 := $store.i32($M.2, $p16, 0);
  $p17 := $add.ref($add.ref($p15, $mul.ref(0, 24)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p17, $0.ref);
  call $i18 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i18);
  $i19 := $ne.i32($i18, 0);
  assume {:branchcond $i19} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i19 == 1);
  $p7 := $p15;
  goto $bb4;
$bb6:
  assume !(($i19 == 1));
  goto $bb3;
$bb7:
  assume ($i21 == 1);
  call $p22 := malloc(24);
  $p23 := $bitcast.ref.ref($p22);
  $p24 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(16, 1));
  $M.2 := $store.i32($M.2, $p24, 1);
  $p25 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p25, $p0);
  $p26 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(8, 1));
  $M.1 := $store.ref($M.1, $p26, $0.ref);
  $p27 := $p22;
  goto $bb9;
$bb8:
  assume !(($i21 == 1));
  $p28 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
  $p29 := $load.ref($M.0, $p28);
  $i30 := $ne.ref($p29, $0.ref);
  $p31 := $p0;
  assume {:branchcond $i30} true;
  goto $bb10, $bb11;
$bb9:
  $p57 := $add.ref($add.ref($p27, $mul.ref(0, 24)), $mul.ref(16, 1));
  $i58 := $load.i32($M.2, $p57);
  $i59 := $ne.i32($i58, 1);
  $p60 := $p27;
  assume {:branchcond $i59} true;
  goto $bb22, $bb23;
$bb10:
  assume ($i30 == 1);
  $p32 := $p0;
  goto $bb13;
$bb11:
  assume !(($i30 == 1));
  goto $bb12;
$bb12:
  $p36 := $p31;
  goto $bb16;
$bb13:
  call $i33 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i33);
  $i34 := $ne.i32($i33, 0);
  $p35 := $p32;
  assume {:branchcond $i34} true;
  goto $bb14, $bb15;
$bb14:
  assume ($i34 == 1);
  $p36 := $p35;
  goto $bb16;
$bb15:
  assume !(($i34 == 1));
  $p37 := $add.ref($add.ref($p32, $mul.ref(0, 24)), $mul.ref(0, 1));
  $p38 := $load.ref($M.0, $p37);
  $p39 := $add.ref($add.ref($p38, $mul.ref(0, 24)), $mul.ref(0, 1));
  $p40 := $load.ref($M.0, $p39);
  $i41 := $ne.ref($p40, $0.ref);
  $p42 := $p38;
  assume {:branchcond $i41} true;
  goto $bb17, $bb18;
$bb16:
  $p43 := $add.ref($add.ref($p36, $mul.ref(0, 24)), $mul.ref(0, 1));
  $p44 := $load.ref($M.0, $p43);
  call $p45 := malloc(24);
  $p46 := $bitcast.ref.ref($p45);
  $p47 := $add.ref($add.ref($p36, $mul.ref(0, 24)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p47, $p45);
  $p48 := $add.ref($add.ref($p36, $mul.ref(0, 24)), $mul.ref(0, 1));
  $p49 := $load.ref($M.0, $p48);
  $p50 := $add.ref($add.ref($p49, $mul.ref(0, 24)), $mul.ref(16, 1));
  $M.2 := $store.i32($M.2, $p50, 1);
  $p51 := $add.ref($add.ref($p49, $mul.ref(0, 24)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p51, $p44);
  $i52 := $ne.ref($p44, $0.ref);
  assume {:branchcond $i52} true;
  goto $bb19, $bb20;
$bb17:
  assume ($i41 == 1);
  $p32 := $p38;
  goto $bb13;
$bb18:
  assume !(($i41 == 1));
  $p31 := $p42;
  goto $bb12;
$bb19:
  assume ($i52 == 1);
  $p53 := $add.ref($add.ref($p44, $mul.ref(0, 24)), $mul.ref(8, 1));
  $p54 := $load.ref($M.1, $p53);
  $p55 := $add.ref($add.ref($p49, $mul.ref(0, 24)), $mul.ref(8, 1));
  $M.1 := $store.ref($M.1, $p55, $p54);
  $p56 := $add.ref($add.ref($p44, $mul.ref(0, 24)), $mul.ref(8, 1));
  $M.1 := $store.ref($M.1, $p56, $p49);
  goto $bb21;
$bb20:
  assume !(($i52 == 1));
  goto $bb21;
$bb21:
  $p27 := $p0;
  goto $bb9;
$bb22:
  assume ($i59 == 1);
  $p61 := $p27;
  goto $bb25;
$bb23:
  assume !(($i59 == 1));
  goto $bb24;
$bb24:
  $p68 := $add.ref($add.ref($p60, $mul.ref(0, 24)), $mul.ref(0, 1));
  $p69 := $load.ref($M.0, $p68);
  $i70 := $ne.ref($p69, $0.ref);
  assume {:branchcond $i70} true;
  goto $bb28, $bb29;
$bb25:
  $p62 := $add.ref($add.ref($p61, $mul.ref(0, 24)), $mul.ref(0, 1));
  $p63 := $load.ref($M.0, $p62);
  $p64 := $add.ref($add.ref($p63, $mul.ref(0, 24)), $mul.ref(16, 1));
  $i65 := $load.i32($M.2, $p64);
  $i66 := $ne.i32($i65, 1);
  $p67 := $p63;
  assume {:branchcond $i66} true;
  goto $bb26, $bb27;
$bb26:
  assume ($i66 == 1);
  $p61 := $p63;
  goto $bb25;
$bb27:
  assume !(($i66 == 1));
  $p60 := $p67;
  goto $bb24;
$bb28:
  assume ($i70 == 1);
  $p71 := $p69;
  goto $bb31;
$bb29:
  assume !(($i70 == 1));
  goto $bb30;
$bb30:
  $i78 := $ne.ref($p27, $0.ref);
  assume {:branchcond $i78} true;
  goto $bb38, $bb39;
$bb31:
  $p72 := $add.ref($add.ref($p71, $mul.ref(0, 24)), $mul.ref(16, 1));
  $i73 := $load.i32($M.2, $p72);
  $i74 := $ne.i32($i73, 1);
  assume {:branchcond $i74} true;
  goto $bb32, $bb33;
$bb32:
  assume ($i74 == 1);
  goto $bb34;
$bb33:
  assume !(($i74 == 1));
  $p75 := $add.ref($add.ref($p71, $mul.ref(0, 24)), $mul.ref(0, 1));
  $p76 := $load.ref($M.0, $p75);
  $i77 := $ne.ref($p76, $0.ref);
  assume {:branchcond $i77} true;
  goto $bb36, $bb37;
$bb34:
  call reach_error();
  call abort();
  assume false;
$bb35:
  assume false;
$bb36:
  assume ($i77 == 1);
  $p71 := $p76;
  goto $bb31;
$bb37:
  assume !(($i77 == 1));
  goto $bb30;
$bb38:
  assume ($i78 == 1);
  $p79 := $p27;
  goto $bb41;
$bb39:
  assume !(($i78 == 1));
  goto $bb40;
$bb40:
  $r := 0;
  return;
$bb41:
  $p80 := $add.ref($add.ref($p79, $mul.ref(0, 24)), $mul.ref(0, 1));
  $p81 := $load.ref($M.0, $p80);
  $p82 := $bitcast.ref.ref($p79);
  call free_($p82);
  $i83 := $ne.ref($p81, $0.ref);
  assume {:branchcond $i83} true;
  goto $bb42, $bb43;
$bb42:
  assume ($i83 == 1);
  $p79 := $p81;
  goto $bb41;
$bb43:
  assume !(($i83 == 1));
  goto $bb40;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 3096));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const malloc: ref;
axiom (malloc == $sub.ref(0, 4128));
procedure  malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $malloc($i0);
}
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0, 5160));
procedure  __VERIFIER_nondet_int()
  returns ($r: i32);
const abort: ref;
axiom (abort == $sub.ref(0, 6192));
procedure  abort();
const free_: ref;
axiom (free_ == $sub.ref(0, 7224));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 8256));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 9288));
procedure  __SMACK_static_init()
{
$bb0:
  return;
}
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
