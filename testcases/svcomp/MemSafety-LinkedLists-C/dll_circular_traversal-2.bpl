// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/smack ../svcomp/MemSafety-LinkedLists-C//dll_circular_traversal-2.c -ll ../svcomp/MemSafety-LinkedLists-C//dll_circular_traversal-2_IR.ll --bpl ../svcomp/MemSafety-LinkedLists-C//dll_circular_traversal-2.bpl -t --sh-mem-leak

const reach_error: ref;
axiom (reach_error == $sub.ref(0, 1032));
procedure  reach_error()
{
$bb0:
  return;
}
const myexit: ref;
axiom (myexit == $sub.ref(0, 2064));
procedure  myexit($i0: i32)
{
$bb0:
  call {:cexpr "myexit:arg:s"} boogie_si_record_i32($i0);
  goto $bb1;
$bb1:
  assume true;
  goto $bb1;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 3096));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const llvm.dbg.label: ref;
axiom (llvm.dbg.label == $sub.ref(0, 4128));
procedure  llvm.dbg.label($p0: ref);
const dll_circular_create: ref;
axiom (dll_circular_create == $sub.ref(0, 5160));
procedure  dll_circular_create($i0: i32, $i1: i32)
  returns ($r: ref)
{
  var $p2: ref8;
  var $p3: ref;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref32;
  var $i8: i1;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref8;
  var $p13: ref;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p9: ref;
  var $p21: ref;
  var $p22: ref;
$bb0:
  call {:cexpr "dll_circular_create:arg:len"} boogie_si_record_i32($i0);
  call {:cexpr "dll_circular_create:arg:data"} boogie_si_record_i32($i1);
  call $p2 := malloc(24);
  $p3 := $bitcast.ref.ref($p2);
  $i4 := $eq.ref($0.ref, $p3);
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1);
  call myexit(1);
  goto $bb3;
$bb2:
  assume !(($i4 == 1));
  goto $bb3;
$bb3:
  $p5 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(8, 1));
  $M.0 := $store.ref($M.0, $p5, $p2);
  $p6 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(16, 1));
  $M.1 := $store.ref($M.1, $p6, $p2);
  $p7 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
  $M.2 := $store.i32($M.2, $p7, $i1);
  call {:cexpr "dll_circular_create:arg:len"} boogie_si_record_i32($i0);
  $i8 := $sgt.i32($i0, 1);
  $p9 := $p2;
  assume {:branchcond $i8} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i8 == 1);
  $i10, $p11 := $i0, $p2;
  goto $bb7;
$bb5:
  assume !(($i8 == 1));
  goto $bb6;
$bb6:
  $p21 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(8, 1));
  $M.0 := $store.ref($M.0, $p21, $p9);
  $p22 := $add.ref($add.ref($p9, $mul.ref(0, 24)), $mul.ref(16, 1));
  $M.1 := $store.ref($M.1, $p22, $p2);
  $r := $p9;
  return;
$bb7:
  call $p12 := malloc(24);
  $p13 := $bitcast.ref.ref($p12);
  $i14 := $eq.ref($0.ref, $p13);
  assume {:branchcond $i14} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i14 == 1);
  call myexit(1);
  goto $bb10;
$bb9:
  assume !(($i14 == 1));
  goto $bb10;
$bb10:
  $p15 := $add.ref($add.ref($p13, $mul.ref(0, 24)), $mul.ref(8, 1));
  $M.0 := $store.ref($M.0, $p15, $p11);
  $p16 := $add.ref($add.ref($p13, $mul.ref(0, 24)), $mul.ref(0, 1));
  $M.2 := $store.i32($M.2, $p16, $i1);
  $p17 := $add.ref($add.ref($p11, $mul.ref(0, 24)), $mul.ref(16, 1));
  $M.1 := $store.ref($M.1, $p17, $p12);
  $i18 := $add.i32($i10, $sub.i32(0, 1));
  call {:cexpr "len"} boogie_si_record_i32($i18);
  $i19 := $sgt.i32($i18, 1);
  $p20 := $p12;
  assume {:branchcond $i19} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i19 == 1);
  $i10, $p11 := $i18, $p12;
  goto $bb7;
$bb12:
  assume !(($i19 == 1));
  $p9 := $p20;
  goto $bb6;
}
const malloc: ref;
axiom (malloc == $sub.ref(0, 6192));
procedure  malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $malloc($i0);
}
const main: ref;
axiom (main == $sub.ref(0, 7224));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $p2: ref;
  var $p3: ref32;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref32;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref8;
  var $i25: i1;
$bb0:
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  call $p0 := dll_circular_create(5, 1);
  $i1, $p2 := 1, $p0;
  goto $bb1;
$bb1:
  $p3 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
  $i4 := $load.i32($M.2, $p3);
  $i5 := $ne.i32(1, $i4);
  assume {:branchcond $i5} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i5 == 1);
  goto $bb4;
$bb3:
  assume !(($i5 == 1));
  $p6 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
  $M.2 := $store.i32($M.2, $p6, $i1);
  $p7 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(8, 1));
  $p8 := $load.ref($M.0, $p7);
  $i9 := $add.i32($i1, 1);
  call {:cexpr "data_new"} boogie_si_record_i32($i9);
  goto $bb5;
$bb4:
  assume true;
  call reach_error();
  call abort();
  assume false;
$bb5:
  $i10 := $ne.ref($p8, $p0);
  $p11, $i12 := $p8, $i9;
  assume {:branchcond $i10} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i10 == 1);
  $i1, $p2 := $i9, $p8;
  goto $bb1;
$bb7:
  assume !(($i10 == 1));
  $p13 := $add.ref($add.ref($p11, $mul.ref(0, 24)), $mul.ref(16, 1));
  $p14 := $load.ref($M.1, $p13);
  $p15 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
  $M.1 := $store.ref($M.1, $p15, $0.ref);
  $i16, $p17 := $i12, $p14;
  goto $bb8;
$bb8:
  $i18 := $add.i32($i16, $sub.i32(0, 1));
  call {:cexpr "data_new"} boogie_si_record_i32($i18);
  $p19 := $add.ref($add.ref($p17, $mul.ref(0, 24)), $mul.ref(0, 1));
  $i20 := $load.i32($M.2, $p19);
  $i21 := $ne.i32($i18, $i20);
  assume {:branchcond $i21} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i21 == 1);
  goto $bb4;
$bb10:
  assume !(($i21 == 1));
  $p22 := $add.ref($add.ref($p17, $mul.ref(0, 24)), $mul.ref(16, 1));
  $p23 := $load.ref($M.1, $p22);
  $p24 := $bitcast.ref.ref($p17);
  call free_($p24);
  goto $bb11;
$bb11:
  $i25 := $ne.ref($p23, $0.ref);
  assume {:branchcond $i25} true;
  goto $bb12, $bb13;
$bb12:
  assume ($i25 == 1);
  $i16, $p17 := $i18, $p23;
  goto $bb8;
$bb13:
  assume !(($i25 == 1));
  $r := 0;
  return;
}
const free_: ref;
axiom (free_ == $sub.ref(0, 8256));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const abort: ref;
axiom (abort == $sub.ref(0, 9288));
procedure  abort();
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 10320));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 11352));
procedure  __SMACK_static_init()
{
$bb0:
  return;
}
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
