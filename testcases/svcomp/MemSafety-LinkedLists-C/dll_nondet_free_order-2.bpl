// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/smack ../svcomp/MemSafety-LinkedLists-C//dll_nondet_free_order-2.c -ll ../svcomp/MemSafety-LinkedLists-C//dll_nondet_free_order-2_IR.ll --bpl ../svcomp/MemSafety-LinkedLists-C//dll_nondet_free_order-2.bpl -t --sh-mem-leak

const myexit: ref;
axiom (myexit == $sub.ref(0, 1032));
procedure  myexit($i0: i32)
{
$bb0:
  call {:cexpr "myexit:arg:s"} boogie_si_record_i32($i0);
  goto $bb1;
$bb1:
  assume true;
  goto $bb1;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 2064));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const llvm.dbg.label: ref;
axiom (llvm.dbg.label == $sub.ref(0, 3096));
procedure  llvm.dbg.label($p0: ref);
const dll_circular_create: ref;
axiom (dll_circular_create == $sub.ref(0, 4128));
procedure  dll_circular_create($i0: i32)
  returns ($r: ref)
{
  var $p1: ref8;
  var $p2: ref;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref8;
  var $p11: ref;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p7: ref;
  var $p18: ref;
  var $p19: ref;
$bb0:
  call {:cexpr "dll_circular_create:arg:len"} boogie_si_record_i32($i0);
  call $p1 := malloc(16);
  $p2 := $bitcast.ref.ref($p1);
  $i3 := $eq.ref($0.ref, $p2);
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  call myexit(1);
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  goto $bb3;
$bb3:
  $p4 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p4, $p1);
  $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.1 := $store.ref($M.1, $p5, $p1);
  call {:cexpr "dll_circular_create:arg:len"} boogie_si_record_i32($i0);
  $i6 := $sgt.i32($i0, 1);
  $p7 := $p1;
  assume {:branchcond $i6} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i6 == 1);
  $i8, $p9 := $i0, $p1;
  goto $bb7;
$bb5:
  assume !(($i6 == 1));
  goto $bb6;
$bb6:
  $p18 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p18, $p7);
  $p19 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.1 := $store.ref($M.1, $p19, $p1);
  $r := $p7;
  return;
$bb7:
  call $p10 := malloc(16);
  $p11 := $bitcast.ref.ref($p10);
  $i12 := $eq.ref($0.ref, $p11);
  assume {:branchcond $i12} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i12 == 1);
  call myexit(1);
  goto $bb10;
$bb9:
  assume !(($i12 == 1));
  goto $bb10;
$bb10:
  $p13 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p13, $p9);
  $p14 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.1 := $store.ref($M.1, $p14, $p10);
  $i15 := $add.i32($i8, $sub.i32(0, 1));
  call {:cexpr "len"} boogie_si_record_i32($i15);
  $i16 := $sgt.i32($i15, 1);
  $p17 := $p10;
  assume {:branchcond $i16} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i16 == 1);
  $i8, $p9 := $i15, $p10;
  goto $bb7;
$bb12:
  assume !(($i16 == 1));
  $p7 := $p17;
  goto $bb6;
}
const malloc: ref;
axiom (malloc == $sub.ref(0, 5160));
procedure  malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $malloc($i0);
}
const _destroy_in_nondeterministic_order: ref;
axiom (_destroy_in_nondeterministic_order == $sub.ref(0, 6192));
procedure  _destroy_in_nondeterministic_order($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref8;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref8;
  var $p11: ref8;
  var $p12: ref8;
  var $p13: ref8;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref8;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref8;
  var $p20: ref8;
  var $p21: ref8;
  var $p22: ref8;
  var $p23: ref8;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref8;
  var $p27: ref8;
  var $p28: ref8;
$bb0:
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p2 := $load.ref($M.1, $p1);
  $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p4 := $load.ref($M.0, $p3);
  call $i5 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
  $i6 := $ne.i32($i5, 0);
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1);
  $p7 := $bitcast.ref.ref($p0);
  call free_($p7);
  call $i8 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i8);
  $i9 := $ne.i32($i8, 0);
  assume {:branchcond $i9} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i6 == 1));
  call $i14 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i14);
  $i15 := $ne.i32($i14, 0);
  assume {:branchcond $i15} true;
  goto $bb7, $bb8;
$bb3:
  assume ($i9 == 1);
  $p10 := $bitcast.ref.ref($p4);
  call free_($p10);
  $p11 := $bitcast.ref.ref($p2);
  call free_($p11);
  goto $bb5;
$bb4:
  assume !(($i9 == 1));
  $p12 := $bitcast.ref.ref($p2);
  call free_($p12);
  $p13 := $bitcast.ref.ref($p4);
  call free_($p13);
  goto $bb5;
$bb5:
  goto $bb6;
$bb6:
  return;
$bb7:
  assume ($i15 == 1);
  $p16 := $bitcast.ref.ref($p4);
  call free_($p16);
  call $i17 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i17);
  $i18 := $ne.i32($i17, 0);
  assume {:branchcond $i18} true;
  goto $bb9, $bb10;
$bb8:
  assume !(($i15 == 1));
  $p23 := $bitcast.ref.ref($p2);
  call free_($p23);
  call $i24 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i24);
  $i25 := $ne.i32($i24, 0);
  assume {:branchcond $i25} true;
  goto $bb13, $bb14;
$bb9:
  assume ($i18 == 1);
  $p19 := $bitcast.ref.ref($p0);
  call free_($p19);
  $p20 := $bitcast.ref.ref($p2);
  call free_($p20);
  goto $bb11;
$bb10:
  assume !(($i18 == 1));
  $p21 := $bitcast.ref.ref($p2);
  call free_($p21);
  $p22 := $bitcast.ref.ref($p0);
  call free_($p22);
  goto $bb11;
$bb11:
  goto $bb12;
$bb12:
  goto $bb6;
$bb13:
  assume ($i25 == 1);
  $p26 := $bitcast.ref.ref($p0);
  call free_($p26);
  $p27 := $bitcast.ref.ref($p4);
  call free_($p27);
  goto $bb15;
$bb14:
  assume !(($i25 == 1));
  $p28 := $bitcast.ref.ref($p0);
  call free_($p28);
  goto $bb15;
$bb15:
  goto $bb12;
}
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0, 7224));
procedure  __VERIFIER_nondet_int()
  returns ($r: i32);
const free_: ref;
axiom (free_ == $sub.ref(0, 8256));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const main: ref;
axiom (main == $sub.ref(0, 9288));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $p0: ref;
$bb0:
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  call $p0 := dll_circular_create(3);
  call _destroy_in_nondeterministic_order($p0);
  $r := 0;
  return;
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 10320));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 11352));
procedure  __SMACK_static_init()
{
$bb0:
  return;
}
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
