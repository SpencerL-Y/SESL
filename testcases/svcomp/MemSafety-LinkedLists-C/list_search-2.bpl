// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/smack ../svcomp/MemSafety-LinkedLists-C//list_search-2.c -ll ../svcomp/MemSafety-LinkedLists-C//list_search-2_IR.ll --bpl ../svcomp/MemSafety-LinkedLists-C//list_search-2.bpl -t --sh-mem-leak

const {:global_variable} {:pointer_to_size 64} head: ref;
axiom (head == $sub.ref(0, 1032));
const reach_error: ref;
axiom (reach_error == $sub.ref(0, 2064));
procedure  reach_error()
{
$bb0:
  return;
}
const __VERIFIER_assert: ref;
axiom (__VERIFIER_assert == $sub.ref(0, 3096));
procedure  __VERIFIER_assert($i0: i32)
{
  var $i1: i1;
$bb0:
  call {:cexpr "__VERIFIER_assert:arg:cond"} boogie_si_record_i32($i0);
  $i1 := $ne.i32($i0, 0);
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  return;
$bb2:
  assume !(($i1 == 1));
  goto $bb3;
$bb3:
  assume true;
  call reach_error();
  call abort();
  assume false;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 4128));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const llvm.dbg.label: ref;
axiom (llvm.dbg.label == $sub.ref(0, 5160));
procedure  llvm.dbg.label($p0: ref);
const abort: ref;
axiom (abort == $sub.ref(0, 6192));
procedure  abort();
const search_list: ref;
axiom (search_list == $sub.ref(0, 7224));
procedure  search_list($p0: ref, $i1: i32)
  returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $p6: ref32;
  var $i7: i32;
  var $i8: i1;
  var $i5: i1;
  var $p10: ref;
  var $p11: ref;
  var $p9: ref;
$bb0:
  call {:cexpr "search_list:arg:k"} boogie_si_record_i32($i1);
  $p2 := $M.0;
  $p3 := $p2;
  goto $bb1;
$bb1:
  $i4 := $ne.ref($p3, $0.ref);
  $i5 := 0;
  assume {:branchcond $i4} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i4 == 1);
  $p6 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
  $i7 := $load.i32($M.1, $p6);
  $i8 := $ne.i32($i7, $i1);
  $i5 := $i8;
  goto $bb4;
$bb3:
  assume !(($i4 == 1));
  goto $bb4;
$bb4:
  $p9 := $p3;
  assume {:branchcond $i5} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i5 == 1);
  $p10 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p11 := $load.ref($M.2, $p10);
  $p3 := $p11;
  goto $bb1;
$bb6:
  assume !(($i5 == 1));
  $r := $p9;
  return;
}
const delete_list: ref;
axiom (delete_list == $sub.ref(0, 8256));
procedure  delete_list($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $p14: ref;
  var $p7: ref;
  var $p16: ref;
  var $p17: ref;
  var $p15: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref8;
$bb0:
  $p1 := $M.0;
  $p2 := $M.0;
  $i3 := $ne.ref($p2, $p0);
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p5 := $load.ref($M.2, $p4);
  $i6 := $ne.ref($p5, $p0);
  $p7 := $p1;
  assume {:branchcond $i6} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i3 == 1));
  $p16 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p17 := $load.ref($M.2, $p16);
  $M.0 := $p17;
  $p15 := $p1;
  goto $bb9;
$bb3:
  assume ($i6 == 1);
  $p8 := $p1;
  goto $bb6;
$bb4:
  assume !(($i6 == 1));
  goto $bb5;
$bb5:
  $p15 := $p7;
  goto $bb9;
$bb6:
  $p9 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p10 := $load.ref($M.2, $p9);
  $p11 := $add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p12 := $load.ref($M.2, $p11);
  $i13 := $ne.ref($p12, $p0);
  $p14 := $p10;
  assume {:branchcond $i13} true;
  goto $bb7, $bb8;
$bb7:
  assume ($i13 == 1);
  $p8 := $p10;
  goto $bb6;
$bb8:
  assume !(($i13 == 1));
  $p7 := $p14;
  goto $bb5;
$bb9:
  $p18 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p19 := $load.ref($M.2, $p18);
  $p20 := $add.ref($add.ref($p15, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.2 := $store.ref($M.2, $p20, $p19);
  $p21 := $bitcast.ref.ref($p0);
  call free_($p21);
  $r := 0;
  return;
}
const free_: ref;
axiom (free_ == $sub.ref(0, 9288));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const insert_list: ref;
axiom (insert_list == $sub.ref(0, 10320));
procedure  insert_list($p0: ref, $i1: i32)
  returns ($r: i32)
{
  var $p2: ref8;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $p6: ref32;
  var $p7: ref;
  var $p8: ref32;
  var $p9: ref;
  var $p10: ref;
$bb0:
  call {:cexpr "insert_list:arg:k"} boogie_si_record_i32($i1);
  call $p2 := malloc(16);
  $p3 := $bitcast.ref.ref($p2);
  $p4 := $M.0;
  $i5 := $eq.ref($p4, $0.ref);
  assume {:branchcond $i5} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i5 == 1);
  $p6 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.1 := $store.i32($M.1, $p6, $i1);
  $p7 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.2 := $store.ref($M.2, $p7, $0.ref);
  goto $bb3;
$bb2:
  assume !(($i5 == 1));
  $p8 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.1 := $store.i32($M.1, $p8, $i1);
  $p9 := $M.0;
  $p10 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.2 := $store.ref($M.2, $p10, $p9);
  goto $bb3;
$bb3:
  $M.0 := $p2;
  $r := 0;
  return;
}
const malloc: ref;
axiom (malloc == $sub.ref(0, 11352));
procedure  malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $malloc($i0);
}
const main: ref;
axiom (main == $sub.ref(0, 12384));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $p11: ref;
  var $p6: ref;
  var $p12: ref;
  var $p13: ref32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i1;
$bb0:
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  assume true;
  call $i0 := insert_list($0.ref, 2);
  call $i1 := insert_list($0.ref, 5);
  call $i2 := insert_list($0.ref, 1);
  call $i3 := insert_list($0.ref, 3);
  $p4 := $M.0;
  $i5 := $ne.ref($p4, $0.ref);
  $p6 := $p4;
  assume {:branchcond $i5} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i5 == 1);
  $p7 := $p4;
  goto $bb4;
$bb2:
  assume !(($i5 == 1));
  goto $bb3;
$bb3:
  call $p12 := search_list($p6, 2);
  $p13 := $add.ref($add.ref($p12, $mul.ref(0, 16)), $mul.ref(0, 1));
  $i14 := $load.i32($M.1, $p13);
  $i15 := $eq.i32($i14, 2);
  $i16 := $zext.i1.i32($i15);
  call __VERIFIER_assert($i16);
  call $i17 := delete_list($p12);
  $p18 := $M.0;
  $i19 := $ne.ref($p18, $0.ref);
  assume {:branchcond $i19} true;
  goto $bb7, $bb8;
$bb4:
  $p8 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p9 := $load.ref($M.2, $p8);
  $i10 := $ne.ref($p9, $0.ref);
  $p11 := $p9;
  assume {:branchcond $i10} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i10 == 1);
  $p7 := $p9;
  goto $bb4;
$bb6:
  assume !(($i10 == 1));
  $p6 := $p11;
  goto $bb3;
$bb7:
  assume ($i19 == 1);
  $p20 := $p18;
  goto $bb10;
$bb8:
  assume !(($i19 == 1));
  goto $bb9;
$bb9:
  $r := 0;
  return;
$bb10:
  $p21 := $add.ref($add.ref($p20, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p22 := $load.ref($M.2, $p21);
  $i23 := $ne.ref($p22, $0.ref);
  assume {:branchcond $i23} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i23 == 1);
  $p20 := $p22;
  goto $bb10;
$bb12:
  assume !(($i23 == 1));
  goto $bb9;
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 13416));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 14448));
procedure  __SMACK_static_init()
{
$bb0:
  $M.0 := $0.ref;
  return;
}
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
