// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/smack ../svcomp/MemSafety-LinkedLists-C//merge_sort-1.c -ll ../svcomp/MemSafety-LinkedLists-C//merge_sort-1_IR.ll --bpl ../svcomp/MemSafety-LinkedLists-C//merge_sort-1.bpl -t --sh-mem-leak

const reach_error: ref;
axiom (reach_error == $sub.ref(0, 1032));
procedure  reach_error()
{
$bb0:
  return;
}
const main: ref;
axiom (main == $sub.ref(0, 2064));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $p3: ref;
  var $p4: ref8;
  var $p5: ref;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref32;
  var $p10: ref8;
  var $p11: ref;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p2: ref;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i1;
  var $p28: ref;
  var $p22: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref8;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref8;
  var $i37: i1;
$bb0:
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  call $i0 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
  $i1 := $ne.i32($i0, 0);
  $p2 := $0.ref;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  $p3 := $0.ref;
  goto $bb4;
$bb2:
  assume !(($i1 == 1));
  goto $bb3;
$bb3:
  $i18 := $ne.ref($p2, $0.ref);
  assume {:branchcond $i18} true;
  goto $bb11, $bb12;
$bb4:
  call $p4 := malloc(16);
  $p5 := $bitcast.ref.ref($p4);
  $i6 := $ne.ref($p5, $0.ref);
  assume {:branchcond $i6} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i6 == 1);
  $p7 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p7, $p4);
  call $i8 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i8);
  $p9 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.1 := $store.i32($M.1, $p9, $i8);
  call $p10 := malloc(16);
  $p11 := $bitcast.ref.ref($p10);
  $i12 := $ne.ref($p11, $0.ref);
  assume {:branchcond $i12} true;
  goto $bb7, $bb8;
$bb6:
  assume !(($i6 == 1));
  call abort();
  assume false;
$bb7:
  assume ($i12 == 1);
  $p13 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p13, $p4);
  $p14 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.1 := $store.ref($M.1, $p14, $p3);
  call $i15 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i15);
  $i16 := $ne.i32($i15, 0);
  $p17 := $p10;
  assume {:branchcond $i16} true;
  goto $bb9, $bb10;
$bb8:
  assume !(($i12 == 1));
  call abort();
  assume false;
$bb9:
  assume ($i16 == 1);
  $p3 := $p10;
  goto $bb4;
$bb10:
  assume !(($i16 == 1));
  $p2 := $p17;
  goto $bb3;
$bb11:
  assume ($i18 == 1);
  call inspect_before($p2);
  $p19 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p20 := $load.ref($M.1, $p19);
  $i21 := $ne.ref($p20, $0.ref);
  $p22 := $p2;
  assume {:branchcond $i21} true;
  goto $bb14, $bb15;
$bb12:
  assume !(($i18 == 1));
  goto $bb13;
$bb13:
  $r := 0;
  return;
$bb14:
  assume ($i21 == 1);
  $p23 := $p2;
  goto $bb17;
$bb15:
  assume !(($i21 == 1));
  goto $bb16;
$bb16:
  call inspect_after($p22);
  $p29 := $add.ref($add.ref($p22, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p30 := $load.ref($M.0, $p29);
  $p31 := $bitcast.ref.ref($p22);
  call free_($p31);
  $i32 := $ne.ref($p30, $0.ref);
  assume {:branchcond $i32} true;
  goto $bb20, $bb21;
$bb17:
  call $p24 := seq_sort_core($p23);
  $p25 := $add.ref($add.ref($p24, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p26 := $load.ref($M.1, $p25);
  $i27 := $ne.ref($p26, $0.ref);
  $p28 := $p24;
  assume {:branchcond $i27} true;
  goto $bb18, $bb19;
$bb18:
  assume ($i27 == 1);
  $p23 := $p24;
  goto $bb17;
$bb19:
  assume !(($i27 == 1));
  $p22 := $p28;
  goto $bb16;
$bb20:
  assume ($i32 == 1);
  $p33 := $p30;
  goto $bb23;
$bb21:
  assume !(($i32 == 1));
  goto $bb22;
$bb22:
  goto $bb13;
$bb23:
  $p34 := $add.ref($add.ref($p33, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p35 := $load.ref($M.0, $p34);
  $p36 := $bitcast.ref.ref($p33);
  call free_($p36);
  $i37 := $ne.ref($p35, $0.ref);
  assume {:branchcond $i37} true;
  goto $bb24, $bb25;
$bb24:
  assume ($i37 == 1);
  $p33 := $p35;
  goto $bb23;
$bb25:
  assume !(($i37 == 1));
  goto $bb22;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 3096));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0, 4128));
procedure  __VERIFIER_nondet_int()
  returns ($r: i32);
const malloc: ref;
axiom (malloc == $sub.ref(0, 5160));
procedure  malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $malloc($i0);
}
const abort: ref;
axiom (abort == $sub.ref(0, 6192));
procedure  abort();
const inspect_before: ref;
axiom (inspect_before == $sub.ref(0, 7224));
procedure  inspect_before($p0: ref)
{
  var $i1: i1;
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $p6: ref;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i1;
  var $p24: ref;
  var $p5: ref;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i1;
$bb0:
  goto $bb1;
$bb1:
  $i1 := $ne.ref($p0, $0.ref);
  assume {:branchcond $i1} true;
  goto $bb2, $bb4;
$bb2:
  assume ($i1 == 1);
  goto $bb3;
$bb3:
  goto $bb5;
$bb4:
  assume !(($i1 == 1));
  call fail();
  goto $bb3;
$bb5:
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p3 := $load.ref($M.1, $p2);
  $i4 := $ne.ref($p3, $0.ref);
  $p5 := $p0;
  assume {:branchcond $i4} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i4 == 1);
  $p6 := $p0;
  goto $bb9;
$bb7:
  assume !(($i4 == 1));
  goto $bb8;
$bb8:
  goto $bb33;
$bb9:
  goto $bb10;
$bb10:
  $i7 := $ne.ref($p6, $0.ref);
  assume {:branchcond $i7} true;
  goto $bb11, $bb13;
$bb11:
  assume ($i7 == 1);
  goto $bb12;
$bb12:
  goto $bb14;
$bb13:
  assume !(($i7 == 1));
  call fail();
  goto $bb12;
$bb14:
  goto $bb15;
$bb15:
  $p8 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p9 := $load.ref($M.1, $p8);
  $i10 := $ne.ref($p9, $0.ref);
  assume {:branchcond $i10} true;
  goto $bb16, $bb18;
$bb16:
  assume ($i10 == 1);
  goto $bb17;
$bb17:
  goto $bb19;
$bb18:
  assume !(($i10 == 1));
  call fail();
  goto $bb17;
$bb19:
  goto $bb20;
$bb20:
  $p11 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p12 := $load.ref($M.0, $p11);
  $i13 := $ne.ref($p12, $0.ref);
  assume {:branchcond $i13} true;
  goto $bb21, $bb23;
$bb21:
  assume ($i13 == 1);
  goto $bb22;
$bb22:
  goto $bb24;
$bb23:
  assume !(($i13 == 1));
  call fail();
  goto $bb22;
$bb24:
  goto $bb25;
$bb25:
  $p14 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p15 := $load.ref($M.0, $p14);
  $p16 := $add.ref($add.ref($p15, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p17 := $load.ref($M.0, $p16);
  $i18 := $eq.ref($p17, $0.ref);
  assume {:branchcond $i18} true;
  goto $bb26, $bb28;
$bb26:
  assume ($i18 == 1);
  goto $bb27;
$bb27:
  goto $bb29;
$bb28:
  assume !(($i18 == 1));
  call fail();
  goto $bb27;
$bb29:
  goto $bb30;
$bb30:
  $p19 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p20 := $load.ref($M.1, $p19);
  $p21 := $add.ref($add.ref($p20, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p22 := $load.ref($M.1, $p21);
  $i23 := $ne.ref($p22, $0.ref);
  $p24 := $p20;
  assume {:branchcond $i23} true;
  goto $bb31, $bb32;
$bb31:
  assume ($i23 == 1);
  $p6 := $p20;
  goto $bb9;
$bb32:
  assume !(($i23 == 1));
  $p5 := $p24;
  goto $bb8;
$bb33:
  $i25 := $ne.ref($p5, $0.ref);
  assume {:branchcond $i25} true;
  goto $bb34, $bb36;
$bb34:
  assume ($i25 == 1);
  goto $bb35;
$bb35:
  goto $bb37;
$bb36:
  assume !(($i25 == 1));
  call fail();
  goto $bb35;
$bb37:
  goto $bb38;
$bb38:
  $p26 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p27 := $load.ref($M.1, $p26);
  $i28 := $eq.ref($p27, $0.ref);
  assume {:branchcond $i28} true;
  goto $bb39, $bb41;
$bb39:
  assume ($i28 == 1);
  goto $bb40;
$bb40:
  goto $bb42;
$bb41:
  assume !(($i28 == 1));
  call fail();
  goto $bb40;
$bb42:
  goto $bb43;
$bb43:
  $p29 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p30 := $load.ref($M.0, $p29);
  $i31 := $ne.ref($p30, $0.ref);
  assume {:branchcond $i31} true;
  goto $bb44, $bb46;
$bb44:
  assume ($i31 == 1);
  goto $bb45;
$bb45:
  goto $bb47;
$bb46:
  assume !(($i31 == 1));
  call fail();
  goto $bb45;
$bb47:
  goto $bb48;
$bb48:
  $p32 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p33 := $load.ref($M.0, $p32);
  $p34 := $add.ref($add.ref($p33, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p35 := $load.ref($M.0, $p34);
  $i36 := $eq.ref($p35, $0.ref);
  assume {:branchcond $i36} true;
  goto $bb49, $bb51;
$bb49:
  assume ($i36 == 1);
  goto $bb50;
$bb50:
  goto $bb52;
$bb51:
  assume !(($i36 == 1));
  call fail();
  goto $bb50;
$bb52:
  return;
}
const seq_sort_core: ref;
axiom (seq_sort_core == $sub.ref(0, 8256));
procedure  seq_sort_core($p0: ref)
  returns ($r: ref)
{
  var $i1: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref8;
  var $i21: i1;
  var $p22: ref;
  var $p2: ref;
  var $p11: ref;
$bb0:
  $i1 := $ne.ref($p0, $0.ref);
  $p2 := $0.ref;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  $p3, $p4 := $p0, $0.ref;
  goto $bb4;
$bb2:
  assume !(($i1 == 1));
  goto $bb3;
$bb3:
  $p11 := $p2;
  goto $bb7;
$bb4:
  $p5 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p6 := $load.ref($M.1, $p5);
  $i7 := $ne.ref($p6, $0.ref);
  $p8, $p9 := $p4, $p3;
  assume {:branchcond $i7} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i7 == 1);
  $p12 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p13 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p14 := $load.ref($M.0, $p13);
  $p15 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p16 := $load.ref($M.0, $p15);
  call merge_pair($p12, $p14, $p16);
  $p17 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.1 := $store.ref($M.1, $p17, $p4);
  $p18 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p19 := $load.ref($M.1, $p18);
  $p20 := $bitcast.ref.ref($p6);
  call free_($p20);
  $i21 := $ne.ref($p19, $0.ref);
  $p22 := $p3;
  assume {:branchcond $i21} true;
  goto $bb8, $bb9;
$bb6:
  assume !(($i7 == 1));
  $p10 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.1 := $store.ref($M.1, $p10, $p8);
  $p11 := $p9;
  goto $bb7;
$bb7:
  $r := $p11;
  return;
$bb8:
  assume ($i21 == 1);
  $p3, $p4 := $p19, $p3;
  goto $bb4;
$bb9:
  assume !(($i21 == 1));
  $p2 := $p22;
  goto $bb3;
}
const inspect_after: ref;
axiom (inspect_after == $sub.ref(0, 9288));
procedure  inspect_after($p0: ref)
{
  var $i1: i1;
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $p20: ref;
  var $p13: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i1;
$bb0:
  goto $bb1;
$bb1:
  $i1 := $ne.ref($p0, $0.ref);
  assume {:branchcond $i1} true;
  goto $bb2, $bb4;
$bb2:
  assume ($i1 == 1);
  goto $bb3;
$bb3:
  goto $bb5;
$bb4:
  assume !(($i1 == 1));
  call fail();
  goto $bb3;
$bb5:
  goto $bb6;
$bb6:
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p3 := $load.ref($M.1, $p2);
  $i4 := $eq.ref($p3, $0.ref);
  assume {:branchcond $i4} true;
  goto $bb7, $bb9;
$bb7:
  assume ($i4 == 1);
  goto $bb8;
$bb8:
  goto $bb10;
$bb9:
  assume !(($i4 == 1));
  call fail();
  goto $bb8;
$bb10:
  goto $bb11;
$bb11:
  $p5 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p6 := $load.ref($M.0, $p5);
  $i7 := $ne.ref($p6, $0.ref);
  assume {:branchcond $i7} true;
  goto $bb12, $bb14;
$bb12:
  assume ($i7 == 1);
  goto $bb13;
$bb13:
  goto $bb15;
$bb14:
  assume !(($i7 == 1));
  call fail();
  goto $bb13;
$bb15:
  $p8 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p9 := $load.ref($M.0, $p8);
  $p10 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p11 := $load.ref($M.0, $p10);
  $i12 := $ne.ref($p11, $0.ref);
  $p13 := $p9;
  assume {:branchcond $i12} true;
  goto $bb16, $bb17;
$bb16:
  assume ($i12 == 1);
  $p14 := $p9;
  goto $bb19;
$bb17:
  assume !(($i12 == 1));
  goto $bb18;
$bb18:
  goto $bb23;
$bb19:
  goto $bb20;
$bb20:
  $p15 := $add.ref($add.ref($p14, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p16 := $load.ref($M.0, $p15);
  $p17 := $add.ref($add.ref($p16, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p18 := $load.ref($M.0, $p17);
  $i19 := $ne.ref($p18, $0.ref);
  $p20 := $p16;
  assume {:branchcond $i19} true;
  goto $bb21, $bb22;
$bb21:
  assume ($i19 == 1);
  $p14 := $p16;
  goto $bb19;
$bb22:
  assume !(($i19 == 1));
  $p13 := $p20;
  goto $bb18;
$bb23:
  $p21 := $add.ref($add.ref($p13, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p22 := $load.ref($M.0, $p21);
  $i23 := $ne.ref($p22, $0.ref);
  assume {:branchcond $i23} true;
  goto $bb24, $bb25;
$bb24:
  assume ($i23 == 1);
  call fail();
  goto $bb26;
$bb25:
  assume !(($i23 == 1));
  goto $bb26;
$bb26:
  goto $bb27;
$bb27:
  return;
}
const free_: ref;
axiom (free_ == $sub.ref(0, 10320));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const fail: ref;
axiom (fail == $sub.ref(0, 11352));
procedure  fail()
{
$bb0:
  goto $bb1;
$bb1:
  assume true;
  call reach_error();
  call abort();
  assume false;
}
const llvm.dbg.label: ref;
axiom (llvm.dbg.label == $sub.ref(0, 12384));
procedure  llvm.dbg.label($p0: ref);
const merge_pair: ref;
axiom (merge_pair == $sub.ref(0, 13416));
procedure  merge_pair($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $p9: ref;
  var $i10: i1;
  var $i8: i1;
  var $p11: ref;
  var $i12: i1;
  var $p13: ref;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref32;
  var $i20: i32;
  var $i21: i1;
$bb0:
  call $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  call $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  call $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  $M.2 := $store.ref($M.2, $p3, $p0);
  assume true;
  $M.3 := $store.ref($M.3, $p4, $p1);
  assume true;
  $M.3 := $store.ref($M.3, $p5, $p2);
  assume true;
  goto $bb1;
$bb1:
  $p6 := $load.ref($M.3, $p4);
  $i7 := $ne.ref($p6, $0.ref);
  $i8 := 1;
  assume {:branchcond $i7} true;
  goto $bb2, $bb4;
$bb2:
  assume ($i7 == 1);
  goto $bb3;
$bb3:
  assume {:branchcond $i8} true;
  goto $bb5, $bb6;
$bb4:
  assume !(($i7 == 1));
  $p9 := $load.ref($M.3, $p5);
  $i10 := $ne.ref($p9, $0.ref);
  $i8 := $i10;
  goto $bb3;
$bb5:
  assume ($i8 == 1);
  $p11 := $load.ref($M.3, $p5);
  $i12 := $ne.ref($p11, $0.ref);
  assume {:branchcond $i12} true;
  goto $bb7, $bb8;
$bb6:
  assume !(($i8 == 1));
  return;
$bb7:
  assume ($i12 == 1);
  $p13 := $load.ref($M.3, $p4);
  $i14 := $ne.ref($p13, $0.ref);
  assume {:branchcond $i14} true;
  goto $bb10, $bb11;
$bb8:
  assume !(($i12 == 1));
  goto $bb9;
$bb9:
  call merge_single_node($p3, $p4);
  goto $bb15;
$bb10:
  assume ($i14 == 1);
  $p15 := $load.ref($M.3, $p4);
  $p16 := $add.ref($add.ref($p15, $mul.ref(0, 16)), $mul.ref(8, 1));
  $i17 := $load.i32($M.1, $p16);
  $p18 := $load.ref($M.3, $p5);
  $p19 := $add.ref($add.ref($p18, $mul.ref(0, 16)), $mul.ref(8, 1));
  $i20 := $load.i32($M.1, $p19);
  $i21 := $slt.i32($i17, $i20);
  assume {:branchcond $i21} true;
  goto $bb13, $bb14;
$bb11:
  assume !(($i14 == 1));
  goto $bb12;
$bb12:
  call merge_single_node($p3, $p5);
  goto $bb15;
$bb13:
  assume ($i21 == 1);
  goto $bb9;
$bb14:
  assume !(($i21 == 1));
  goto $bb12;
$bb15:
  goto $bb1;
}
const merge_single_node: ref;
axiom (merge_single_node == $sub.ref(0, 14448));
procedure  merge_single_node($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
$bb0:
  $p2 := $load.ref($M.3, $p1);
  $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p4 := $load.ref($M.0, $p3);
  $M.3 := $store.ref($M.3, $p1, $p4);
  $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p5, $0.ref);
  $p6 := $load.ref($M.2, $p0);
  $M.0 := $store.ref($M.0, $p6, $p2);
  $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.2 := $store.ref($M.2, $p0, $p2);
  return;
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 15480));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 16512));
procedure  __SMACK_static_init()
{
$bb0:
  return;
}
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
