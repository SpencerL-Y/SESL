// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/smack ../svcomp/MemSafety-LinkedLists-C//sll-optional-1.c -ll ../svcomp/MemSafety-LinkedLists-C//sll-optional-1_IR.ll --bpl ../svcomp/MemSafety-LinkedLists-C//sll-optional-1.bpl -t --sh-mem-leak

const reach_error: ref;
axiom (reach_error == $sub.ref(0, 1032));
procedure  reach_error()
{
$bb0:
  return;
}
const main: ref;
axiom (main == $sub.ref(0, 2064));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $p0: ref8;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref32;
  var $p6: ref8;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref32;
  var $p15: ref;
  var $p16: ref32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref8;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref32;
  var $p30: ref8;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref32;
  var $p39: ref;
  var $p40: ref32;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref32;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i1;
  var $p58: ref;
  var $p59: ref;
  var $i60: i1;
  var $p57: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i1;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref32;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref8;
  var $p74: ref8;
  var $i75: i1;
$bb0:
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  call $p0 := malloc(24);
  $p1 := $bitcast.ref.ref($p0);
  $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p2, $0.ref);
  call $i3 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
  $i4 := $ne.i32($i3, 0);
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1);
  $p5 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
  $M.1 := $store.i32($M.1, $p5, 2);
  call $p6 := malloc(24);
  $p7 := $bitcast.ref.ref($p6);
  $p8 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
  $M.2 := $store.ref($M.2, $p8, $p6);
  $p9 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
  $p10 := $load.ref($M.2, $p9);
  $p11 := $add.ref($add.ref($p10, $mul.ref(0, 24)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p11, $0.ref);
  goto $bb3;
$bb2:
  assume !(($i4 == 1));
  call $i12 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
  $i13 := $ne.i32($i12, 0);
  assume {:branchcond $i13} true;
  goto $bb4, $bb5;
$bb3:
  call $i18 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i18);
  $i19 := $ne.i32($i18, 0);
  assume {:branchcond $i19} true;
  goto $bb7, $bb8;
$bb4:
  assume ($i13 == 1);
  $p14 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
  $M.1 := $store.i32($M.1, $p14, 1);
  $p15 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
  $M.2 := $store.ref($M.2, $p15, $p0);
  goto $bb6;
$bb5:
  assume !(($i13 == 1));
  $p16 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
  $M.1 := $store.i32($M.1, $p16, 0);
  $p17 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
  $M.2 := $store.ref($M.2, $p17, $p0);
  goto $bb6;
$bb6:
  goto $bb3;
$bb7:
  assume ($i19 == 1);
  $p20 := $p0;
  goto $bb10;
$bb8:
  assume !(($i19 == 1));
  goto $bb9;
$bb9:
  $i44 := $ne.ref($p1, $0.ref);
  assume {:branchcond $i44} true;
  goto $bb19, $bb20;
$bb10:
  call $p21 := malloc(24);
  $p22 := $bitcast.ref.ref($p21);
  $p23 := $add.ref($add.ref($p20, $mul.ref(0, 24)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p23, $p21);
  $p24 := $add.ref($add.ref($p20, $mul.ref(0, 24)), $mul.ref(0, 1));
  $p25 := $load.ref($M.0, $p24);
  $p26 := $add.ref($add.ref($p25, $mul.ref(0, 24)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p26, $0.ref);
  call $i27 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i27);
  $i28 := $ne.i32($i27, 0);
  assume {:branchcond $i28} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i28 == 1);
  $p29 := $add.ref($add.ref($p25, $mul.ref(0, 24)), $mul.ref(16, 1));
  $M.1 := $store.i32($M.1, $p29, 2);
  call $p30 := malloc(24);
  $p31 := $bitcast.ref.ref($p30);
  $p32 := $add.ref($add.ref($p25, $mul.ref(0, 24)), $mul.ref(8, 1));
  $M.2 := $store.ref($M.2, $p32, $p30);
  $p33 := $add.ref($add.ref($p25, $mul.ref(0, 24)), $mul.ref(8, 1));
  $p34 := $load.ref($M.2, $p33);
  $p35 := $add.ref($add.ref($p34, $mul.ref(0, 24)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p35, $0.ref);
  goto $bb13;
$bb12:
  assume !(($i28 == 1));
  call $i36 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i36);
  $i37 := $ne.i32($i36, 0);
  assume {:branchcond $i37} true;
  goto $bb14, $bb15;
$bb13:
  call $i42 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i42);
  $i43 := $ne.i32($i42, 0);
  assume {:branchcond $i43} true;
  goto $bb17, $bb18;
$bb14:
  assume ($i37 == 1);
  $p38 := $add.ref($add.ref($p25, $mul.ref(0, 24)), $mul.ref(16, 1));
  $M.1 := $store.i32($M.1, $p38, 1);
  $p39 := $add.ref($add.ref($p25, $mul.ref(0, 24)), $mul.ref(8, 1));
  $M.2 := $store.ref($M.2, $p39, $p25);
  goto $bb16;
$bb15:
  assume !(($i37 == 1));
  $p40 := $add.ref($add.ref($p25, $mul.ref(0, 24)), $mul.ref(16, 1));
  $M.1 := $store.i32($M.1, $p40, 0);
  $p41 := $add.ref($add.ref($p25, $mul.ref(0, 24)), $mul.ref(8, 1));
  $M.2 := $store.ref($M.2, $p41, $p25);
  goto $bb16;
$bb16:
  goto $bb13;
$bb17:
  assume ($i43 == 1);
  $p20 := $p25;
  goto $bb10;
$bb18:
  assume !(($i43 == 1));
  goto $bb9;
$bb19:
  assume ($i44 == 1);
  $p45 := $p0;
  goto $bb22;
$bb20:
  assume !(($i44 == 1));
  goto $bb21;
$bb21:
  $i64 := $ne.ref($p1, $0.ref);
  assume {:branchcond $i64} true;
  goto $bb37, $bb38;
$bb22:
  goto $bb23;
$bb23:
  $p46 := $add.ref($add.ref($p45, $mul.ref(0, 24)), $mul.ref(16, 1));
  $i47 := $load.i32($M.1, $p46);
  $i48 := $eq.i32($i47, 2);
  assume {:branchcond $i48} true;
  goto $bb24, $bb25;
$bb24:
  assume ($i48 == 1);
  $p49 := $add.ref($add.ref($p45, $mul.ref(0, 24)), $mul.ref(8, 1));
  $p50 := $load.ref($M.2, $p49);
  $i51 := $ne.ref($p50, $p45);
  assume {:branchcond $i51} true;
  goto $bb27, $bb28;
$bb25:
  assume !(($i48 == 1));
  goto $bb26;
$bb26:
  $p58 := $add.ref($add.ref($p45, $mul.ref(0, 24)), $mul.ref(8, 1));
  $p59 := $load.ref($M.2, $p58);
  $i60 := $eq.ref($p59, $p45);
  $p57 := $p45;
  assume {:branchcond $i60} true;
  goto $bb32, $bb33;
$bb27:
  assume ($i51 == 1);
  $p52 := $add.ref($add.ref($p45, $mul.ref(0, 24)), $mul.ref(8, 1));
  $p53 := $load.ref($M.2, $p52);
  $p54 := $add.ref($add.ref($p53, $mul.ref(0, 24)), $mul.ref(0, 1));
  $p55 := $load.ref($M.0, $p54);
  $i56 := $eq.ref($p55, $0.ref);
  $p57 := $p45;
  assume {:branchcond $i56} true;
  goto $bb29, $bb31;
$bb28:
  assume !(($i51 == 1));
  goto $bb26;
$bb29:
  assume ($i56 == 1);
  goto $bb30;
$bb30:
  goto $bb34;
$bb31:
  assume !(($i56 == 1));
  goto $bb26;
$bb32:
  assume ($i60 == 1);
  goto $bb30;
$bb33:
  assume !(($i60 == 1));
  call reach_error();
  call abort();
  assume false;
$bb34:
  $p61 := $add.ref($add.ref($p57, $mul.ref(0, 24)), $mul.ref(0, 1));
  $p62 := $load.ref($M.0, $p61);
  $i63 := $ne.ref($p62, $0.ref);
  assume {:branchcond $i63} true;
  goto $bb35, $bb36;
$bb35:
  assume ($i63 == 1);
  $p45 := $p62;
  goto $bb22;
$bb36:
  assume !(($i63 == 1));
  goto $bb21;
$bb37:
  assume ($i64 == 1);
  $p65 := $p0;
  goto $bb40;
$bb38:
  assume !(($i64 == 1));
  goto $bb39;
$bb39:
  $r := 0;
  return;
$bb40:
  $p66 := $add.ref($add.ref($p65, $mul.ref(0, 24)), $mul.ref(0, 1));
  $p67 := $load.ref($M.0, $p66);
  $p68 := $add.ref($add.ref($p65, $mul.ref(0, 24)), $mul.ref(16, 1));
  $i69 := $load.i32($M.1, $p68);
  $i70 := $eq.i32($i69, 2);
  assume {:branchcond $i70} true;
  goto $bb41, $bb42;
$bb41:
  assume ($i70 == 1);
  $p71 := $add.ref($add.ref($p65, $mul.ref(0, 24)), $mul.ref(8, 1));
  $p72 := $load.ref($M.2, $p71);
  $p73 := $bitcast.ref.ref($p72);
  call free_($p73);
  goto $bb43;
$bb42:
  assume !(($i70 == 1));
  goto $bb43;
$bb43:
  $p74 := $bitcast.ref.ref($p65);
  call free_($p74);
  $i75 := $ne.ref($p67, $0.ref);
  assume {:branchcond $i75} true;
  goto $bb44, $bb45;
$bb44:
  assume ($i75 == 1);
  $p65 := $p67;
  goto $bb40;
$bb45:
  assume !(($i75 == 1));
  goto $bb39;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 3096));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const malloc: ref;
axiom (malloc == $sub.ref(0, 4128));
procedure  malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $malloc($i0);
}
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0, 5160));
procedure  __VERIFIER_nondet_int()
  returns ($r: i32);
const abort: ref;
axiom (abort == $sub.ref(0, 6192));
procedure  abort();
const free_: ref;
axiom (free_ == $sub.ref(0, 7224));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 8256));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 9288));
procedure  __SMACK_static_init()
{
$bb0:
  return;
}
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
