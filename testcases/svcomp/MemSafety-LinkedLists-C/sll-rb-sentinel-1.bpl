// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/smack ../svcomp/MemSafety-LinkedLists-C//sll-rb-sentinel-1.c -ll ../svcomp/MemSafety-LinkedLists-C//sll-rb-sentinel-1_IR.ll --bpl ../svcomp/MemSafety-LinkedLists-C//sll-rb-sentinel-1.bpl -t --sh-mem-leak

const reach_error: ref;
axiom (reach_error == $sub.ref(0, 1032));
procedure  reach_error()
{
$bb0:
  return;
}
const main: ref;
axiom (main == $sub.ref(0, 2064));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $p0: ref8;
  var $p1: ref;
  var $p2: ref32;
  var $p3: ref;
  var $p4: ref8;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref8;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref32;
  var $p21: ref32;
  var $p22: ref8;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref32;
  var $p20: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i1;
  var $p32: ref32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref32;
  var $i38: i32;
  var $i39: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i1;
  var $p44: ref32;
  var $i45: i32;
  var $i46: i1;
  var $p40: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i1;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref32;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref8;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref8;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref8;
  var $p61: ref;
  var $i65: i1;
  var $p66: ref8;
$bb0:
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  call $p0 := malloc(16);
  $p1 := $bitcast.ref.ref($p0);
  $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.0 := $store.i32($M.0, $p2, 1);
  $p3 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.1 := $store.ref($M.1, $p3, $0.ref);
  call $p4 := malloc(16);
  $p5 := $bitcast.ref.ref($p4);
  $p6 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.1 := $store.ref($M.1, $p6, $p0);
  $p7 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.0 := $store.i32($M.0, $p7, 1);
  call $i8 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i8);
  $i9 := $ne.i32($i8, 0);
  assume {:branchcond $i9} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i9 == 1);
  $p10 := $p4;
  goto $bb4;
$bb2:
  assume !(($i9 == 1));
  goto $bb3;
$bb3:
  goto $bb10;
$bb4:
  call $p11 := malloc(16);
  $p12 := $bitcast.ref.ref($p11);
  $p13 := $add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.1 := $store.ref($M.1, $p13, $p11);
  $p14 := $add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p15 := $load.ref($M.1, $p14);
  $p16 := $add.ref($add.ref($p15, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.1 := $store.ref($M.1, $p16, $p0);
  call $i17 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i17);
  $i18 := $ne.i32($i17, 0);
  assume {:branchcond $i18} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i18 == 1);
  $p19 := $add.ref($add.ref($p15, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.0 := $store.i32($M.0, $p19, 1);
  $p20 := $p15;
  goto $bb7;
$bb6:
  assume !(($i18 == 1));
  $p21 := $add.ref($add.ref($p15, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.0 := $store.i32($M.0, $p21, 0);
  call $p22 := malloc(16);
  $p23 := $bitcast.ref.ref($p22);
  $p24 := $add.ref($add.ref($p15, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.1 := $store.ref($M.1, $p24, $p22);
  $p25 := $add.ref($add.ref($p15, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p26 := $load.ref($M.1, $p25);
  $p27 := $add.ref($add.ref($p26, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.1 := $store.ref($M.1, $p27, $p0);
  $p28 := $add.ref($add.ref($p26, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.0 := $store.i32($M.0, $p28, 1);
  $p20 := $p26;
  goto $bb7;
$bb7:
  call $i29 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i29);
  $i30 := $ne.i32($i29, 0);
  assume {:branchcond $i30} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i30 == 1);
  $p10 := $p20;
  goto $bb4;
$bb9:
  assume !(($i30 == 1));
  goto $bb3;
$bb10:
  $i31 := $ne.ref($p1, $p5);
  assume {:branchcond $i31} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i31 == 1);
  goto $bb13;
$bb12:
  assume !(($i31 == 1));
  call reach_error();
  call abort();
  assume false;
$bb13:
  goto $bb14;
$bb14:
  $p32 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(8, 1));
  $i33 := $load.i32($M.0, $p32);
  $i34 := $eq.i32(1, $i33);
  assume {:branchcond $i34} true;
  goto $bb15, $bb16;
$bb15:
  assume ($i34 == 1);
  goto $bb17;
$bb16:
  assume !(($i34 == 1));
  call reach_error();
  call abort();
  assume false;
$bb17:
  $i35 := $ne.ref($p1, $p5);
  assume {:branchcond $i35} true;
  goto $bb18, $bb19;
$bb18:
  assume ($i35 == 1);
  $p36 := $p4;
  goto $bb21;
$bb19:
  assume !(($i35 == 1));
  goto $bb20;
$bb20:
  $i50 := $ne.ref($p1, $p5);
  assume {:branchcond $i50} true;
  goto $bb35, $bb36;
$bb21:
  $p37 := $add.ref($add.ref($p36, $mul.ref(0, 16)), $mul.ref(8, 1));
  $i38 := $load.i32($M.0, $p37);
  $i39 := $eq.i32(0, $i38);
  $p40 := $p36;
  assume {:branchcond $i39} true;
  goto $bb22, $bb23;
$bb22:
  assume ($i39 == 1);
  $p41 := $add.ref($add.ref($p36, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p42 := $load.ref($M.1, $p41);
  goto $bb25;
$bb23:
  assume !(($i39 == 1));
  goto $bb24;
$bb24:
  $p47 := $add.ref($add.ref($p40, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p48 := $load.ref($M.1, $p47);
  $i49 := $ne.ref($p1, $p48);
  assume {:branchcond $i49} true;
  goto $bb33, $bb34;
$bb25:
  $i43 := $ne.ref($p1, $p42);
  assume {:branchcond $i43} true;
  goto $bb26, $bb27;
$bb26:
  assume ($i43 == 1);
  goto $bb28;
$bb27:
  assume !(($i43 == 1));
  call reach_error();
  call abort();
  assume false;
$bb28:
  goto $bb29;
$bb29:
  $p44 := $add.ref($add.ref($p42, $mul.ref(0, 16)), $mul.ref(8, 1));
  $i45 := $load.i32($M.0, $p44);
  $i46 := $eq.i32(1, $i45);
  assume {:branchcond $i46} true;
  goto $bb30, $bb31;
$bb30:
  assume ($i46 == 1);
  goto $bb32;
$bb31:
  assume !(($i46 == 1));
  call reach_error();
  call abort();
  assume false;
$bb32:
  $p40 := $p42;
  goto $bb24;
$bb33:
  assume ($i49 == 1);
  $p36 := $p48;
  goto $bb21;
$bb34:
  assume !(($i49 == 1));
  goto $bb20;
$bb35:
  assume ($i50 == 1);
  $p51 := $p4;
  goto $bb38;
$bb36:
  assume !(($i50 == 1));
  goto $bb37;
$bb37:
  $p66 := $bitcast.ref.ref($p1);
  call free_($p66);
  $r := 0;
  return;
$bb38:
  $p52 := $add.ref($add.ref($p51, $mul.ref(0, 16)), $mul.ref(8, 1));
  $i53 := $load.i32($M.0, $p52);
  $i54 := $eq.i32(0, $i53);
  assume {:branchcond $i54} true;
  goto $bb39, $bb40;
$bb39:
  assume ($i54 == 1);
  $p55 := $add.ref($add.ref($p51, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p56 := $load.ref($M.1, $p55);
  $p57 := $bitcast.ref.ref($p51);
  call free_($p57);
  $p58 := $add.ref($add.ref($p56, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p59 := $load.ref($M.1, $p58);
  $p60 := $bitcast.ref.ref($p56);
  call free_($p60);
  $p61 := $p59;
  goto $bb41;
$bb40:
  assume !(($i54 == 1));
  $p62 := $add.ref($add.ref($p51, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p63 := $load.ref($M.1, $p62);
  $p64 := $bitcast.ref.ref($p51);
  call free_($p64);
  $p61 := $p63;
  goto $bb41;
$bb41:
  $i65 := $ne.ref($p1, $p61);
  assume {:branchcond $i65} true;
  goto $bb42, $bb43;
$bb42:
  assume ($i65 == 1);
  $p51 := $p61;
  goto $bb38;
$bb43:
  assume !(($i65 == 1));
  goto $bb37;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 3096));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const malloc: ref;
axiom (malloc == $sub.ref(0, 4128));
procedure  malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $malloc($i0);
}
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0, 5160));
procedure  __VERIFIER_nondet_int()
  returns ($r: i32);
const abort: ref;
axiom (abort == $sub.ref(0, 6192));
procedure  abort();
const free_: ref;
axiom (free_ == $sub.ref(0, 7224));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 8256));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 9288));
procedure  __SMACK_static_init()
{
$bb0:
  return;
}
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
