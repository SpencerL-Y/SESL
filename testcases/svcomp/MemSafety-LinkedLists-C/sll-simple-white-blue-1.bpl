// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/smack ../svcomp/MemSafety-LinkedLists-C//sll-simple-white-blue-1.c -ll ../svcomp/MemSafety-LinkedLists-C//sll-simple-white-blue-1_IR.ll --bpl ../svcomp/MemSafety-LinkedLists-C//sll-simple-white-blue-1.bpl -t --sh-mem-leak

const reach_error: ref;
axiom (reach_error == $sub.ref(0, 1032));
procedure  reach_error()
{
$bb0:
  return;
}
const main: ref;
axiom (main == $sub.ref(0, 2064));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $p0: ref8;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref32;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref8;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref8;
  var $p19: ref;
  var $p20: ref32;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i1;
  var $p37: ref;
  var $p26: ref;
  var $p31: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref8;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref32;
  var $p44: ref;
  var $p22: ref;
  var $p45: ref32;
  var $i46: i32;
  var $i47: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref32;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p48: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref32;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $i65: i1;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref8;
  var $i71: i1;
$bb0:
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  call $p0 := malloc(16);
  $p1 := $bitcast.ref.ref($p0);
  $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p2, $0.ref);
  $p3 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.1 := $store.i32($M.1, $p3, 0);
  call $i4 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
  $i5 := $ne.i32($i4, 0);
  assume {:branchcond $i5} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i5 == 1);
  $p6 := $p0;
  goto $bb4;
$bb2:
  assume !(($i5 == 1));
  goto $bb3;
$bb3:
  call $i16 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i16);
  $i17 := $ne.i32($i16, 0);
  assume {:branchcond $i17} true;
  goto $bb7, $bb8;
$bb4:
  call $p7 := malloc(16);
  $p8 := $bitcast.ref.ref($p7);
  $p9 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p9, $p7);
  $p10 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p11 := $load.ref($M.0, $p10);
  $p12 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.1 := $store.i32($M.1, $p12, 0);
  $p13 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p13, $0.ref);
  call $i14 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i14);
  $i15 := $ne.i32($i14, 0);
  assume {:branchcond $i15} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i15 == 1);
  $p6 := $p11;
  goto $bb4;
$bb6:
  assume !(($i15 == 1));
  goto $bb3;
$bb7:
  assume ($i17 == 1);
  call $p18 := malloc(16);
  $p19 := $bitcast.ref.ref($p18);
  $p20 := $add.ref($add.ref($p19, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.1 := $store.i32($M.1, $p20, 1);
  $p21 := $add.ref($add.ref($p19, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p21, $p0);
  $p22 := $p18;
  goto $bb9;
$bb8:
  assume !(($i17 == 1));
  $p23 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p24 := $load.ref($M.0, $p23);
  $i25 := $ne.ref($p24, $0.ref);
  $p26 := $p0;
  assume {:branchcond $i25} true;
  goto $bb10, $bb11;
$bb9:
  $p45 := $add.ref($add.ref($p22, $mul.ref(0, 16)), $mul.ref(8, 1));
  $i46 := $load.i32($M.1, $p45);
  $i47 := $ne.i32($i46, 1);
  $p48 := $p22;
  assume {:branchcond $i47} true;
  goto $bb19, $bb20;
$bb10:
  assume ($i25 == 1);
  $p27 := $p0;
  goto $bb13;
$bb11:
  assume !(($i25 == 1));
  goto $bb12;
$bb12:
  $p31 := $p26;
  goto $bb16;
$bb13:
  call $i28 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i28);
  $i29 := $ne.i32($i28, 0);
  $p30 := $p27;
  assume {:branchcond $i29} true;
  goto $bb14, $bb15;
$bb14:
  assume ($i29 == 1);
  $p31 := $p30;
  goto $bb16;
$bb15:
  assume !(($i29 == 1));
  $p32 := $add.ref($add.ref($p27, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p33 := $load.ref($M.0, $p32);
  $p34 := $add.ref($add.ref($p33, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p35 := $load.ref($M.0, $p34);
  $i36 := $ne.ref($p35, $0.ref);
  $p37 := $p33;
  assume {:branchcond $i36} true;
  goto $bb17, $bb18;
$bb16:
  $p38 := $add.ref($add.ref($p31, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p39 := $load.ref($M.0, $p38);
  call $p40 := malloc(16);
  $p41 := $bitcast.ref.ref($p40);
  $p42 := $add.ref($add.ref($p31, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p42, $p40);
  $p43 := $add.ref($add.ref($p31, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.1 := $store.i32($M.1, $p43, 1);
  $p44 := $add.ref($add.ref($p31, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p44, $p39);
  $p22 := $p0;
  goto $bb9;
$bb17:
  assume ($i36 == 1);
  $p27 := $p33;
  goto $bb13;
$bb18:
  assume !(($i36 == 1));
  $p26 := $p37;
  goto $bb12;
$bb19:
  assume ($i47 == 1);
  $p49 := $p22;
  goto $bb22;
$bb20:
  assume !(($i47 == 1));
  goto $bb21;
$bb21:
  $p56 := $add.ref($add.ref($p48, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p57 := $load.ref($M.0, $p56);
  $i58 := $ne.ref($p57, $0.ref);
  assume {:branchcond $i58} true;
  goto $bb25, $bb26;
$bb22:
  $p50 := $add.ref($add.ref($p49, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p51 := $load.ref($M.0, $p50);
  $p52 := $add.ref($add.ref($p51, $mul.ref(0, 16)), $mul.ref(8, 1));
  $i53 := $load.i32($M.1, $p52);
  $i54 := $ne.i32($i53, 1);
  $p55 := $p51;
  assume {:branchcond $i54} true;
  goto $bb23, $bb24;
$bb23:
  assume ($i54 == 1);
  $p49 := $p51;
  goto $bb22;
$bb24:
  assume !(($i54 == 1));
  $p48 := $p55;
  goto $bb21;
$bb25:
  assume ($i58 == 1);
  $p59 := $p57;
  goto $bb28;
$bb26:
  assume !(($i58 == 1));
  goto $bb27;
$bb27:
  $i66 := $ne.ref($p22, $0.ref);
  assume {:branchcond $i66} true;
  goto $bb35, $bb36;
$bb28:
  $p60 := $add.ref($add.ref($p59, $mul.ref(0, 16)), $mul.ref(8, 1));
  $i61 := $load.i32($M.1, $p60);
  $i62 := $eq.i32($i61, 1);
  assume {:branchcond $i62} true;
  goto $bb29, $bb30;
$bb29:
  assume ($i62 == 1);
  goto $bb31;
$bb30:
  assume !(($i62 == 1));
  $p63 := $add.ref($add.ref($p59, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p64 := $load.ref($M.0, $p63);
  $i65 := $ne.ref($p64, $0.ref);
  assume {:branchcond $i65} true;
  goto $bb33, $bb34;
$bb31:
  call reach_error();
  call abort();
  assume false;
$bb32:
  assume false;
$bb33:
  assume ($i65 == 1);
  $p59 := $p64;
  goto $bb28;
$bb34:
  assume !(($i65 == 1));
  goto $bb27;
$bb35:
  assume ($i66 == 1);
  $p67 := $p22;
  goto $bb38;
$bb36:
  assume !(($i66 == 1));
  goto $bb37;
$bb37:
  $r := 0;
  return;
$bb38:
  $p68 := $add.ref($add.ref($p67, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p69 := $load.ref($M.0, $p68);
  $p70 := $bitcast.ref.ref($p67);
  call free_($p70);
  $i71 := $ne.ref($p69, $0.ref);
  assume {:branchcond $i71} true;
  goto $bb39, $bb40;
$bb39:
  assume ($i71 == 1);
  $p67 := $p69;
  goto $bb38;
$bb40:
  assume !(($i71 == 1));
  goto $bb37;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 3096));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const malloc: ref;
axiom (malloc == $sub.ref(0, 4128));
procedure  malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $malloc($i0);
}
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0, 5160));
procedure  __VERIFIER_nondet_int()
  returns ($r: i32);
const abort: ref;
axiom (abort == $sub.ref(0, 6192));
procedure  abort();
const free_: ref;
axiom (free_ == $sub.ref(0, 7224));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 8256));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 9288));
procedure  __SMACK_static_init()
{
$bb0:
  return;
}
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
