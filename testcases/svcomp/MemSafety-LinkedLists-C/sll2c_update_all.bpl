// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/smack ../svcomp/MemSafety-LinkedLists-C//sll2c_update_all.c -ll ../svcomp/MemSafety-LinkedLists-C//sll2c_update_all_IR.ll --bpl ../svcomp/MemSafety-LinkedLists-C//sll2c_update_all.bpl -t --sh-mem-leak

const reach_error: ref;
axiom (reach_error == $sub.ref(0, 1032));
procedure  reach_error()
{
$bb0:
  return;
}
const myexit: ref;
axiom (myexit == $sub.ref(0, 2064));
procedure  myexit($i0: i32)
{
$bb0:
  call {:cexpr "myexit:arg:s"} boogie_si_record_i32($i0);
  goto $bb1;
$bb1:
  assume true;
  goto $bb1;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 3096));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const llvm.dbg.label: ref;
axiom (llvm.dbg.label == $sub.ref(0, 4128));
procedure  llvm.dbg.label($p0: ref);
const node_create: ref;
axiom (node_create == $sub.ref(0, 5160));
procedure  node_create($i0: i32)
  returns ($r: ref)
{
  var $p1: ref8;
  var $p2: ref;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref32;
$bb0:
  call {:cexpr "node_create:arg:data"} boogie_si_record_i32($i0);
  call $p1 := malloc(16);
  $p2 := $bitcast.ref.ref($p1);
  $i3 := $eq.ref($0.ref, $p2);
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  call myexit(1);
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  goto $bb3;
$bb3:
  $p4 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p4, $0.ref);
  $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.1 := $store.i32($M.1, $p5, $i0);
  $r := $p2;
  return;
}
const malloc: ref;
axiom (malloc == $sub.ref(0, 6192));
procedure  malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $malloc($i0);
}
const sll_circular_create: ref;
axiom (sll_circular_create == $sub.ref(0, 7224));
procedure  sll_circular_create($i0: i32, $i1: i32)
  returns ($r: ref)
{
  var $p2: ref;
  var $i3: i1;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p4: ref;
  var $p12: ref;
$bb0:
  call {:cexpr "sll_circular_create:arg:len"} boogie_si_record_i32($i0);
  call {:cexpr "sll_circular_create:arg:data"} boogie_si_record_i32($i1);
  call $p2 := node_create($i1);
  call {:cexpr "sll_circular_create:arg:len"} boogie_si_record_i32($i0);
  $i3 := $sgt.i32($i0, 1);
  $p4 := $p2;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  $i5, $p6 := $i0, $p2;
  goto $bb4;
$bb2:
  assume !(($i3 == 1));
  goto $bb3;
$bb3:
  $p12 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p12, $p4);
  $r := $p4;
  return;
$bb4:
  call $p7 := node_create($i1);
  $p8 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p8, $p6);
  $i9 := $add.i32($i5, $sub.i32(0, 1));
  call {:cexpr "len"} boogie_si_record_i32($i9);
  $i10 := $sgt.i32($i9, 1);
  $p11 := $p7;
  assume {:branchcond $i10} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i10 == 1);
  $i5, $p6 := $i9, $p7;
  goto $bb4;
$bb6:
  assume !(($i10 == 1));
  $p4 := $p11;
  goto $bb3;
}
const sll_circular_destroy: ref;
axiom (sll_circular_destroy == $sub.ref(0, 8256));
procedure  sll_circular_destroy($p0: ref)
{
  var $i1: i1;
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref8;
  var $i9: i1;
  var $p10: ref8;
$bb0:
  $i1 := $ne.ref($0.ref, $p0);
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p3 := $load.ref($M.0, $p2);
  $i4 := $ne.ref($p3, $p0);
  assume {:branchcond $i4} true;
  goto $bb4, $bb5;
$bb2:
  assume !(($i1 == 1));
  goto $bb3;
$bb3:
  return;
$bb4:
  assume ($i4 == 1);
  $p5 := $p3;
  goto $bb7;
$bb5:
  assume !(($i4 == 1));
  goto $bb6;
$bb6:
  $p10 := $bitcast.ref.ref($p0);
  call free_($p10);
  goto $bb3;
$bb7:
  $p6 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p7 := $load.ref($M.0, $p6);
  $p8 := $bitcast.ref.ref($p5);
  call free_($p8);
  $i9 := $ne.ref($p7, $p0);
  assume {:branchcond $i9} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i9 == 1);
  $p5 := $p7;
  goto $bb7;
$bb9:
  assume !(($i9 == 1));
  goto $bb6;
}
const free_: ref;
axiom (free_ == $sub.ref(0, 9288));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const sll_circular_get_data_at: ref;
axiom (sll_circular_get_data_at == $sub.ref(0, 10320));
procedure  sll_circular_get_data_at($p0: ref, $i1: i32)
  returns ($r: i32)
{
  var $i2: i1;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p3: ref;
  var $p11: ref32;
  var $i12: i32;
$bb0:
  call {:cexpr "sll_circular_get_data_at:arg:index"} boogie_si_record_i32($i1);
  $i2 := $sgt.i32($i1, 0);
  $p3 := $p0;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  $p4, $i5 := $p0, $i1;
  goto $bb4;
$bb2:
  assume !(($i2 == 1));
  goto $bb3;
$bb3:
  $p11 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
  $i12 := $load.i32($M.1, $p11);
  $r := $i12;
  return;
$bb4:
  $p6 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p7 := $load.ref($M.0, $p6);
  $i8 := $add.i32($i5, $sub.i32(0, 1));
  call {:cexpr "index"} boogie_si_record_i32($i8);
  $i9 := $sgt.i32($i8, 0);
  $p10 := $p7;
  assume {:branchcond $i9} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i9 == 1);
  $p4, $i5 := $p7, $i8;
  goto $bb4;
$bb6:
  assume !(($i9 == 1));
  $p3 := $p10;
  goto $bb3;
}
const sll_circular_update_at: ref;
axiom (sll_circular_update_at == $sub.ref(0, 11352));
procedure  sll_circular_update_at($p0: ref, $i1: i32, $i2: i32)
{
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p4: ref;
  var $p12: ref32;
$bb0:
  call {:cexpr "sll_circular_update_at:arg:data"} boogie_si_record_i32($i1);
  call {:cexpr "sll_circular_update_at:arg:index"} boogie_si_record_i32($i2);
  $i3 := $sgt.i32($i2, 0);
  $p4 := $p0;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  $p5, $i6 := $p0, $i2;
  goto $bb4;
$bb2:
  assume !(($i3 == 1));
  goto $bb3;
$bb3:
  $p12 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.1 := $store.i32($M.1, $p12, $i1);
  return;
$bb4:
  $p7 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p8 := $load.ref($M.0, $p7);
  $i9 := $add.i32($i6, $sub.i32(0, 1));
  call {:cexpr "index"} boogie_si_record_i32($i9);
  $i10 := $sgt.i32($i9, 0);
  $p11 := $p8;
  assume {:branchcond $i10} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i10 == 1);
  $p5, $i6 := $p8, $i9;
  goto $bb4;
$bb6:
  assume !(($i10 == 1));
  $p4 := $p11;
  goto $bb3;
}
const main: ref;
axiom (main == $sub.ref(0, 12384));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
$bb0:
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  call $p0 := sll_circular_create(2, 1);
  goto $bb1;
$bb1:
  call sll_circular_update_at($p0, 2, 0);
  goto $bb2;
$bb2:
  call sll_circular_update_at($p0, 3, 1);
  goto $bb3;
$bb3:
  goto $bb4;
$bb4:
  call $i1 := sll_circular_get_data_at($p0, 0);
  $i2 := $ne.i32(2, $i1);
  assume {:branchcond $i2} true;
  goto $bb5, $bb7;
$bb5:
  assume ($i2 == 1);
  goto $bb6;
$bb6:
  goto $bb8;
$bb7:
  assume !(($i2 == 1));
  goto $bb9;
$bb8:
  assume true;
  call reach_error();
  call abort();
  assume false;
$bb9:
  call $i3 := sll_circular_get_data_at($p0, 1);
  $i4 := $ne.i32(3, $i3);
  assume {:branchcond $i4} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i4 == 1);
  goto $bb6;
$bb11:
  assume !(($i4 == 1));
  goto $bb12;
$bb12:
  call sll_circular_destroy($p0);
  $r := 0;
  return;
}
const abort: ref;
axiom (abort == $sub.ref(0, 13416));
procedure  abort();
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 14448));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 15480));
procedure  __SMACK_static_init()
{
$bb0:
  return;
}
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
