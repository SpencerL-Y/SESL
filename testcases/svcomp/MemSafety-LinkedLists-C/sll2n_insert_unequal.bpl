// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/smack ../svcomp/MemSafety-LinkedLists-C//sll2n_insert_unequal.c -ll ../svcomp/MemSafety-LinkedLists-C//sll2n_insert_unequal_IR.ll --bpl ../svcomp/MemSafety-LinkedLists-C//sll2n_insert_unequal.bpl -t --sh-mem-leak

const reach_error: ref;
axiom (reach_error == $sub.ref(0, 1032));
procedure  reach_error()
{
$bb0:
  return;
}
const myexit: ref;
axiom (myexit == $sub.ref(0, 2064));
procedure  myexit($i0: i32)
{
$bb0:
  call {:cexpr "myexit:arg:s"} boogie_si_record_i32($i0);
  goto $bb1;
$bb1:
  assume true;
  goto $bb1;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 3096));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const llvm.dbg.label: ref;
axiom (llvm.dbg.label == $sub.ref(0, 4128));
procedure  llvm.dbg.label($p0: ref);
const node_create: ref;
axiom (node_create == $sub.ref(0, 5160));
procedure  node_create($i0: i32)
  returns ($r: ref)
{
  var $p1: ref8;
  var $p2: ref;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref32;
$bb0:
  call {:cexpr "node_create:arg:data"} boogie_si_record_i32($i0);
  call $p1 := malloc(16);
  $p2 := $bitcast.ref.ref($p1);
  $i3 := $eq.ref($0.ref, $p2);
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  call myexit(1);
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  goto $bb3;
$bb3:
  $p4 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.0 := $store.ref($M.0, $p4, $0.ref);
  $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.1 := $store.i32($M.1, $p5, $i0);
  $r := $p2;
  return;
}
const malloc: ref;
axiom (malloc == $sub.ref(0, 6192));
procedure  malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $malloc($i0);
}
const sll_create: ref;
axiom (sll_create == $sub.ref(0, 7224));
procedure  sll_create($i0: i32, $i1: i32)
  returns ($r: ref)
{
  var $i2: i1;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p3: ref;
$bb0:
  call {:cexpr "sll_create:arg:len"} boogie_si_record_i32($i0);
  call {:cexpr "sll_create:arg:data"} boogie_si_record_i32($i1);
  $i2 := $sgt.i32($i0, 0);
  $p3 := $0.ref;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  $i4, $p5 := $i0, $0.ref;
  goto $bb4;
$bb2:
  assume !(($i2 == 1));
  goto $bb3;
$bb3:
  $r := $p3;
  return;
$bb4:
  call $p6 := node_create($i1);
  $p7 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.0 := $store.ref($M.0, $p7, $p5);
  goto $bb5;
$bb5:
  $i8 := $add.i32($i4, $sub.i32(0, 1));
  call {:cexpr "len"} boogie_si_record_i32($i8);
  $i9 := $sgt.i32($i8, 0);
  $p10 := $p6;
  assume {:branchcond $i9} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i9 == 1);
  $i4, $p5 := $i8, $p6;
  goto $bb4;
$bb7:
  assume !(($i9 == 1));
  $p3 := $p10;
  goto $bb3;
}
const sll_destroy: ref;
axiom (sll_destroy == $sub.ref(0, 8256));
procedure  sll_destroy($p0: ref)
{
  var $i1: i1;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref8;
  var $i6: i1;
$bb0:
  $i1 := $ne.ref($p0, $0.ref);
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  $p2 := $p0;
  goto $bb4;
$bb2:
  assume !(($i1 == 1));
  goto $bb3;
$bb3:
  return;
$bb4:
  $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p4 := $load.ref($M.0, $p3);
  $p5 := $bitcast.ref.ref($p2);
  call free_($p5);
  $i6 := $ne.ref($p4, $0.ref);
  assume {:branchcond $i6} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i6 == 1);
  $p2 := $p4;
  goto $bb4;
$bb6:
  assume !(($i6 == 1));
  goto $bb3;
}
const free_: ref;
axiom (free_ == $sub.ref(0, 9288));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const sll_insert: ref;
axiom (sll_insert == $sub.ref(0, 10320));
procedure  sll_insert($p0: ref, $i1: i32, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p6: ref;
  var $p7: ref;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
$bb0:
  call {:cexpr "sll_insert:arg:data"} boogie_si_record_i32($i1);
  call {:cexpr "sll_insert:arg:index"} boogie_si_record_i32($i2);
  call $p3 := node_create($i1);
  $p4 := $load.ref($M.2, $p0);
  call {:cexpr "sll_insert:arg:index"} boogie_si_record_i32($i2);
  $i5 := $sgt.i32($i2, 0);
  $p6, $p7 := $0.ref, $p4;
  assume {:branchcond $i5} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i5 == 1);
  $p8, $i9 := $p4, $i2;
  goto $bb4;
$bb2:
  assume !(($i5 == 1));
  goto $bb3;
$bb3:
  $i16 := $ne.ref($p6, $0.ref);
  assume {:branchcond $i16} true;
  goto $bb7, $bb8;
$bb4:
  $p10 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p11 := $load.ref($M.0, $p10);
  $i12 := $add.i32($i9, $sub.i32(0, 1));
  call {:cexpr "index"} boogie_si_record_i32($i12);
  $i13 := $sgt.i32($i12, 0);
  $p14, $p15 := $p8, $p11;
  assume {:branchcond $i13} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i13 == 1);
  $p8, $i9 := $p11, $i12;
  goto $bb4;
$bb6:
  assume !(($i13 == 1));
  $p6, $p7 := $p14, $p15;
  goto $bb3;
$bb7:
  assume ($i16 == 1);
  $p17 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.0 := $store.ref($M.0, $p17, $p3);
  goto $bb9;
$bb8:
  assume !(($i16 == 1));
  $M.2 := $store.ref($M.2, $p0, $p3);
  goto $bb9;
$bb9:
  $p18 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.0 := $store.ref($M.0, $p18, $p7);
  return;
}
const main: ref;
axiom (main == $sub.ref(0, 11352));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i6: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $p8: ref;
  var $i9: i32;
  var $p16: ref32;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i23: i32;
  var $i34: i1;
  var $p35: ref;
$bb0:
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  call $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume true;
  call $p1 := sll_create(2, 1);
  $M.2 := $store.ref($M.2, $p0, $p1);
  call sll_insert($p0, 5, 1);
  $p2 := $load.ref($M.2, $p0);
  $p3, $i4 := $p2, 0;
  goto $bb1;
$bb1:
  $i5 := $ne.ref($p3, $0.ref);
  $i6 := 0;
  assume {:branchcond $i5} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i5 == 1);
  $i7 := $ne.i32($i4, 1);
  $i6 := $i7;
  goto $bb4;
$bb3:
  assume !(($i5 == 1));
  goto $bb4;
$bb4:
  $p8, $i9 := $p3, $i4;
  assume {:branchcond $i6} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i6 == 1);
  $p10 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p11 := $load.ref($M.0, $p10);
  $p12 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
  $i13 := $load.i32($M.1, $p12);
  $i14 := $ne.i32(1, $i13);
  assume {:branchcond $i14} true;
  goto $bb7, $bb8;
$bb6:
  assume !(($i6 == 1));
  $p16 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(0, 1));
  $i17 := $load.i32($M.1, $p16);
  $i18 := $ne.i32(5, $i17);
  assume {:branchcond $i18} true;
  goto $bb10, $bb11;
$bb7:
  assume ($i14 == 1);
  goto $bb9;
$bb8:
  assume !(($i14 == 1));
  $i15 := $add.i32($i4, 1);
  call {:cexpr "count"} boogie_si_record_i32($i15);
  $p3, $i4 := $p11, $i15;
  goto $bb1;
$bb9:
  assume true;
  call reach_error();
  call abort();
  assume false;
$bb10:
  assume ($i18 == 1);
  goto $bb9;
$bb11:
  assume !(($i18 == 1));
  $p19 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p20 := $load.ref($M.0, $p19);
  $i21 := $add.i32($i9, 1);
  call {:cexpr "count"} boogie_si_record_i32($i21);
  $i22 := $ne.ref($p20, $0.ref);
  $i23 := $i21;
  assume {:branchcond $i22} true;
  goto $bb12, $bb13;
$bb12:
  assume ($i22 == 1);
  $i24, $p25 := $i21, $p20;
  goto $bb15;
$bb13:
  assume !(($i22 == 1));
  goto $bb14;
$bb14:
  $i34 := $ne.i32($i23, 3);
  assume {:branchcond $i34} true;
  goto $bb20, $bb21;
$bb15:
  $p26 := $add.ref($add.ref($p25, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p27 := $load.ref($M.0, $p26);
  $p28 := $add.ref($add.ref($p25, $mul.ref(0, 16)), $mul.ref(0, 1));
  $i29 := $load.i32($M.1, $p28);
  $i30 := $ne.i32(1, $i29);
  assume {:branchcond $i30} true;
  goto $bb16, $bb17;
$bb16:
  assume ($i30 == 1);
  goto $bb9;
$bb17:
  assume !(($i30 == 1));
  $i31 := $add.i32($i24, 1);
  call {:cexpr "count"} boogie_si_record_i32($i31);
  $i32 := $ne.ref($p27, $0.ref);
  $i33 := $i31;
  assume {:branchcond $i32} true;
  goto $bb18, $bb19;
$bb18:
  assume ($i32 == 1);
  $i24, $p25 := $i31, $p27;
  goto $bb15;
$bb19:
  assume !(($i32 == 1));
  $i23 := $i33;
  goto $bb14;
$bb20:
  assume ($i34 == 1);
  goto $bb9;
$bb21:
  assume !(($i34 == 1));
  $p35 := $load.ref($M.2, $p0);
  call sll_destroy($p35);
  $r := 0;
  return;
}
const abort: ref;
axiom (abort == $sub.ref(0, 12384));
procedure  abort();
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 13416));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 14448));
procedure  __SMACK_static_init()
{
$bb0:
  return;
}
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
