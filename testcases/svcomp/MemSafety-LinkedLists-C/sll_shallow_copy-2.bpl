// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/smack ../svcomp/MemSafety-LinkedLists-C//sll_shallow_copy-2.c -ll ../svcomp/MemSafety-LinkedLists-C//sll_shallow_copy-2_IR.ll --bpl ../svcomp/MemSafety-LinkedLists-C//sll_shallow_copy-2.bpl -t --sh-mem-leak

const myexit: ref;
axiom (myexit == $sub.ref(0, 1032));
procedure  myexit($i0: i32)
{
$bb0:
  call {:cexpr "myexit:arg:s"} boogie_si_record_i32($i0);
  goto $bb1;
$bb1:
  assume true;
  goto $bb1;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 2064));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const llvm.dbg.label: ref;
axiom (llvm.dbg.label == $sub.ref(0, 3096));
procedure  llvm.dbg.label($p0: ref);
const alloc_node: ref;
axiom (alloc_node == $sub.ref(0, 4128));
procedure  alloc_node()
  returns ($r: ref)
{
  var $p0: ref8;
  var $p1: ref;
  var $i2: i1;
$bb0:
  call $p0 := malloc(8);
  $p1 := $bitcast.ref.ref($p0);
  $i2 := $eq.ref($0.ref, $p1);
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  call myexit(1);
  goto $bb3;
$bb2:
  assume !(($i2 == 1));
  goto $bb3;
$bb3:
  $r := $p1;
  return;
}
const malloc: ref;
axiom (malloc == $sub.ref(0, 5160));
procedure  malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $malloc($i0);
}
const main: ref;
axiom (main == $sub.ref(0, 6192));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref8;
  var $p6: ref8;
  var $p7: ref8;
$bb0:
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  call $p0 := alloc_node();
  call $p1 := alloc_node();
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p2, $p1);
  $p3 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
  $p4 := $load.ref($M.0, $p3);
  $p5 := $bitcast.ref.ref($p0);
  $p6 := $bitcast.ref.ref($p4);
  call $M.0 := $memcpy.i8($M.0, $M.0, $p5, $p6, 8, false);
  $p7 := $bitcast.ref.ref($p0);
  call free_($p7);
  $r := 0;
  return;
}
const llvm.memcpy.p0i8.p0i8.i64: ref;
axiom (llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 7224));
procedure  llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i1);
const free_: ref;
axiom (free_ == $sub.ref(0, 8256));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 9288));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 10320));
procedure  __SMACK_static_init()
{
$bb0:
  return;
}
procedure  $memcpy.i8(M.dst: [ref] i8, M.src: [ref] i8, dst: ref, src: ref, len: ref, isvolatile: bool) returns (M.ret: [ref] i8)
{
  assume (forall x: ref :: $sle.ref.bool(dst,x) && $slt.ref.bool(x,$add.ref(dst,len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src,dst),x)]);
  assume (forall x: ref :: $slt.ref.bool(x,dst) ==> M.ret[x] == M.dst[x]);
  assume (forall x: ref :: $sle.ref.bool($add.ref(dst,len),x) ==> M.ret[x] == M.dst[x]);
}

procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
