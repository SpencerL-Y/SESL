// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/smack ../svcomp/MemSafety-LinkedLists-C//sll_to_dll_rev-1.c -ll ../svcomp/MemSafety-LinkedLists-C//sll_to_dll_rev-1_IR.ll --bpl ../svcomp/MemSafety-LinkedLists-C//sll_to_dll_rev-1.bpl -t --sh-mem-leak

const reach_error: ref;
axiom (reach_error == $sub.ref(0, 1032));
procedure  reach_error()
{
$bb0:
  return;
}
const init_back_link: ref;
axiom (init_back_link == $sub.ref(0, 2064));
procedure  init_back_link($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
$bb0:
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p2 := $load.ref($M.0, $p1);
  $i3 := $ne.ref($p2, $0.ref);
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  $p4, $p5 := $p2, $p0;
  goto $bb4;
$bb2:
  assume !(($i3 == 1));
  goto $bb3;
$bb3:
  return;
$bb4:
  $p6 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.1 := $store.ref($M.1, $p6, $p5);
  $p7 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p8 := $load.ref($M.0, $p7);
  $i9 := $ne.ref($p8, $0.ref);
  assume {:branchcond $i9} true;
  goto $bb6, $bb5;
$bb5:
  assume !(($i9 == 1));
  goto $bb3;
$bb6:
  assume ($i9 == 1);
  $p4, $p5 := $p8, $p4;
  goto $bb4;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 3096));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const reverse_dll: ref;
axiom (reverse_dll == $sub.ref(0, 4128));
procedure  reverse_dll($p0: ref)
{
  var $i1: i1;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
$bb0:
  $i1 := $ne.ref($p0, $0.ref);
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  $p2 := $p0;
  goto $bb4;
$bb2:
  assume !(($i1 == 1));
  goto $bb3;
$bb3:
  return;
$bb4:
  $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p4 := $load.ref($M.0, $p3);
  $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p6 := $load.ref($M.1, $p5);
  $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p7, $p6);
  $p8 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.1 := $store.ref($M.1, $p8, $p4);
  $i9 := $ne.ref($p4, $0.ref);
  assume {:branchcond $i9} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i9 == 1);
  $p2 := $p4;
  goto $bb4;
$bb6:
  assume !(($i9 == 1));
  goto $bb3;
}
const remove_fw_link: ref;
axiom (remove_fw_link == $sub.ref(0, 5160));
procedure  remove_fw_link($p0: ref)
{
  var $i1: i1;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
$bb0:
  $i1 := $ne.ref($p0, $0.ref);
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  $p2 := $p0;
  goto $bb4;
$bb2:
  assume !(($i1 == 1));
  goto $bb3;
$bb3:
  return;
$bb4:
  $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p4 := $load.ref($M.0, $p3);
  $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p5, $0.ref);
  $i6 := $ne.ref($p4, $0.ref);
  assume {:branchcond $i6} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i6 == 1);
  $p2 := $p4;
  goto $bb4;
$bb6:
  assume !(($i6 == 1));
  goto $bb3;
}
const check_seq_next: ref;
axiom (check_seq_next == $sub.ref(0, 6192));
procedure  check_seq_next($p0: ref, $p1: ref)
{
  var $i2: i1;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $p7: ref;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
$bb0:
  goto $bb1;
$bb1:
  $i2 := $ne.ref($p0, $0.ref);
  assume {:branchcond $i2} true;
  goto $bb2, $bb4;
$bb2:
  assume ($i2 == 1);
  goto $bb3;
$bb3:
  goto $bb5;
$bb4:
  assume !(($i2 == 1));
  call fail();
  goto $bb3;
$bb5:
  goto $bb6;
$bb6:
  $i3 := $ne.ref($p1, $0.ref);
  assume {:branchcond $i3} true;
  goto $bb7, $bb9;
$bb7:
  assume ($i3 == 1);
  goto $bb8;
$bb8:
  goto $bb10;
$bb9:
  assume !(($i3 == 1));
  call fail();
  goto $bb8;
$bb10:
  $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p5 := $load.ref($M.0, $p4);
  $i6 := $ne.ref($p1, $p5);
  assume {:branchcond $i6} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i6 == 1);
  $p7 := $p5;
  goto $bb14;
$bb12:
  assume !(($i6 == 1));
  goto $bb13;
$bb13:
  return;
$bb14:
  goto $bb15;
$bb15:
  $i8 := $ne.ref($p7, $0.ref);
  assume {:branchcond $i8} true;
  goto $bb16, $bb18;
$bb16:
  assume ($i8 == 1);
  goto $bb17;
$bb17:
  goto $bb19;
$bb18:
  assume !(($i8 == 1));
  call fail();
  goto $bb17;
$bb19:
  goto $bb20;
$bb20:
  $p9 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p10 := $load.ref($M.0, $p9);
  $i11 := $ne.ref($p1, $p10);
  assume {:branchcond $i11} true;
  goto $bb21, $bb22;
$bb21:
  assume ($i11 == 1);
  $p7 := $p10;
  goto $bb14;
$bb22:
  assume !(($i11 == 1));
  goto $bb13;
}
const fail: ref;
axiom (fail == $sub.ref(0, 7224));
procedure  fail()
{
$bb0:
  goto $bb1;
$bb1:
  assume true;
  call reach_error();
  call abort();
  assume false;
}
const llvm.dbg.label: ref;
axiom (llvm.dbg.label == $sub.ref(0, 8256));
procedure  llvm.dbg.label($p0: ref);
const abort: ref;
axiom (abort == $sub.ref(0, 9288));
procedure  abort();
const check_seq_prev: ref;
axiom (check_seq_prev == $sub.ref(0, 10320));
procedure  check_seq_prev($p0: ref, $p1: ref)
{
  var $i2: i1;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $p7: ref;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
$bb0:
  goto $bb1;
$bb1:
  $i2 := $ne.ref($p0, $0.ref);
  assume {:branchcond $i2} true;
  goto $bb2, $bb4;
$bb2:
  assume ($i2 == 1);
  goto $bb3;
$bb3:
  goto $bb5;
$bb4:
  assume !(($i2 == 1));
  call fail();
  goto $bb3;
$bb5:
  goto $bb6;
$bb6:
  $i3 := $ne.ref($p1, $0.ref);
  assume {:branchcond $i3} true;
  goto $bb7, $bb9;
$bb7:
  assume ($i3 == 1);
  goto $bb8;
$bb8:
  goto $bb10;
$bb9:
  assume !(($i3 == 1));
  call fail();
  goto $bb8;
$bb10:
  $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p5 := $load.ref($M.1, $p4);
  $i6 := $ne.ref($p1, $p5);
  assume {:branchcond $i6} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i6 == 1);
  $p7 := $p5;
  goto $bb14;
$bb12:
  assume !(($i6 == 1));
  goto $bb13;
$bb13:
  return;
$bb14:
  goto $bb15;
$bb15:
  $i8 := $ne.ref($p7, $0.ref);
  assume {:branchcond $i8} true;
  goto $bb16, $bb18;
$bb16:
  assume ($i8 == 1);
  goto $bb17;
$bb17:
  goto $bb19;
$bb18:
  assume !(($i8 == 1));
  call fail();
  goto $bb17;
$bb19:
  goto $bb20;
$bb20:
  $p9 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p10 := $load.ref($M.1, $p9);
  $i11 := $ne.ref($p1, $p10);
  assume {:branchcond $i11} true;
  goto $bb21, $bb22;
$bb21:
  assume ($i11 == 1);
  $p7 := $p10;
  goto $bb14;
$bb22:
  assume !(($i11 == 1));
  goto $bb13;
}
const main: ref;
axiom (main == $sub.ref(0, 11352));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref8;
  var $i28: i1;
$bb0:
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  call $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  call $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume true;
  assume true;
  call $p2 := create_sll($p0, $p1);
  goto $bb1;
$bb1:
  goto $bb2;
$bb2:
  $p3 := $load.ref($M.2, $p0);
  $p4 := $load.ref($M.3, $p1);
  call check_seq_next($p3, $p4);
  goto $bb3;
$bb3:
  $p5 := $load.ref($M.2, $p0);
  $p6 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p7 := $load.ref($M.1, $p6);
  $i8 := $ne.ref($p7, $0.ref);
  assume {:branchcond $i8} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i8 == 1);
  call fail();
  goto $bb6;
$bb5:
  assume !(($i8 == 1));
  goto $bb6;
$bb6:
  goto $bb7;
$bb7:
  goto $bb8;
$bb8:
  $p9 := $load.ref($M.3, $p1);
  $p10 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p11 := $load.ref($M.1, $p10);
  $i12 := $ne.ref($p11, $0.ref);
  assume {:branchcond $i12} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i12 == 1);
  call fail();
  goto $bb11;
$bb10:
  assume !(($i12 == 1));
  goto $bb11;
$bb11:
  goto $bb12;
$bb12:
  call init_back_link($p2);
  goto $bb13;
$bb13:
  goto $bb14;
$bb14:
  $p13 := $load.ref($M.2, $p0);
  $p14 := $load.ref($M.3, $p1);
  call check_seq_next($p13, $p14);
  $p15 := $load.ref($M.3, $p1);
  $p16 := $load.ref($M.2, $p0);
  call check_seq_prev($p15, $p16);
  call reverse_dll($p2);
  goto $bb15;
$bb15:
  goto $bb16;
$bb16:
  $p17 := $load.ref($M.2, $p0);
  $p18 := $load.ref($M.3, $p1);
  call check_seq_prev($p17, $p18);
  $p19 := $load.ref($M.3, $p1);
  $p20 := $load.ref($M.2, $p0);
  call check_seq_next($p19, $p20);
  call remove_fw_link($p2);
  goto $bb17;
$bb17:
  goto $bb18;
$bb18:
  $p21 := $load.ref($M.2, $p0);
  $p22 := $load.ref($M.3, $p1);
  call check_seq_prev($p21, $p22);
  $i23 := $ne.ref($p2, $0.ref);
  assume {:branchcond $i23} true;
  goto $bb19, $bb20;
$bb19:
  assume ($i23 == 1);
  $p24 := $p2;
  goto $bb22;
$bb20:
  assume !(($i23 == 1));
  goto $bb21;
$bb21:
  $r := 0;
  return;
$bb22:
  $p25 := $add.ref($add.ref($p24, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p26 := $load.ref($M.1, $p25);
  $p27 := $bitcast.ref.ref($p24);
  call free_($p27);
  $i28 := $ne.ref($p26, $0.ref);
  assume {:branchcond $i28} true;
  goto $bb23, $bb24;
$bb23:
  assume ($i28 == 1);
  $p24 := $p26;
  goto $bb22;
$bb24:
  assume !(($i28 == 1));
  goto $bb21;
}
const create_sll: ref;
axiom (create_sll == $sub.ref(0, 12384));
procedure  create_sll($p0: ref, $p1: ref)
  returns ($r: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
$bb0:
  call $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume true;
  $M.4 := $store.ref($M.4, $p2, $0.ref);
  goto $bb1;
$bb1:
  call chain_node($p2);
  goto $bb2;
$bb2:
  call $i3 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
  $i4 := $ne.i32($i3, 0);
  assume {:branchcond $i4} true;
  goto $bb3, $bb4;
$bb3:
  assume ($i4 == 1);
  goto $bb1;
$bb4:
  assume !(($i4 == 1));
  $p5 := $load.ref($M.4, $p2);
  $M.3 := $store.ref($M.3, $p1, $p5);
  call $i6 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
  $i7 := $ne.i32($i6, 0);
  assume {:branchcond $i7} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i7 == 1);
  goto $bb8;
$bb6:
  assume !(($i7 == 1));
  goto $bb7;
$bb7:
  $p10 := $load.ref($M.4, $p2);
  $M.2 := $store.ref($M.2, $p0, $p10);
  goto $bb11;
$bb8:
  call chain_node($p2);
  call $i8 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i8);
  $i9 := $ne.i32($i8, 0);
  assume {:branchcond $i9} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i9 == 1);
  goto $bb8;
$bb10:
  assume !(($i9 == 1));
  goto $bb7;
$bb11:
  call chain_node($p2);
  goto $bb12;
$bb12:
  call $i11 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i11);
  $i12 := $ne.i32($i11, 0);
  assume {:branchcond $i12} true;
  goto $bb13, $bb14;
$bb13:
  assume ($i12 == 1);
  goto $bb11;
$bb14:
  assume !(($i12 == 1));
  $p13 := $load.ref($M.4, $p2);
  $r := $p13;
  return;
}
const free_: ref;
axiom (free_ == $sub.ref(0, 13416));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const chain_node: ref;
axiom (chain_node == $sub.ref(0, 14448));
procedure  chain_node($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
$bb0:
  call $p1 := alloc_node();
  $p2 := $load.ref($M.4, $p0);
  $p3 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p3, $p2);
  $M.4 := $store.ref($M.4, $p0, $p1);
  return;
}
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0, 15480));
procedure  __VERIFIER_nondet_int()
  returns ($r: i32);
const alloc_node: ref;
axiom (alloc_node == $sub.ref(0, 16512));
procedure  alloc_node()
  returns ($r: ref)
{
  var $p0: ref8;
  var $p1: ref;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
$bb0:
  call $p0 := malloc(16);
  $p1 := $bitcast.ref.ref($p0);
  $i2 := $ne.ref($p1, $0.ref);
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  $p3 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p3, $0.ref);
  $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.1 := $store.ref($M.1, $p4, $0.ref);
  $r := $p1;
  return;
$bb2:
  assume !(($i2 == 1));
  call abort();
  assume false;
}
const malloc: ref;
axiom (malloc == $sub.ref(0, 17544));
procedure  malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $malloc($i0);
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 18576));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 19608));
procedure  __SMACK_static_init()
{
$bb0:
  return;
}
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
