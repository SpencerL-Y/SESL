// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/smack ../svcomp/MemSafety-LinkedLists-C//tree-3.c -ll ../svcomp/MemSafety-LinkedLists-C//tree-3_IR.ll --bpl ../svcomp/MemSafety-LinkedLists-C//tree-3.bpl -t --sh-mem-leak

const reach_error: ref;
axiom (reach_error == $sub.ref(0, 1032));
procedure  reach_error()
{
$bb0:
  return;
}
const create_tree: ref;
axiom (create_tree == $sub.ref(0, 2064));
procedure  create_tree()
  returns ($r: ref)
{
  var $i0: i32;
  var $i1: i1;
  var $p4: ref;
  var $p5: ref8;
  var $p6: ref;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $p15: ref32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p2: ref;
  var $p3: ref;
  var $i20: i1;
  var $p21: ref;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref8;
  var $p25: ref;
  var $p26: ref;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i1;
$bb0:
  call $i0 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
  $i1 := $ne.i32($i0, 0);
  $p2, $p3 := $0.ref, $0.ref;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  $p4 := $0.ref;
  goto $bb4;
$bb2:
  assume !(($i1 == 1));
  goto $bb3;
$bb3:
  $i20 := $ne.ref($p2, $0.ref);
  assume {:branchcond $i20} true;
  goto $bb15, $bb16;
$bb4:
  call $p5 := malloc(32);
  $p6 := $bitcast.ref.ref($p5);
  $i7 := $ne.ref($p6, $0.ref);
  assume {:branchcond $i7} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i7 == 1);
  $p8 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p8, $0.ref);
  $p9 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(8, 1));
  $M.1 := $store.ref($M.1, $p9, $p4);
  $i10 := $ne.ref($p4, $0.ref);
  assume {:branchcond $i10} true;
  goto $bb7, $bb8;
$bb6:
  assume !(($i7 == 1));
  call abort();
  assume false;
$bb7:
  assume ($i10 == 1);
  $p11 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(16, 1));
  $M.2 := $store.ref($M.2, $p11, $p5);
  goto $bb9;
$bb8:
  assume !(($i10 == 1));
  goto $bb9;
$bb9:
  call $i12 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
  call {:cexpr "value"} boogie_si_record_i32($i12);
  $i13 := $ne.i32($i12, 0);
  $i14 := $i12;
  assume {:branchcond $i13} true;
  goto $bb10, $bb12;
$bb10:
  assume ($i13 == 1);
  goto $bb11;
$bb11:
  $p15 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(24, 1));
  $M.3 := $store.i32($M.3, $p15, $i14);
  call $i16 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i16);
  $i17 := $ne.i32($i16, 0);
  $p18, $p19 := $p5, $p5;
  assume {:branchcond $i17} true;
  goto $bb13, $bb14;
$bb12:
  assume !(($i13 == 1));
  $i14 := 1;
  goto $bb11;
$bb13:
  assume ($i17 == 1);
  $p4 := $p5;
  goto $bb4;
$bb14:
  assume !(($i17 == 1));
  $p2, $p3 := $p18, $p19;
  goto $bb3;
$bb15:
  assume ($i20 == 1);
  $p21 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(16, 1));
  $M.2 := $store.ref($M.2, $p21, $0.ref);
  goto $bb17;
$bb16:
  assume !(($i20 == 1));
  goto $bb17;
$bb17:
  $i22 := $ne.ref($p2, $0.ref);
  assume {:branchcond $i22} true;
  goto $bb18, $bb19;
$bb18:
  assume ($i22 == 1);
  $p23 := $p2;
  goto $bb21;
$bb19:
  assume !(($i22 == 1));
  goto $bb20;
$bb20:
  $r := $p3;
  return;
$bb21:
  call $p24 := malloc(32);
  $p25 := $bitcast.ref.ref($p24);
  $p26 := $add.ref($add.ref($p23, $mul.ref(0, 32)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p26, $p24);
  $i27 := $ne.ref($p23, $0.ref);
  assume {:branchcond $i27} true;
  goto $bb22, $bb23;
$bb22:
  assume ($i27 == 1);
  $p28 := $add.ref($add.ref($p23, $mul.ref(0, 32)), $mul.ref(0, 1));
  $p29 := $load.ref($M.0, $p28);
  $p30 := $add.ref($add.ref($p29, $mul.ref(0, 32)), $mul.ref(0, 1));
  $M.4 := $store.ref($M.4, $p30, $0.ref);
  $p31 := $add.ref($add.ref($p23, $mul.ref(0, 32)), $mul.ref(0, 1));
  $p32 := $load.ref($M.0, $p31);
  $p33 := $add.ref($add.ref($p32, $mul.ref(0, 32)), $mul.ref(8, 1));
  $M.5 := $store.ref($M.5, $p33, $0.ref);
  $p34 := $add.ref($add.ref($p23, $mul.ref(0, 32)), $mul.ref(0, 1));
  $p35 := $load.ref($M.0, $p34);
  $p36 := $add.ref($add.ref($p35, $mul.ref(0, 32)), $mul.ref(24, 1));
  $M.6 := $store.i32($M.6, $p36, 42);
  $p37 := $add.ref($add.ref($p23, $mul.ref(0, 32)), $mul.ref(0, 1));
  $p38 := $load.ref($M.0, $p37);
  $p39 := $add.ref($add.ref($p38, $mul.ref(0, 32)), $mul.ref(16, 1));
  $M.7 := $store.ref($M.7, $p39, $p23);
  $p40 := $add.ref($add.ref($p23, $mul.ref(0, 32)), $mul.ref(8, 1));
  $p41 := $load.ref($M.1, $p40);
  $i42 := $ne.ref($p41, $0.ref);
  assume {:branchcond $i42} true;
  goto $bb24, $bb25;
$bb23:
  assume !(($i27 == 1));
  call abort();
  assume false;
$bb24:
  assume ($i42 == 1);
  $p23 := $p41;
  goto $bb21;
$bb25:
  assume !(($i42 == 1));
  goto $bb20;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 3096));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0, 4128));
procedure  __VERIFIER_nondet_int()
  returns ($r: i32);
const malloc: ref;
axiom (malloc == $sub.ref(0, 5160));
procedure  malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $malloc($i0);
}
const abort: ref;
axiom (abort == $sub.ref(0, 6192));
procedure  abort();
const free_tree: ref;
axiom (free_tree == $sub.ref(0, 7224));
procedure  free_tree($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $p6: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref8;
  var $p21: ref;
  var $p22: ref;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref8;
  var $p27: ref;
  var $p28: ref;
  var $i29: i1;
  var $p30: ref;
  var $p13: ref;
  var $p31: ref8;
$bb0:
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
  $p2 := $load.ref($M.1, $p1);
  $i3 := $eq.ref($p2, $0.ref);
  $p4 := $p0;
  assume {:branchcond $i3} true;
  goto $bb1, $bb3;
$bb1:
  assume ($i3 == 1);
  goto $bb2;
$bb2:
  goto $bb6;
$bb3:
  assume !(($i3 == 1));
  $p5 := $p0;
  goto $bb4;
$bb4:
  $p7 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(8, 1));
  $p8 := $load.ref($M.1, $p7);
  $p9 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(8, 1));
  $p10 := $load.ref($M.1, $p9);
  $i11 := $eq.ref($p10, $0.ref);
  $p6 := $p8;
  assume {:branchcond $i11} true;
  goto $bb5, $bb7;
$bb5:
  assume ($i11 == 1);
  $p4 := $p6;
  goto $bb2;
$bb6:
  $i12 := $ne.ref($p4, $0.ref);
  $p13 := $0.ref;
  assume {:branchcond $i12} true;
  goto $bb8, $bb9;
$bb7:
  assume !(($i11 == 1));
  $p5 := $p8;
  goto $bb4;
$bb8:
  assume ($i12 == 1);
  $p14 := $p4;
  goto $bb11;
$bb9:
  assume !(($i12 == 1));
  goto $bb10;
$bb10:
  $p31 := $bitcast.ref.ref($p13);
  call free_($p31);
  return;
$bb11:
  $p15 := $add.ref($add.ref($p14, $mul.ref(0, 32)), $mul.ref(0, 1));
  $p16 := $load.ref($M.0, $p15);
  $i17 := $ne.ref($p16, $0.ref);
  assume {:branchcond $i17} true;
  goto $bb12, $bb13;
$bb12:
  assume ($i17 == 1);
  $p18 := $add.ref($add.ref($p14, $mul.ref(0, 32)), $mul.ref(0, 1));
  $p19 := $load.ref($M.0, $p18);
  $p20 := $bitcast.ref.ref($p19);
  call free_($p20);
  goto $bb14;
$bb13:
  assume !(($i17 == 1));
  goto $bb14;
$bb14:
  $p21 := $add.ref($add.ref($p14, $mul.ref(0, 32)), $mul.ref(8, 1));
  $p22 := $load.ref($M.1, $p21);
  $i23 := $ne.ref($p22, $0.ref);
  assume {:branchcond $i23} true;
  goto $bb15, $bb16;
$bb15:
  assume ($i23 == 1);
  $p24 := $add.ref($add.ref($p14, $mul.ref(0, 32)), $mul.ref(8, 1));
  $p25 := $load.ref($M.1, $p24);
  $p26 := $bitcast.ref.ref($p25);
  call free_($p26);
  goto $bb17;
$bb16:
  assume !(($i23 == 1));
  goto $bb17;
$bb17:
  $p27 := $add.ref($add.ref($p14, $mul.ref(0, 32)), $mul.ref(16, 1));
  $p28 := $load.ref($M.2, $p27);
  $i29 := $ne.ref($p28, $0.ref);
  $p30 := $p14;
  assume {:branchcond $i29} true;
  goto $bb18, $bb19;
$bb18:
  assume ($i29 == 1);
  $p14 := $p28;
  goto $bb11;
$bb19:
  assume !(($i29 == 1));
  $p13 := $p30;
  goto $bb10;
}
const free_: ref;
axiom (free_ == $sub.ref(0, 8256));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const main: ref;
axiom (main == $sub.ref(0, 9288));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $p0: ref;
  var $i1: i1;
$bb0:
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  call $p0 := create_tree();
  $i1 := $ne.ref($p0, $0.ref);
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  call inspect($p0);
  call free_tree($p0);
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  goto $bb3;
$bb3:
  $r := 0;
  return;
}
const inspect: ref;
axiom (inspect == $sub.ref(0, 10320));
procedure  inspect($p0: ref)
{
  var $i1: i1;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref32;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref32;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i1;
$bb0:
  goto $bb1;
$bb1:
  $i1 := $ne.ref($p0, $0.ref);
  assume {:branchcond $i1} true;
  goto $bb2, $bb4;
$bb2:
  assume ($i1 == 1);
  goto $bb3;
$bb3:
  goto $bb5;
$bb4:
  assume !(($i1 == 1));
  call fail();
  goto $bb3;
$bb5:
  $i2 := $ne.ref($p0, $0.ref);
  assume {:branchcond $i2} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i2 == 1);
  $p3 := $p0;
  goto $bb9;
$bb7:
  assume !(($i2 == 1));
  goto $bb8;
$bb8:
  return;
$bb9:
  $p4 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 1));
  $p5 := $load.ref($M.0, $p4);
  $i6 := $ne.ref($p5, $0.ref);
  assume {:branchcond $i6} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i6 == 1);
  goto $bb13;
$bb11:
  assume !(($i6 == 1));
  goto $bb12;
$bb12:
  goto $bb18;
$bb13:
  $p7 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 1));
  $p8 := $load.ref($M.0, $p7);
  $p9 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(24, 1));
  $i10 := $load.i32($M.6, $p9);
  $i11 := $eq.i32($i10, 42);
  assume {:branchcond $i11} true;
  goto $bb14, $bb16;
$bb14:
  assume ($i11 == 1);
  goto $bb15;
$bb15:
  goto $bb17;
$bb16:
  assume !(($i11 == 1));
  call fail();
  goto $bb15;
$bb17:
  goto $bb12;
$bb18:
  $p12 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(24, 1));
  $i13 := $load.i32($M.3, $p12);
  $i14 := $ne.i32($i13, 0);
  assume {:branchcond $i14} true;
  goto $bb19, $bb21;
$bb19:
  assume ($i14 == 1);
  goto $bb20;
$bb20:
  goto $bb22;
$bb21:
  assume !(($i14 == 1));
  call fail();
  goto $bb20;
$bb22:
  $p15 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(16, 1));
  $p16 := $load.ref($M.2, $p15);
  $i17 := $ne.ref($p16, $0.ref);
  assume {:branchcond $i17} true;
  goto $bb23, $bb24;
$bb23:
  assume ($i17 == 1);
  $p3 := $p16;
  goto $bb9;
$bb24:
  assume !(($i17 == 1));
  goto $bb8;
}
const fail: ref;
axiom (fail == $sub.ref(0, 11352));
procedure  fail()
{
$bb0:
  goto $bb1;
$bb1:
  assume true;
  call reach_error();
  call abort();
  assume false;
}
const llvm.dbg.label: ref;
axiom (llvm.dbg.label == $sub.ref(0, 12384));
procedure  llvm.dbg.label($p0: ref);
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 13416));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 14448));
procedure  __SMACK_static_init()
{
$bb0:
  return;
}
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
