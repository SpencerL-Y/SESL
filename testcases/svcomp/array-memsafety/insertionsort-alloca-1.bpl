// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/smack ../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i -ll ../testcases/svcomp/array-memsafety/insertionsort-alloca-1_IR.ll --bpl ../testcases/svcomp/array-memsafety/insertionsort-alloca-1.bpl -t --sh-mem-leak --add-line-info

const insertionSort: ref;
axiom (insertionSort == $sub.ref(0, 1032));
procedure  insertionSort($p0: ref, $i1: i32)
{
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $p5: ref32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i10: i32;
  var $i11: i64;
  var $p12: ref32;
  var $i13: i32;
  var $i14: i1;
  var $i9: i1;
  var $i16: i32;
  var $i17: i64;
  var $p18: ref32;
  var $i19: i32;
  var $i20: i64;
  var $p21: ref32;
  var $i22: i32;
  var $i15: i32;
  var $i23: i64;
  var $p24: ref32;
  var $i25: i32;
  var $i26: i1;
$bb0:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 515, 19} true;
  call {:cexpr "insertionSort:arg:array_size"} boogie_si_record_i32($i1);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 515, 19} true;
  $i2 := $slt.i32(1, $i1);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 515, 5} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 515, 5} true;
  $i3 := 1;
  goto $bb4;
$bb2:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 515, 5} true;
  assume !(($i2 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 522, 1} true;
  return;
$bb4:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 517, 17} true;
  $i4 := $sext.i32.i64($i3);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 517, 17} true;
  $p5 := $add.ref($p0, $mul.ref($i4, 4));
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 517, 17} true;
  $i6 := $load.i32($M.0, $p5);
  call {:cexpr "index"} boogie_si_record_i32($i6);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 518, 14} true;
  $i7 := $i3;
  goto $bb5;
$bb5:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 0, 0} true;
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 518, 23} true;
  $i8 := $sgt.i32($i7, 0);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 518, 27} true;
  $i9 := 0;
  assume {:branchcond $i8} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i8 == 1);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 518, 33} true;
  $i10 := $sub.i32($i7, 1);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 518, 30} true;
  $i11 := $sext.i32.i64($i10);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 518, 30} true;
  $p12 := $add.ref($p0, $mul.ref($i11, 4));
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 518, 30} true;
  $i13 := $load.i32($M.0, $p12);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 518, 37} true;
  $i14 := $sgt.i32($i13, $i6);
  $i9 := $i14;
  goto $bb8;
$bb7:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 518, 27} true;
  assume !(($i8 == 1));
  goto $bb8;
$bb8:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 0, 0} true;
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 518, 9} true;
  $i15 := $i7;
  assume {:branchcond $i9} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i9 == 1);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 519, 23} true;
  $i16 := $sub.i32($i7, 1);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 519, 20} true;
  $i17 := $sext.i32.i64($i16);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 519, 20} true;
  $p18 := $add.ref($p0, $mul.ref($i17, 4));
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 519, 20} true;
  $i19 := $load.i32($M.0, $p18);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 519, 13} true;
  $i20 := $sext.i32.i64($i7);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 519, 13} true;
  $p21 := $add.ref($p0, $mul.ref($i20, 4));
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 519, 18} true;
  $M.0 := $store.i32($M.0, $p21, $i19);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 519, 13} true;
  goto $bb11;
$bb10:
  assume !(($i9 == 1));
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 0, 0} true;
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 520, 9} true;
  $i23 := $sext.i32.i64($i15);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 520, 9} true;
  $p24 := $add.ref($p0, $mul.ref($i23, 4));
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 520, 14} true;
  $M.0 := $store.i32($M.0, $p24, $i6);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 521, 5} true;
  goto $bb12;
$bb11:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 518, 47} true;
  $i22 := $add.i32($i7, $sub.i32(0, 1));
  call {:cexpr "j"} boogie_si_record_i32($i22);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 518, 9} true;
  $i7 := $i22;
  goto $bb5;
$bb12:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 515, 33} true;
  $i25 := $add.i32($i3, 1);
  call {:cexpr "i"} boogie_si_record_i32($i25);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 515, 19} true;
  $i26 := $slt.i32($i25, $i1);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 515, 5} true;
  assume {:branchcond $i26} true;
  goto $bb13, $bb14;
$bb13:
  assume ($i26 == 1);
  $i3 := $i25;
  goto $bb4;
$bb14:
  assume !(($i26 == 1));
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 515, 5} true;
  goto $bb3;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 2064));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const main: ref;
axiom (main == $sub.ref(0, 3096));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref8;
  var $p8: ref32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i64;
  var $p13: ref32;
  var $i14: i32;
  var $i15: i1;
$bb0:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 524, 20} true;
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 524, 20} true;
  call $i0 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
  call {:cexpr "array_size"} boogie_si_record_i32($i0);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 525, 18} true;
  $i1 := $slt.i32($i0, 1);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 525, 22} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb3;
$bb1:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 525, 22} true;
  assume ($i1 == 1);
  goto $bb2;
$bb2:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 527, 3} true;
  $i4 := 1;
  goto $bb6;
$bb3:
  assume !(($i1 == 1));
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 525, 25} true;
  $i2 := $sext.i32.i64($i0);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 525, 36} true;
  $i3 := $uge.i64($i2, 536870911);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 525, 7} true;
  $i4 := $i0;
  assume {:branchcond $i3} true;
  goto $bb4, $bb5;
$bb4:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 525, 7} true;
  assume ($i3 == 1);
  goto $bb2;
$bb5:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 525, 7} true;
  assume !(($i3 == 1));
  goto $bb6;
$bb6:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 0, 0} true;
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 528, 37} true;
  $i5 := $sext.i32.i64($i4);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 528, 48} true;
  $i6 := $mul.i64($i5, 4);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 528, 19} true;
  call $p7 := $alloc($mul.ref(1, $i6));
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 528, 12} true;
  $p8 := $bitcast.ref.ref($p7);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 530, 19} true;
  $i9 := $slt.i32(0, $i4);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 530, 2} true;
  assume {:branchcond $i9} true;
  goto $bb7, $bb8;
$bb7:
  assume ($i9 == 1);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 530, 2} true;
  $i10 := 0;
  goto $bb10;
$bb8:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 530, 2} true;
  assume !(($i9 == 1));
  goto $bb9;
$bb9:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 535, 3} true;
  call insertionSort($p8, $i4);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 536, 3} true;
  $r := 0;
  return;
$bb10:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 532, 13} true;
  call $i11 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i11);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 532, 6} true;
  $i12 := $sext.i32.i64($i10);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 532, 6} true;
  $p13 := $add.ref($p8, $mul.ref($i12, 4));
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 532, 11} true;
  $M.0 := $store.i32($M.0, $p13, $i11);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 533, 2} true;
  goto $bb11;
$bb11:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 530, 34} true;
  $i14 := $add.i32($i10, 1);
  call {:cexpr "i"} boogie_si_record_i32($i14);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 530, 19} true;
  $i15 := $slt.i32($i14, $i4);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 530, 2} true;
  assume {:branchcond $i15} true;
  goto $bb12, $bb13;
$bb12:
  assume ($i15 == 1);
  $i10 := $i14;
  goto $bb10;
$bb13:
  assume !(($i15 == 1));
  assume {:sourceloc "../testcases/svcomp/array-memsafety/insertionsort-alloca-1.i", 530, 2} true;
  goto $bb9;
}
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0, 4128));
procedure  __VERIFIER_nondet_int()
  returns ($r: i32);
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 5160));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 6192));
procedure  __SMACK_static_init()
{
$bb0:
  return;
}
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
