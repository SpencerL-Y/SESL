// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/smack ../testcases/svcomp/array-memsafety/mult_array-alloca-1.i -ll ../testcases/svcomp/array-memsafety/mult_array-alloca-1_IR.ll --bpl ../testcases/svcomp/array-memsafety/mult_array-alloca-1.bpl -t --sh-mem-leak --add-line-info

const main: ref;
axiom (main == $sub.ref(0, 1032));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref8;
  var $p16: ref32;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref8;
  var $p21: ref32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i26: i32;
  var $i27: i32;
  var $i28: i64;
  var $p29: ref32;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i25: i32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i64;
  var $p38: ref32;
  var $i39: i32;
  var $i40: i64;
  var $p41: ref32;
  var $i42: i32;
  var $i43: i1;
$bb0:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 514, 16} true;
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 514, 16} true;
  call $i0 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
  call {:cexpr "length"} boogie_si_record_i32($i0);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 515, 14} true;
  $i1 := $slt.i32($i0, 1);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 515, 18} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb3;
$bb1:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 515, 18} true;
  assume ($i1 == 1);
  goto $bb2;
$bb2:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 515, 57} true;
  $i4 := 1;
  goto $bb6;
$bb3:
  assume !(($i1 == 1));
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 515, 21} true;
  $i2 := $sext.i32.i64($i0);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 515, 28} true;
  $i3 := $uge.i64($i2, 536870911);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 515, 7} true;
  $i4 := $i0;
  assume {:branchcond $i3} true;
  goto $bb4, $bb5;
$bb4:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 515, 7} true;
  assume ($i3 == 1);
  goto $bb2;
$bb5:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 515, 7} true;
  assume !(($i3 == 1));
  goto $bb6;
$bb6:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 0, 0} true;
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 516, 13} true;
  call $i5 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
  call {:cexpr "fac"} boogie_si_record_i32($i5);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 517, 11} true;
  $i6 := $slt.i32($i5, 1);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 517, 15} true;
  assume {:branchcond $i6} true;
  goto $bb7, $bb9;
$bb7:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 517, 15} true;
  assume ($i6 == 1);
  goto $bb8;
$bb8:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 517, 62} true;
  $i12 := 1;
  goto $bb12;
$bb9:
  assume !(($i6 == 1));
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 517, 18} true;
  $i7 := $sext.i32.i64($i5);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 517, 53} true;
  $i8 := $sext.i32.i64($i4);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 517, 51} true;
  $i9 := $mul.i64(4, $i8);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 517, 36} true;
  $i10 := $udiv.i64(2147483647, $i9);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 517, 22} true;
  $i11 := $uge.i64($i7, $i10);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 517, 7} true;
  $i12 := $i5;
  assume {:branchcond $i11} true;
  goto $bb10, $bb11;
$bb10:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 517, 7} true;
  assume ($i11 == 1);
  goto $bb8;
$bb11:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 517, 7} true;
  assume !(($i11 == 1));
  goto $bb12;
$bb12:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 0, 0} true;
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 518, 32} true;
  $i13 := $sext.i32.i64($i4);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 518, 38} true;
  $i14 := $mul.i64($i13, 4);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 518, 14} true;
  call $p15 := $alloc($mul.ref(1, $i14));
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 518, 14} true;
  $p16 := $bitcast.ref.ref($p15);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 519, 36} true;
  $i17 := $mul.i32($i12, $i4);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 519, 33} true;
  $i18 := $sext.i32.i64($i17);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 519, 43} true;
  $i19 := $mul.i64($i18, 4);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 519, 15} true;
  call $p20 := $alloc($mul.ref(1, $i19));
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 519, 15} true;
  $p21 := $bitcast.ref.ref($p20);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 520, 8} true;
  $i22 := $ne.ref($p16, $0.ref);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 520, 12} true;
  assume {:branchcond $i22} true;
  goto $bb13, $bb14;
$bb13:
  assume ($i22 == 1);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 520, 16} true;
  $i23 := $ne.ref($p21, $0.ref);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 520, 7} true;
  assume {:branchcond $i23} true;
  goto $bb16, $bb17;
$bb14:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 520, 12} true;
  assume !(($i22 == 1));
  goto $bb15;
$bb15:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 520, 22} true;
  goto $bb18;
$bb16:
  assume ($i23 == 1);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 521, 14} true;
  $i24 := $slt.i32(0, $i4);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 521, 3} true;
  $i25 := 0;
  assume {:branchcond $i24} true;
  goto $bb19, $bb20;
$bb17:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 520, 7} true;
  assume !(($i23 == 1));
  goto $bb15;
$bb18:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 528, 1} true;
  $r := 0;
  return;
$bb19:
  assume ($i24 == 1);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 521, 3} true;
  $i26 := 0;
  goto $bb22;
$bb20:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 521, 3} true;
  assume !(($i24 == 1));
  goto $bb21;
$bb21:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 0, 0} true;
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 524, 21} true;
  $i33 := $mul.i32($i4, $i12);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 524, 14} true;
  $i34 := $slt.i32(0, $i33);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 524, 3} true;
  assume {:branchcond $i34} true;
  goto $bb26, $bb27;
$bb22:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 522, 14} true;
  call $i27 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i27);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 522, 5} true;
  $i28 := $sext.i32.i64($i26);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 522, 5} true;
  $p29 := $add.ref($p16, $mul.ref($i28, 4));
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 522, 12} true;
  $M.0 := $store.i32($M.0, $p29, $i27);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 523, 3} true;
  goto $bb23;
$bb23:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 521, 24} true;
  $i30 := $add.i32($i26, 1);
  call {:cexpr "i"} boogie_si_record_i32($i30);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 521, 14} true;
  $i31 := $slt.i32($i30, $i4);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 521, 3} true;
  $i32 := $i30;
  assume {:branchcond $i31} true;
  goto $bb24, $bb25;
$bb24:
  assume ($i31 == 1);
  $i26 := $i30;
  goto $bb22;
$bb25:
  assume !(($i31 == 1));
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 521, 3} true;
  $i25 := $i32;
  goto $bb21;
$bb26:
  assume ($i34 == 1);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 524, 3} true;
  $i35 := 0;
  goto $bb29;
$bb27:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 524, 3} true;
  assume !(($i34 == 1));
  goto $bb28;
$bb28:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 527, 3} true;
  goto $bb18;
$bb29:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 525, 21} true;
  $i36 := $srem.i32($i25, $i4);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 525, 15} true;
  $i37 := $sext.i32.i64($i36);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 525, 15} true;
  $p38 := $add.ref($p16, $mul.ref($i37, 4));
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 525, 15} true;
  $i39 := $load.i32($M.0, $p38);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 525, 5} true;
  $i40 := $sext.i32.i64($i35);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 525, 5} true;
  $p41 := $add.ref($p21, $mul.ref($i40, 4));
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 525, 13} true;
  $M.1 := $store.i32($M.1, $p41, $i39);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 526, 3} true;
  goto $bb30;
$bb30:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 524, 28} true;
  $i42 := $add.i32($i35, 1);
  call {:cexpr "j"} boogie_si_record_i32($i42);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 524, 14} true;
  $i43 := $slt.i32($i42, $i33);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 524, 3} true;
  assume {:branchcond $i43} true;
  goto $bb31, $bb32;
$bb31:
  assume ($i43 == 1);
  $i35 := $i42;
  goto $bb29;
$bb32:
  assume !(($i43 == 1));
  assume {:sourceloc "../testcases/svcomp/array-memsafety/mult_array-alloca-1.i", 524, 3} true;
  goto $bb28;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 2064));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0, 3096));
procedure  __VERIFIER_nondet_int()
  returns ($r: i32);
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 4128));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 5160));
procedure  __SMACK_static_init()
{
$bb0:
  return;
}
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
