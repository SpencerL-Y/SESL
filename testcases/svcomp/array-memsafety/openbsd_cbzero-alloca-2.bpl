// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/smack ../testcases/svcomp/array-memsafety/openbsd_cbzero-alloca-2.i -ll ../testcases/svcomp/array-memsafety/openbsd_cbzero-alloca-2_IR.ll --bpl ../testcases/svcomp/array-memsafety/openbsd_cbzero-alloca-2.bpl -t --sh-mem-leak --add-line-info

const cbzero: ref;
axiom (cbzero == $sub.ref(0, 1032));
procedure  cbzero($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $p5: ref8;
  var $p6: ref8;
  var $i7: i32;
  var $i8: i1;
$bb0:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/openbsd_cbzero-alloca-2.i", 516, 20} true;
  call {:cexpr "cbzero:arg:length"} boogie_si_record_i32($i1);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/openbsd_cbzero-alloca-2.i", 516, 20} true;
  $i2 := $add.i32($i1, $sub.i32(0, 1));
  call {:cexpr "length"} boogie_si_record_i32($i2);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/openbsd_cbzero-alloca-2.i", 516, 2} true;
  $i3 := $ne.i32($i1, 0);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/openbsd_cbzero-alloca-2.i", 516, 2} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/openbsd_cbzero-alloca-2.i", 516, 2} true;
  $i4, $p5 := $i2, $p0;
  goto $bb4;
$bb2:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/openbsd_cbzero-alloca-2.i", 516, 2} true;
  assume !(($i3 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/openbsd_cbzero-alloca-2.i", 518, 1} true;
  return;
$bb4:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/openbsd_cbzero-alloca-2.i", 517, 5} true;
  $p6 := $add.ref($p5, $mul.ref(1, 1));
  assume {:sourceloc "../testcases/svcomp/array-memsafety/openbsd_cbzero-alloca-2.i", 517, 8} true;
  $M.0 := $store.i8($M.0, $p5, 0);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/openbsd_cbzero-alloca-2.i", 516, 20} true;
  $i7 := $add.i32($i4, $sub.i32(0, 1));
  call {:cexpr "length"} boogie_si_record_i32($i7);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/openbsd_cbzero-alloca-2.i", 516, 2} true;
  $i8 := $ne.i32($i4, 0);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/openbsd_cbzero-alloca-2.i", 516, 2} true;
  assume {:branchcond $i8} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i8 == 1);
  $i4, $p5 := $i7, $p6;
  goto $bb4;
$bb6:
  assume !(($i8 == 1));
  assume {:sourceloc "../testcases/svcomp/array-memsafety/openbsd_cbzero-alloca-2.i", 516, 2} true;
  goto $bb3;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 2064));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const main: ref;
axiom (main == $sub.ref(0, 3096));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref8;
$bb0:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/openbsd_cbzero-alloca-2.i", 520, 16} true;
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/openbsd_cbzero-alloca-2.i", 520, 16} true;
  call $i0 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
  call {:cexpr "length"} boogie_si_record_i32($i0);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/openbsd_cbzero-alloca-2.i", 521, 11} true;
  call $i1 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
  call {:cexpr "n"} boogie_si_record_i32($i1);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/openbsd_cbzero-alloca-2.i", 522, 14} true;
  $i2 := $slt.i32($i0, 1);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/openbsd_cbzero-alloca-2.i", 522, 7} true;
  $i3 := $i0;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/openbsd_cbzero-alloca-2.i", 524, 3} true;
  $i3 := 1;
  goto $bb3;
$bb2:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/openbsd_cbzero-alloca-2.i", 522, 7} true;
  assume !(($i2 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/openbsd_cbzero-alloca-2.i", 0, 0} true;
  assume {:sourceloc "../testcases/svcomp/array-memsafety/openbsd_cbzero-alloca-2.i", 525, 9} true;
  $i4 := $slt.i32($i1, 1);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/openbsd_cbzero-alloca-2.i", 525, 7} true;
  $i5 := $i1;
  assume {:branchcond $i4} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i4 == 1);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/openbsd_cbzero-alloca-2.i", 527, 3} true;
  $i5 := 1;
  goto $bb6;
$bb5:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/openbsd_cbzero-alloca-2.i", 525, 7} true;
  assume !(($i4 == 1));
  goto $bb6;
$bb6:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/openbsd_cbzero-alloca-2.i", 0, 0} true;
  assume {:sourceloc "../testcases/svcomp/array-memsafety/openbsd_cbzero-alloca-2.i", 528, 9} true;
  $i6 := $sgt.i32($i5, $i3);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/openbsd_cbzero-alloca-2.i", 528, 7} true;
  assume {:branchcond $i6} true;
  goto $bb7, $bb8;
$bb7:
  assume ($i6 == 1);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/openbsd_cbzero-alloca-2.i", 528, 19} true;
  goto $bb9;
$bb8:
  assume !(($i6 == 1));
  assume {:sourceloc "../testcases/svcomp/array-memsafety/openbsd_cbzero-alloca-2.i", 529, 48} true;
  $i7 := $sext.i32.i64($i3);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/openbsd_cbzero-alloca-2.i", 529, 55} true;
  $i8 := $mul.i64($i7, 1);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/openbsd_cbzero-alloca-2.i", 529, 30} true;
  call $p9 := $alloc($mul.ref(1, $i8));
  assume {:sourceloc "../testcases/svcomp/array-memsafety/openbsd_cbzero-alloca-2.i", 530, 3} true;
  call cbzero($p9, $i5);
  assume {:sourceloc "../testcases/svcomp/array-memsafety/openbsd_cbzero-alloca-2.i", 531, 3} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "../testcases/svcomp/array-memsafety/openbsd_cbzero-alloca-2.i", 532, 1} true;
  $r := 0;
  return;
}
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0, 4128));
procedure  __VERIFIER_nondet_int()
  returns ($r: i32);
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 5160));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 6192));
procedure  __SMACK_static_init()
{
$bb0:
  return;
}
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
