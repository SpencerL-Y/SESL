// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/sesl ../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i -ll ../testcases/svcomp/ldv-memsafety/memleaks_test7-1_IR.ll --bpl ../testcases/svcomp/ldv-memsafety/memleaks_test7-1.bpl -t --sh-mem-leak --add-line-info

const {:global_variable} {:pointer_to_size 128} ldv_global_msg_list: ref;
axiom (ldv_global_msg_list == $sub.ref(0, 1040));
const ldv_nonpositive: ref;
axiom (ldv_nonpositive == $sub.ref(0, 2072));
procedure  ldv_nonpositive()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
$bb0:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 514, 10} true;
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 514, 10} true;
  call $i0 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
  call {:cexpr "r"} boogie_si_record_i32($i0);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 515, 6} true;
  $i1 := $slt.i32($i0, 0);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 515, 5} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 515, 10} true;
  $i2 := $i0;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 516, 7} true;
  $i2 := 0;
  goto $bb3;
$bb3:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 0, 0} true;
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 517, 1} true;
  $r := $i2;
  return;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 3104));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0, 4136));
procedure  __VERIFIER_nondet_int()
  returns ($r: i32);
const ldv_positive: ref;
axiom (ldv_positive == $sub.ref(0, 5168));
procedure  ldv_positive()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
$bb0:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 519, 10} true;
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 519, 10} true;
  call $i0 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
  call {:cexpr "r"} boogie_si_record_i32($i0);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 520, 6} true;
  $i1 := $sgt.i32($i0, 0);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 520, 5} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 520, 10} true;
  $i2 := $i0;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 521, 7} true;
  $i2 := 1;
  goto $bb3;
$bb3:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 0, 0} true;
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 522, 1} true;
  $r := $i2;
  return;
}
const ldv_malloc: ref;
axiom (ldv_malloc == $sub.ref(0, 6200));
procedure  ldv_malloc($i0: i32)
  returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref8;
  var $p4: ref8;
$bb0:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 526, 5} true;
  call {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i32($i0);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 526, 5} true;
  call $i1 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 526, 5} true;
  $i2 := $ne.i32($i1, 0);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 526, 5} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 527, 10} true;
  call $p3 := malloc($i0);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 527, 3} true;
  $p4 := $p3;
  goto $bb3;
$bb2:
  assume !(($i2 == 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 529, 3} true;
  $p4 := $0.ref;
  goto $bb3;
$bb3:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 0, 0} true;
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 531, 1} true;
  $r := $p4;
  return;
}
const malloc: ref;
axiom (malloc == $sub.ref(0, 7232));
procedure  malloc($i0: i32)
  returns ($r: ref)
{
  call $r := $malloc($zext.i32.i64($i0));
}
const ldv_zalloc: ref;
axiom (ldv_zalloc == $sub.ref(0, 8264));
procedure  ldv_zalloc($i0: i32)
  returns ($r: ref)
{
  var $p1: ref8;
$bb0:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 533, 9} true;
  call {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i32($i0);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 533, 9} true;
  call $p1 := calloc($i0, 1);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 533, 2} true;
  $r := $p1;
  return;
}
const calloc: ref;
axiom (calloc == $sub.ref(0, 9296));
procedure  calloc($i0: i32, $i1: i32)
  returns ($r: ref);
const ldv_msg_alloc: ref;
axiom (ldv_msg_alloc == $sub.ref(0, 10328));
procedure  ldv_msg_alloc()
  returns ($r: ref)
{
  var $p0: ref8;
  var $p1: ref;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
$bb0:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 576, 25} true;
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 576, 25} true;
  call $p0 := ldv_malloc(24);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 576, 8} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 577, 5} true;
  $i2 := $ne.ref($p1, $0.ref);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 577, 5} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 578, 8} true;
  $p3 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 578, 12} true;
  $M.0 := $store.ref($M.0, $p3, $0.ref);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 579, 28} true;
  $p4 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 579, 3} true;
  call LDV_INIT_LIST_HEAD($p4);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 580, 2} true;
  goto $bb3;
$bb2:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 577, 5} true;
  assume !(($i2 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 581, 2} true;
  $r := $p1;
  return;
}
const LDV_INIT_LIST_HEAD: ref;
axiom (LDV_INIT_LIST_HEAD == $sub.ref(0, 11360));
procedure  LDV_INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
$bb0:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 540, 8} true;
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 540, 8} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 540, 13} true;
  $M.0 := $store.ref($M.0, $p1, $p0);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 541, 8} true;
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 541, 13} true;
  $M.0 := $store.ref($M.0, $p2, $p0);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 542, 1} true;
  return;
}
const ldv_msg_fill: ref;
axiom (ldv_msg_fill == $sub.ref(0, 12392));
procedure  ldv_msg_fill($p0: ref, $p1: ref, $i2: i32)
  returns ($r: i32)
{
  var $p3: ref8;
  var $i4: i1;
  var $p6: ref8;
  var $p7: ref;
  var $i5: i32;
$bb0:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 585, 9} true;
  call {:cexpr "ldv_msg_fill:arg:len"} boogie_si_record_i32($i2);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 585, 9} true;
  call $p3 := ldv_malloc($i2);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 586, 6} true;
  $i4 := $ne.ref($p3, $0.ref);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 586, 5} true;
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 587, 2} true;
  call $p6 := memcpy($p3, $p1, $i2);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 588, 7} true;
  $p7 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 588, 12} true;
  $M.0 := $store.ref($M.0, $p7, $p3);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 589, 2} true;
  $i5 := 0;
  goto $bb3;
$bb2:
  assume !(($i4 == 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 586, 12} true;
  $i5 := 3;
  goto $bb3;
$bb3:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 0, 0} true;
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 590, 1} true;
  $r := $i5;
  return;
}
const memcpy: ref;
axiom (memcpy == $sub.ref(0, 13424));
procedure  memcpy($p0: ref, $p1: ref, $i2: i32)
  returns ($r: ref);
const ldv_msg_free: ref;
axiom (ldv_msg_free == $sub.ref(0, 14456));
procedure  ldv_msg_free($p0: ref)
{
  var $i1: i1;
  var $p2: ref;
  var $p3: ref8;
  var $p4: ref8;
$bb0:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 592, 5} true;
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 592, 5} true;
  $i1 := $ne.ref($p0, $0.ref);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 592, 5} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 593, 13} true;
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 593, 13} true;
  $p3 := $load.ref($M.0, $p2);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 593, 3} true;
  call free_($p3);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 594, 8} true;
  $p4 := $bitcast.ref.ref($p0);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 594, 3} true;
  call free_($p4);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 595, 2} true;
  goto $bb3;
$bb2:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 592, 5} true;
  assume !(($i1 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 596, 1} true;
  return;
}
const free_: ref;
axiom (free_ == $sub.ref(0, 15488));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const ldv_submit_msg: ref;
axiom (ldv_submit_msg == $sub.ref(0, 16520));
procedure  ldv_submit_msg($p0: ref)
  returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
$bb0:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 598, 6} true;
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 598, 6} true;
  call $i1 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 598, 6} true;
  $i2 := $ne.i32($i1, 0);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 598, 6} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 599, 23} true;
  $p3 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 599, 4} true;
  call ldv_list_add($p3, ldv_global_msg_list);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 600, 4} true;
  $i4 := 0;
  goto $bb3;
$bb2:
  assume !(($i2 == 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 602, 3} true;
  $i4 := $sub.i32(0, 1);
  goto $bb3;
$bb3:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 0, 0} true;
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 603, 1} true;
  $r := $i4;
  return;
}
const ldv_list_add: ref;
axiom (ldv_list_add == $sub.ref(0, 17552));
procedure  ldv_list_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
$bb0:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 559, 34} true;
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 559, 34} true;
  $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 559, 34} true;
  $p3 := $load.ref($M.0, $p2);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 559, 2} true;
  call __ldv_list_add($p0, $p1, $p3);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 560, 1} true;
  return;
}
const __ldv_list_add: ref;
axiom (__ldv_list_add == $sub.ref(0, 18584));
procedure  __ldv_list_add($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
$bb0:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 547, 8} true;
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 547, 8} true;
  $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 547, 13} true;
  $M.0 := $store.ref($M.0, $p3, $p0);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 548, 7} true;
  $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 548, 12} true;
  $M.0 := $store.ref($M.0, $p4, $p2);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 549, 7} true;
  $p5 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 549, 12} true;
  $M.0 := $store.ref($M.0, $p5, $p1);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 550, 8} true;
  $p6 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 550, 13} true;
  $M.0 := $store.ref($M.0, $p6, $p0);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 551, 1} true;
  return;
}
const ldv_destroy_msgs: ref;
axiom (ldv_destroy_msgs == $sub.ref(0, 19616));
procedure  ldv_destroy_msgs()
{
  var $p0: ref;
  var $p1: ref8;
  var $p2: ref8;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref8;
  var $p8: ref8;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref8;
  var $p19: ref8;
  var $p20: ref;
  var $p21: ref;
  var $i22: i1;
$bb0:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 607, 93} true;
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 607, 93} true;
  $p0 := $M.1;
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 607, 118} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 607, 133} true;
  $p2 := $add.ref($p1, $mul.ref($sub.i64(0, $zext.i32.i64($p2i.ref.i32($add.ref($add.ref($0.ref, $mul.ref(0, 24)), $mul.ref(8, 1))))), 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 607, 100} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 607, 248} true;
  $p4 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(8, 1));
  $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 607, 253} true;
  $p6 := $load.ref($M.0, $p5);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 607, 280} true;
  $p7 := $bitcast.ref.ref($p6);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 607, 295} true;
  $p8 := $add.ref($p7, $mul.ref($sub.i64(0, $zext.i32.i64($p2i.ref.i32($add.ref($add.ref($0.ref, $mul.ref(0, 24)), $mul.ref(8, 1))))), 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 607, 260} true;
  $p9 := $bitcast.ref.ref($p8);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 607, 349} true;
  $p10 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 607, 354} true;
  $i11 := $ne.ref($p10, ldv_global_msg_list);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 607, 2} true;
  assume {:branchcond $i11} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i11 == 1);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 607, 2} true;
  $p12, $p13 := $p2, $p8;
  goto $bb4;
$bb2:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 607, 2} true;
  assume !(($i11 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 611, 1} true;
  return;
$bb4:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 608, 22} true;
  $p14 := $add.ref($add.ref($p12, $mul.ref(0, 24)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 608, 3} true;
  call ldv_list_del($p14);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 609, 3} true;
  call ldv_msg_free($p12);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 610, 2} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 607, 455} true;
  $p15 := $add.ref($add.ref($p13, $mul.ref(0, 24)), $mul.ref(8, 1));
  $p16 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 607, 460} true;
  $p17 := $load.ref($M.0, $p16);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 607, 485} true;
  $p18 := $bitcast.ref.ref($p17);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 607, 500} true;
  $p19 := $add.ref($p18, $mul.ref($sub.i64(0, $zext.i32.i64($p2i.ref.i32($add.ref($add.ref($0.ref, $mul.ref(0, 24)), $mul.ref(8, 1))))), 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 607, 467} true;
  $p20 := $bitcast.ref.ref($p19);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 607, 349} true;
  $p21 := $add.ref($add.ref($p13, $mul.ref(0, 24)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 607, 354} true;
  $i22 := $ne.ref($p21, ldv_global_msg_list);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 607, 2} true;
  assume {:branchcond $i22} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i22 == 1);
  $p12, $p13 := $p13, $p19;
  goto $bb4;
$bb7:
  assume !(($i22 == 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 607, 2} true;
  goto $bb3;
}
const ldv_list_del: ref;
axiom (ldv_list_del == $sub.ref(0, 20648));
procedure  ldv_list_del($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
$bb0:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 567, 24} true;
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 567, 24} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 567, 24} true;
  $p2 := $load.ref($M.0, $p1);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 567, 37} true;
  $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 567, 37} true;
  $p4 := $load.ref($M.0, $p3);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 567, 2} true;
  call __ldv_list_del($p2, $p4);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 568, 1} true;
  return;
}
const __ldv_list_del: ref;
axiom (__ldv_list_del == $sub.ref(0, 21680));
procedure  __ldv_list_del($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
$bb0:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 554, 8} true;
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 554, 8} true;
  $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 554, 13} true;
  $M.0 := $store.ref($M.0, $p2, $p0);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 555, 8} true;
  $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 555, 13} true;
  $M.0 := $store.ref($M.0, $p3, $p1);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 556, 1} true;
  return;
}
const ldv_kobject_del: ref;
axiom (ldv_kobject_del == $sub.ref(0, 22712));
procedure  ldv_kobject_del($p0: ref)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 694, 14} true;
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 694, 14} true;
  $i1 := $ne.ref($p0, $0.ref);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 694, 13} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb3;
$bb1:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 694, 13} true;
  assume ($i1 == 1);
  goto $bb2;
$bb2:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 696, 1} true;
  return;
$bb3:
  assume !(($i1 == 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 695, 17} true;
  goto $bb2;
}
const ldv_kobject_put: ref;
axiom (ldv_kobject_put == $sub.ref(0, 23744));
procedure  ldv_kobject_put($p0: ref)
{
  var $i1: i1;
  var $p2: ref;
  var $i3: i32;
$bb0:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 711, 13} true;
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 711, 13} true;
  $i1 := $ne.ref($p0, $0.ref);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 711, 13} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 712, 37} true;
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(24, 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 712, 17} true;
  call $i3 := ldv_kref_put($p2, ldv_kobject_release);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 713, 9} true;
  goto $bb3;
$bb2:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 711, 13} true;
  assume !(($i1 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 714, 1} true;
  return;
}
const ldv_kobject_release: ref;
axiom (ldv_kobject_release == $sub.ref(0, 24776));
procedure  ldv_kobject_release($p0: ref)
{
  var $p1: ref8;
  var $p2: ref8;
  var $p3: ref;
$bb0:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 706, 122} true;
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 706, 122} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 706, 137} true;
  $p2 := $add.ref($p1, $mul.ref($sub.i64(0, $zext.i32.i64($p2i.ref.i32($add.ref($add.ref($0.ref, $mul.ref(0, 32)), $mul.ref(24, 1))))), 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 706, 98} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 707, 9} true;
  call ldv_kobject_cleanup($p3);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 708, 1} true;
  return;
}
const ldv_kref_put: ref;
axiom (ldv_kref_put == $sub.ref(0, 25808));
procedure  ldv_kref_put($p0: ref, $p1: ref)
  returns ($r: i32)
{
  var $i2: i32;
$bb0:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 690, 16} true;
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 690, 16} true;
  call $i2 := ldv_kref_sub($p0, 1, $p1);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 690, 9} true;
  $r := $i2;
  return;
}
const ldv_kref_sub: ref;
axiom (ldv_kref_sub == $sub.ref(0, 26840));
procedure  ldv_kref_sub($p0: ref, $i1: i32, $p2: ref)
  returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
$bb0:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 674, 59} true;
  call {:cexpr "ldv_kref_sub:arg:count"} boogie_si_record_i32($i1);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 674, 59} true;
  $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 674, 14} true;
  call $i4 := ldv_atomic_sub_return($i1, $p3);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 674, 70} true;
  $i5 := $eq.i32($i4, 0);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 674, 13} true;
  assume {:branchcond $i5} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i5 == 1);
  call devirtbounce($p2, $p0);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 676, 17} true;
  $i6 := 1;
  goto $bb3;
$bb2:
  assume !(($i5 == 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 678, 9} true;
  $i6 := 0;
  goto $bb3;
$bb3:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 0, 0} true;
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 679, 1} true;
  $r := $i6;
  return;
}
const ldv_atomic_sub_return: ref;
axiom (ldv_atomic_sub_return == $sub.ref(0, 27872));
procedure  ldv_atomic_sub_return($i0: i32, $p1: ref)
  returns ($r: i32)
{
  var $p2: ref32;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref32;
$bb0:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 666, 19} true;
  call {:cexpr "ldv_atomic_sub_return:arg:i"} boogie_si_record_i32($i0);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 666, 19} true;
  $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 666, 19} true;
  $i3 := $load.i32($M.0, $p2);
  call {:cexpr "temp"} boogie_si_record_i32($i3);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 667, 14} true;
  $i4 := $sub.i32($i3, $i0);
  call {:cexpr "temp"} boogie_si_record_i32($i4);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 668, 12} true;
  $p5 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 668, 20} true;
  $M.0 := $store.i32($M.0, $p5, $i4);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 669, 9} true;
  $r := $i4;
  return;
}
const ldv_kobject_cleanup: ref;
axiom (ldv_kobject_cleanup == $sub.ref(0, 28904));
procedure  ldv_kobject_cleanup($p0: ref)
{
  var $p1: ref;
  var $p2: ref8;
  var $p3: ref8;
  var $i4: i1;
$bb0:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 699, 28} true;
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 699, 28} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 699, 28} true;
  $p2 := $load.ref($M.2, $p1);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 700, 14} true;
  $p3 := $bitcast.ref.ref($p0);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 700, 9} true;
  call free_($p3);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 701, 13} true;
  $i4 := $ne.ref($p2, $0.ref);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 701, 13} true;
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 702, 17} true;
  call free_($p2);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 703, 9} true;
  goto $bb3;
$bb2:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 701, 13} true;
  assume !(($i4 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 704, 1} true;
  return;
}
const ldv_kobject_get: ref;
axiom (ldv_kobject_get == $sub.ref(0, 29936));
procedure  ldv_kobject_get($p0: ref)
  returns ($r: ref)
{
  var $i1: i1;
  var $p2: ref;
$bb0:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 717, 13} true;
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 717, 13} true;
  $i1 := $ne.ref($p0, $0.ref);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 717, 13} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 718, 37} true;
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(24, 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 718, 17} true;
  call ldv_kref_get($p2);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 718, 17} true;
  goto $bb3;
$bb2:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 717, 13} true;
  assume !(($i1 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 719, 9} true;
  $r := $p0;
  return;
}
const ldv_kref_get: ref;
axiom (ldv_kref_get == $sub.ref(0, 30968));
procedure  ldv_kref_get($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
$bb0:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 686, 42} true;
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 686, 42} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 686, 9} true;
  call $i2 := ldv_atomic_add_return(1, $p1);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 687, 1} true;
  return;
}
const ldv_atomic_add_return: ref;
axiom (ldv_atomic_add_return == $sub.ref(0, 32000));
procedure  ldv_atomic_add_return($i0: i32, $p1: ref)
  returns ($r: i32)
{
  var $p2: ref32;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref32;
$bb0:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 658, 19} true;
  call {:cexpr "ldv_atomic_add_return:arg:i"} boogie_si_record_i32($i0);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 658, 19} true;
  $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 658, 19} true;
  $i3 := $load.i32($M.0, $p2);
  call {:cexpr "temp"} boogie_si_record_i32($i3);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 659, 14} true;
  $i4 := $add.i32($i3, $i0);
  call {:cexpr "temp"} boogie_si_record_i32($i4);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 660, 12} true;
  $p5 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 660, 20} true;
  $M.0 := $store.i32($M.0, $p5, $i4);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 661, 9} true;
  $r := $i4;
  return;
}
const ldv_kobject_init: ref;
axiom (ldv_kobject_init == $sub.ref(0, 33032));
procedure  ldv_kobject_init($p0: ref)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 730, 14} true;
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 730, 14} true;
  $i1 := $ne.ref($p0, $0.ref);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 730, 13} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 733, 9} true;
  call ldv_kobject_init_internal($p0);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 734, 9} true;
  goto $bb4;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 731, 17} true;
  goto $bb3;
$bb3:
  assume true;
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 736, 2} true;
  goto $bb4;
$bb4:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 737, 1} true;
  return;
}
const ldv_kobject_init_internal: ref;
axiom (ldv_kobject_init_internal == $sub.ref(0, 34064));
procedure  ldv_kobject_init_internal($p0: ref)
{
  var $i1: i1;
  var $p2: ref;
  var $p3: ref;
$bb0:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 723, 14} true;
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 723, 14} true;
  $i1 := $ne.ref($p0, $0.ref);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 723, 13} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 725, 30} true;
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(24, 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 725, 9} true;
  call ldv_kref_init($p2);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 726, 35} true;
  $p3 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 726, 9} true;
  call LDV_INIT_LIST_HEAD($p3);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 727, 1} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 724, 17} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 727, 1} true;
  return;
}
const llvm.dbg.label: ref;
axiom (llvm.dbg.label == $sub.ref(0, 35096));
procedure  llvm.dbg.label($p0: ref);
const ldv_kref_init: ref;
axiom (ldv_kref_init == $sub.ref(0, 36128));
procedure  ldv_kref_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref32;
$bb0:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 682, 19} true;
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 682, 19} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
  $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 682, 39} true;
  $M.0 := $store.i32($M.0, $p2, 1);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 683, 1} true;
  return;
}
const ldv_kobject_create: ref;
axiom (ldv_kobject_create == $sub.ref(0, 37160));
procedure  ldv_kobject_create()
  returns ($r: ref)
{
  var $p0: ref8;
  var $p1: ref;
  var $i2: i1;
  var $p4: ref8;
  var $p5: ref8;
  var $p3: ref;
$bb0:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 741, 16} true;
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 741, 16} true;
  call $p0 := ldv_malloc(32);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 741, 16} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 742, 14} true;
  $i2 := $ne.ref($p1, $0.ref);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 742, 13} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 744, 9} true;
  $p4 := $bitcast.ref.ref($p1);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 744, 2} true;
  call $p5 := memset($p4, 0, 32);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 745, 9} true;
  call ldv_kobject_init($p1);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 746, 9} true;
  $p3 := $p0;
  goto $bb3;
$bb2:
  assume !(($i2 == 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 743, 17} true;
  $p3 := $0.ref;
  goto $bb3;
$bb3:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 0, 0} true;
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 747, 1} true;
  $r := $p3;
  return;
}
const memset: ref;
axiom (memset == $sub.ref(0, 38192));
procedure  memset($p0: ref, $i1: i32, $i2: i32)
  returns ($r: ref);
const f: ref;
axiom (f == $sub.ref(0, 39224));
procedure  f()
  returns ($r: i32)
{
  var $i0: i32;
$bb0:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 752, 9} true;
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 752, 9} true;
  call $i0 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 752, 2} true;
  $r := $i0;
  return;
}
const g: ref;
axiom (g == $sub.ref(0, 40256));
procedure  g()
  returns ($r: i32)
{
  var $i0: i32;
$bb0:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 755, 9} true;
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 755, 9} true;
  call $i0 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 755, 2} true;
  $r := $i0;
  return;
}
const f6: ref;
axiom (f6 == $sub.ref(0, 41288));
procedure  f6()
  returns ($r: i32)
{
  var $i0: i32;
$bb0:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 758, 9} true;
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 758, 9} true;
  call $i0 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 758, 2} true;
  $r := $i0;
  return;
}
const g6: ref;
axiom (g6 == $sub.ref(0, 42320));
procedure  g6()
  returns ($r: i32)
{
  var $i0: i32;
$bb0:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 761, 9} true;
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 761, 9} true;
  call $i0 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 761, 2} true;
  $r := $i0;
  return;
}
const probe1_6: ref;
axiom (probe1_6 == $sub.ref(0, 43352));
procedure  probe1_6($p0: ref)
  returns ($r: i32)
{
  var $p1: ref8;
  var $p2: ref32;
  var $i3: i1;
  var $i5: i32;
  var $i6: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref8;
  var $p11: ref;
  var $i7: i32;
  var $p12: ref8;
  var $i4: i32;
$bb0:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 765, 18} true;
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 765, 18} true;
  call $p1 := ldv_malloc(4);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 765, 11} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 766, 6} true;
  $i3 := $eq.ref($p2, $0.ref);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 766, 5} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 767, 3} true;
  $i4 := 3;
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 768, 8} true;
  call $i5 := f6();
  call {:cexpr "ret"} boogie_si_record_i32($i5);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 769, 8} true;
  $i6 := $slt.i32($i5, 0);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 769, 5} true;
  assume {:branchcond $i6} true;
  goto $bb4, $bb5;
$bb3:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 0, 0} true;
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 779, 1} true;
  $r := $i4;
  return;
$bb4:
  assume ($i6 == 1);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 770, 3} true;
  $i7 := $i5;
  goto $bb6;
$bb5:
  assume !(($i6 == 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 771, 8} true;
  call $i8 := g6();
  call {:cexpr "ret"} boogie_si_record_i32($i8);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 772, 8} true;
  $i9 := $slt.i32($i8, 0);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 772, 5} true;
  assume {:branchcond $i9} true;
  goto $bb7, $bb8;
$bb6:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 0, 0} true;
  assume true;
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 777, 8} true;
  $p12 := $bitcast.ref.ref($p2);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 777, 3} true;
  call free_($p12);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 778, 3} true;
  $i4 := $i7;
  goto $bb3;
$bb7:
  assume ($i9 == 1);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 773, 3} true;
  $i7 := $i8;
  goto $bb6;
$bb8:
  assume !(($i9 == 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 774, 9} true;
  $p10 := $bitcast.ref.ref($p2);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 774, 5} true;
  $p11 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 774, 7} true;
  $M.3 := $store.ref($M.3, $p11, $p1);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 775, 2} true;
  $i4 := 0;
  goto $bb3;
}
const disconnect_2_6: ref;
axiom (disconnect_2_6 == $sub.ref(0, 44384));
procedure  disconnect_2_6($p0: ref)
{
$bb0:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 781, 1} true;
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 781, 1} true;
  return;
}
const entry_point: ref;
axiom (entry_point == $sub.ref(0, 45416));
procedure  entry_point()
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;
$bb0:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 784, 12} true;
  call $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume true;
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 784, 12} true;
  call $i1 := probe1_6($p0);
  call {:cexpr "ret"} boogie_si_record_i32($i1);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 785, 8} true;
  $i2 := $eq.i32($i1, 0);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 785, 5} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 786, 3} true;
  call disconnect_2_6($p0);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 787, 2} true;
  goto $bb3;
$bb2:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 785, 5} true;
  assume !(($i2 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 788, 1} true;
  return;
}
const main: ref;
axiom (main == $sub.ref(0, 46448));
procedure {:entrypoint} main()
{
$bb0:
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 790, 6} true;
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 790, 6} true;
  call entry_point();
  assume {:sourceloc "../testcases/svcomp/ldv-memsafety/memleaks_test7-1.i", 791, 1} true;
  return;
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 47480));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 48512));
procedure  __SMACK_static_init()
{
$bb0:
  return;
}
const devirtbounce: ref;
axiom (devirtbounce == $sub.ref(0, 49544));
procedure  devirtbounce(funcPtr: ref, arg: ref)
{
  var $p0: ref8;
  var $i1: i1;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $i1 := $eq.ref(ldv_kobject_release, $p0);
  assume {:branchcond $i1} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i1 == 1);
  call ldv_kobject_release(arg);
  return;
$bb3:
  assume !(($i1 == 1));
  assume false;
}
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
