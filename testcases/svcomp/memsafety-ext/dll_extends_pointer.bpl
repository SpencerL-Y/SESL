// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/sesl ../testcases/svcomp/memsafety-ext/dll_extends_pointer.i -ll ../testcases/svcomp/memsafety-ext/dll_extends_pointer_IR.ll --bpl ../testcases/svcomp/memsafety-ext/dll_extends_pointer.bpl -t --sh-mem-leak --add-line-info

const reach_error: ref;
axiom (reach_error == $sub.ref(0, 1032));
procedure  reach_error()
{
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 3, 20} true;
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 3, 20} true;
  return;
}
const main: ref;
axiom (main == $sub.ref(0, 2064));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $p0: ref8;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref8;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref8;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref8;
  var $p24: ref8;
  var $i25: i1;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 529, 6} true;
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 529, 6} true;
  call $p0 := malloc(32);
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 529, 6} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 530, 5} true;
  $p2 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 530, 10} true;
  $M.0 := $store.ref($M.0, $p2, $0.ref);
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 531, 5} true;
  $p3 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 531, 10} true;
  $M.1 := $store.ref($M.1, $p3, $0.ref);
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 532, 17} true;
  $p4 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 532, 5} true;
  $p5 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 532, 11} true;
  $M.2 := $store.ref($M.2, $p5, $p4);
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 536, 1} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 538, 7} true;
  call $p6 := malloc(32);
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 538, 7} true;
  $p7 := $bitcast.ref.ref($p6);
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 539, 6} true;
  $p8 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 539, 11} true;
  $M.0 := $store.ref($M.0, $p8, $p0);
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 540, 9} true;
  $p9 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 540, 14} true;
  $M.1 := $store.ref($M.1, $p9, $p6);
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 544, 15} true;
  call $p10 := malloc(1);
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 544, 15} true;
  $p11 := $bitcast.ref.ref($p10);
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 544, 7} true;
  $p12 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(16, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 544, 13} true;
  $M.2 := $store.ref($M.2, $p12, $p10);
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 553, 21} true;
  $i13 := $ne.ref($0.ref, $p7);
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 553, 2} true;
  assume {:branchcond $i13} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i13 == 1);
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 553, 2} true;
  $p14 := $p6;
  goto $bb5;
$bb3:
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 553, 2} true;
  assume !(($i13 == 1));
  goto $bb4;
$bb4:
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 563, 2} true;
  $r := 0;
  return;
$bb5:
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 556, 16} true;
  $p15 := $add.ref($add.ref($p14, $mul.ref(0, 32)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 556, 16} true;
  $p16 := $load.ref($M.0, $p15);
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 557, 11} true;
  $p17 := $add.ref($add.ref($p14, $mul.ref(0, 32)), $mul.ref(24, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 557, 22} true;
  $p18 := $add.ref($add.ref($p14, $mul.ref(0, 32)), $mul.ref(16, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 557, 22} true;
  $p19 := $load.ref($M.2, $p18);
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 557, 16} true;
  $i20 := $ne.ref($p17, $p19);
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 557, 7} true;
  assume {:branchcond $i20} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i20 == 1);
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 559, 12} true;
  $p21 := $add.ref($add.ref($p14, $mul.ref(0, 32)), $mul.ref(16, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 559, 12} true;
  $p22 := $load.ref($M.2, $p21);
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 559, 9} true;
  $p23 := $bitcast.ref.ref($p22);
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 559, 4} true;
  call free_($p23);
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 560, 3} true;
  goto $bb8;
$bb7:
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 557, 7} true;
  assume !(($i20 == 1));
  goto $bb8;
$bb8:
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 561, 8} true;
  $p24 := $bitcast.ref.ref($p14);
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 561, 3} true;
  call free_($p24);
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 553, 21} true;
  $i25 := $ne.ref($0.ref, $p16);
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 553, 2} true;
  assume {:branchcond $i25} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i25 == 1);
  $p14 := $p16;
  goto $bb5;
$bb10:
  assume !(($i25 == 1));
  assume {:sourceloc "../testcases/svcomp/memsafety-ext/dll_extends_pointer.i", 553, 2} true;
  goto $bb4;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 3096));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const malloc: ref;
axiom (malloc == $sub.ref(0, 4128));
procedure  malloc($i0: i32)
  returns ($r: ref)
{
  call $r := $malloc($zext.i32.i64($i0));
}
const free_: ref;
axiom (free_ == $sub.ref(0, 5160));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 6192));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 7224));
procedure  __SMACK_static_init()
{
$bb0:
  return;
}
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
