// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/smack ../testcases/svcomp/memsafety/20020406-1.i -ll ../testcases/svcomp/memsafety/20020406-1_IR.ll --bpl ../testcases/svcomp/memsafety/20020406-1.bpl -t --sh-mem-leak --add-line-info

const {:global_variable} {:pointer_to_size 16} .str: ref;
axiom (.str == $sub.ref(0, 1026));
const {:global_variable} {:pointer_to_size 104} {:count 13} .str.1: ref;
axiom (.str.1 == $sub.ref(0, 2063));
const {:global_variable} {:pointer_to_size 152} {:count 19} __PRETTY_FUNCTION__.reach_error: ref;
axiom (__PRETTY_FUNCTION__.reach_error == $sub.ref(0, 3106));
const reach_error: ref;
axiom (reach_error == $sub.ref(0, 4138));
procedure  reach_error()
{
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 12, 83} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 12, 83} true;
  call __assert_fail(.str, .str.1, 3, __PRETTY_FUNCTION__.reach_error);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 12, 83} true;
  assume false;
}
const __assert_fail: ref;
axiom (__assert_fail == $sub.ref(0, 5170));
procedure  __assert_fail($p0: ref, $p1: ref, $i2: i32, $p3: ref);
const FFmul: ref;
axiom (FFmul == $sub.ref(0, 6202));
procedure  FFmul($i0: i32, $i1: i32)
  returns ($r: i32)
{
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 879, 3} true;
  call {:cexpr "FFmul:arg:x"} boogie_si_record_i32($i0);
  call {:cexpr "FFmul:arg:y"} boogie_si_record_i32($i1);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 879, 3} true;
  $r := $i0;
  return;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 7234));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const DUPFFdeg: ref;
axiom (DUPFFdeg == $sub.ref(0, 8266));
procedure  DUPFFdeg($p0: ref)
  returns ($r: i32)
{
  var $p1: ref32;
  var $i2: i32;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 890, 13} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 890, 13} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(4, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 890, 13} true;
  $i2 := $load.i32($M.0, $p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 890, 3} true;
  $r := $i2;
  return;
}
const DUPFFnew: ref;
axiom (DUPFFnew == $sub.ref(0, 9298));
procedure  DUPFFnew($i0: i32)
  returns ($r: ref)
{
  var $p1: ref8;
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i32;
  var $p9: ref8;
  var $p10: ref32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref32;
  var $p14: ref8;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i32;
  var $p19: ref8;
  var $p20: ref32;
  var $p21: ref32;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 894, 22} true;
  call {:cexpr "DUPFFnew:arg:maxdeg"} boogie_si_record_i32($i0);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 894, 22} true;
  call $p1 := malloc(16);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 894, 15} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 895, 8} true;
  $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 895, 15} true;
  $M.1 := $store.ref($M.1, $p3, $0.ref);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 896, 14} true;
  $i4 := $sge.i32($i0, 0);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 896, 7} true;
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 897, 42} true;
  $i5 := $add.i32($i0, 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 897, 35} true;
  $i6 := $sext.i32.i64($i5);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 897, 45} true;
  $i7 := $mul.i64($i6, 4);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 897, 35} true;
  $i8 := $trunc.i64.i32($i7);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 897, 28} true;
  call $p9 := malloc($i8);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 897, 19} true;
  $p10 := $bitcast.ref.ref($p9);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 897, 10} true;
  $p11 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 897, 17} true;
  $M.1 := $store.ref($M.1, $p11, $p9);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 898, 17} true;
  $p12 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 898, 17} true;
  $p13 := $load.ref($M.1, $p12);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 898, 12} true;
  $p14 := $bitcast.ref.ref($p13);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 898, 35} true;
  $i15 := $add.i32($i0, 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 898, 28} true;
  $i16 := $sext.i32.i64($i15);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 898, 38} true;
  $i17 := $mul.i64($i16, 4);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 898, 28} true;
  $i18 := $trunc.i64.i32($i17);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 898, 5} true;
  call $p19 := memset($p14, 0, $i18);
  assume $isExternal($p19);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 899, 3} true;
  goto $bb3;
$bb2:
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 896, 7} true;
  assume !(($i4 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 900, 8} true;
  $p20 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 900, 15} true;
  $M.3 := $store.i32($M.3, $p20, $i0);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 901, 8} true;
  $p21 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 901, 12} true;
  $M.0 := $store.i32($M.0, $p21, $sub.i32(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 902, 3} true;
  $r := $p2;
  return;
}
const malloc: ref;
axiom (malloc == $sub.ref(0, 10330));
procedure  malloc($i0: i32)
  returns ($r: ref)
{
  call $r := $malloc($zext.i32.i64($i0));
}
const memset: ref;
axiom (memset == $sub.ref(0, 11362));
procedure  memset($p0: ref, $i1: i32, $i2: i32)
  returns ($r: ref);
const DUPFFfree: ref;
axiom (DUPFFfree == $sub.ref(0, 12394));
procedure  DUPFFfree($p0: ref)
{
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 906, 1} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 906, 1} true;
  return;
}
const DUPFFswap: ref;
axiom (DUPFFswap == $sub.ref(0, 13426));
procedure  DUPFFswap($p0: ref, $p1: ref)
{
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 909, 1} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 909, 1} true;
  return;
}
const DUPFFcopy: ref;
axiom (DUPFFcopy == $sub.ref(0, 14458));
procedure  DUPFFcopy($p0: ref)
  returns ($r: ref)
{
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 912, 3} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 912, 3} true;
  $r := $p0;
  return;
}
const DUPFFshift_add: ref;
axiom (DUPFFshift_add == $sub.ref(0, 15490));
procedure  DUPFFshift_add($p0: ref, $p1: ref, $i2: i32, $i3: i32)
{
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 916, 1} true;
  call {:cexpr "DUPFFshift_add:arg:deg"} boogie_si_record_i32($i2);
  call {:cexpr "DUPFFshift_add:arg:coeff"} boogie_si_record_i32($i3);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 916, 1} true;
  return;
}
const DUPFFexgcd: ref;
axiom (DUPFFexgcd == $sub.ref(0, 16522));
procedure  DUPFFexgcd($p0: ref, $p1: ref, $p2: ref, $p3: ref)
  returns ($r: ref)
{
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref32;
  var $p15: ref32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref32;
  var $p29: ref32;
  var $p30: ref32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref32;
  var $p36: ref32;
  var $p37: ref32;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref32;
  var $i43: i64;
  var $p44: ref32;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref32;
  var $i52: i64;
  var $p53: ref32;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var $i65: i1;
  var $i66: i32;
  var $i67: i1;
  var $p8: ref;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 922, 7} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 922, 7} true;
  call $i4 := DUPFFdeg($p2);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 922, 21} true;
  call $i5 := DUPFFdeg($p3);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 922, 19} true;
  $i6 := $slt.i32($i4, $i5);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 922, 7} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 922, 41} true;
  call $p7 := DUPFFexgcd($p1, $p0, $p3, $p2);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 922, 34} true;
  $p8 := $p7;
  goto $bb3;
$bb2:
  assume !(($i6 == 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 923, 7} true;
  call $i9 := DUPFFdeg($p2);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 923, 19} true;
  $i10 := $ne.i32($i9, 2);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 923, 24} true;
  assume {:branchcond $i10} true;
  goto $bb4, $bb6;
$bb3:
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 0, 0} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 963, 1} true;
  $r := $p8;
  return;
$bb4:
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 923, 24} true;
  assume ($i10 == 1);
  goto $bb5;
$bb5:
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 923, 45} true;
  call abort();
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 923, 45} true;
  assume false;
$bb6:
  assume !(($i10 == 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 923, 27} true;
  call $i11 := DUPFFdeg($p3);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 923, 39} true;
  $i12 := $ne.i32($i11, 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 923, 7} true;
  assume {:branchcond $i12} true;
  goto $bb7, $bb8;
$bb7:
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 923, 7} true;
  assume ($i12 == 1);
  goto $bb5;
$bb8:
  assume !(($i12 == 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 924, 10} true;
  $p13 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 924, 10} true;
  $p14 := $load.ref($M.1, $p13);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 924, 7} true;
  $p15 := $add.ref($p14, $mul.ref(0, 4));
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 924, 7} true;
  $i16 := $load.i32($M.4, $p15);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 924, 20} true;
  $i17 := $eq.i32($i16, 0);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 924, 7} true;
  assume {:branchcond $i17} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i17 == 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 924, 26} true;
  $p8 := $p2;
  goto $bb3;
$bb10:
  assume !(($i17 == 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 926, 8} true;
  call $i18 := DUPFFdeg($p2);
  call {:cexpr "df"} boogie_si_record_i32($i18);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 926, 28} true;
  $i19 := $slt.i32($i18, 0);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 926, 25} true;
  $i20 := $i18;
  assume {:branchcond $i19} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i19 == 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 926, 33} true;
  $i20 := 0;
  goto $bb13;
$bb12:
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 926, 25} true;
  assume !(($i19 == 1));
  goto $bb13;
$bb13:
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 0, 0} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 927, 8} true;
  call $i21 := DUPFFdeg($p3);
  call {:cexpr "dg"} boogie_si_record_i32($i21);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 927, 28} true;
  $i22 := $slt.i32($i21, 0);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 927, 25} true;
  $i23 := $i21;
  assume {:branchcond $i22} true;
  goto $bb14, $bb15;
$bb14:
  assume ($i22 == 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 927, 33} true;
  $i23 := 0;
  goto $bb16;
$bb15:
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 927, 25} true;
  assume !(($i22 == 1));
  goto $bb16;
$bb16:
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 0, 0} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 928, 7} true;
  call $p24 := DUPFFcopy($p2);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 929, 7} true;
  call $p25 := DUPFFcopy($p3);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 930, 8} true;
  call $p26 := DUPFFnew($i23);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 930, 26} true;
  $p27 := $add.ref($add.ref($p26, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 930, 26} true;
  $p28 := $load.ref($M.1, $p27);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 930, 22} true;
  $p29 := $add.ref($p28, $mul.ref(0, 4));
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 930, 36} true;
  $M.4 := $store.i32($M.4, $p29, 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 930, 45} true;
  $p30 := $add.ref($add.ref($p26, $mul.ref(0, 16)), $mul.ref(4, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 930, 49} true;
  $M.0 := $store.i32($M.0, $p30, 0);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 931, 8} true;
  call $p31 := DUPFFnew($i20);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 932, 8} true;
  call $p32 := DUPFFnew($i23);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 933, 8} true;
  call $p33 := DUPFFnew($i20);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 933, 26} true;
  $p34 := $add.ref($add.ref($p33, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 933, 26} true;
  $p35 := $load.ref($M.1, $p34);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 933, 22} true;
  $p36 := $add.ref($p35, $mul.ref(0, 4));
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 933, 36} true;
  $M.4 := $store.i32($M.4, $p36, 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 933, 45} true;
  $p37 := $add.ref($add.ref($p33, $mul.ref(0, 16)), $mul.ref(4, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 933, 49} true;
  $M.0 := $store.i32($M.0, $p37, 0);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 934, 10} true;
  call $i38 := DUPFFdeg($p25);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 934, 22} true;
  $i39 := $sgt.i32($i38, 0);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 934, 3} true;
  assume {:branchcond $i39} true;
  goto $bb17, $bb18;
$bb17:
  assume ($i39 == 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 934, 3} true;
  goto $bb20;
$bb18:
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 934, 3} true;
  assume !(($i39 == 1));
  goto $bb19;
$bb19:
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 951, 7} true;
  call $i66 := DUPFFdeg($p25);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 951, 19} true;
  $i67 := $eq.i32($i66, 0);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 951, 7} true;
  assume {:branchcond $i67} true;
  goto $bb29, $bb30;
$bb20:
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 936, 10} true;
  call $i40 := DUPFFdeg($p25);
  call {:cexpr "dv"} boogie_si_record_i32($i40);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 937, 28} true;
  $p41 := $add.ref($add.ref($p25, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 937, 28} true;
  $p42 := $load.ref($M.1, $p41);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 937, 25} true;
  $i43 := $sext.i32.i64($i40);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 937, 25} true;
  $p44 := $add.ref($p42, $mul.ref($i43, 4));
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 937, 25} true;
  $i45 := $load.i32($M.4, $p44);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 937, 16} true;
  call $i46 := FFmul(1, $i45);
  call {:cexpr "lcvrecip"} boogie_si_record_i32($i46);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 938, 12} true;
  call $i47 := DUPFFdeg($p24);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 938, 24} true;
  $i48 := $sge.i32($i47, $i40);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 938, 5} true;
  assume {:branchcond $i48} true;
  goto $bb21, $bb22;
$bb21:
  assume ($i48 == 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 938, 5} true;
  goto $bb24;
$bb22:
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 938, 5} true;
  assume !(($i48 == 1));
  goto $bb23;
$bb23:
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 947, 5} true;
  call DUPFFswap($p24, $p25);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 948, 5} true;
  call DUPFFswap($p26, $p32);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 949, 5} true;
  call DUPFFswap($p31, $p33);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 934, 10} true;
  call $i64 := DUPFFdeg($p25);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 934, 22} true;
  $i65 := $sgt.i32($i64, 0);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 934, 3} true;
  assume {:branchcond $i65} true;
  goto $bb27, $bb28;
$bb24:
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 940, 12} true;
  call $i49 := DUPFFdeg($p24);
  call {:cexpr "du"} boogie_si_record_i32($i49);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 941, 16} true;
  $p50 := $add.ref($add.ref($p24, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 941, 16} true;
  $p51 := $load.ref($M.1, $p50);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 941, 13} true;
  $i52 := $sext.i32.i64($i49);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 941, 13} true;
  $p53 := $add.ref($p51, $mul.ref($i52, 4));
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 941, 13} true;
  $i54 := $load.i32($M.4, $p53);
  call {:cexpr "lcu"} boogie_si_record_i32($i54);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 942, 11} true;
  call $i55 := FFmul($i54, $i46);
  call {:cexpr "q"} boogie_si_record_i32($i55);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 943, 30} true;
  $i56 := $sub.i32($i49, $i40);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 943, 36} true;
  $i57 := $sub.i32(2, $i55);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 943, 7} true;
  call DUPFFshift_add($p24, $p25, $i56, $i57);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 944, 32} true;
  $i58 := $sub.i32($i49, $i40);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 944, 38} true;
  $i59 := $sub.i32(2, $i55);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 944, 7} true;
  call DUPFFshift_add($p26, $p32, $i58, $i59);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 945, 32} true;
  $i60 := $sub.i32($i49, $i40);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 945, 38} true;
  $i61 := $sub.i32(2, $i55);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 945, 7} true;
  call DUPFFshift_add($p31, $p33, $i60, $i61);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 938, 12} true;
  call $i62 := DUPFFdeg($p24);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 938, 24} true;
  $i63 := $sge.i32($i62, $i40);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 938, 5} true;
  assume {:branchcond $i63} true;
  goto $bb25, $bb26;
$bb25:
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 938, 5} true;
  assume ($i63 == 1);
  goto $bb24;
$bb26:
  assume !(($i63 == 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 938, 5} true;
  goto $bb23;
$bb27:
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 934, 3} true;
  assume ($i65 == 1);
  goto $bb20;
$bb28:
  assume !(($i65 == 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 934, 3} true;
  goto $bb19;
$bb29:
  assume ($i67 == 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 953, 5} true;
  call DUPFFswap($p24, $p25);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 954, 5} true;
  call DUPFFswap($p26, $p32);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 955, 5} true;
  call DUPFFswap($p31, $p33);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 956, 3} true;
  goto $bb31;
$bb30:
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 951, 7} true;
  assume !(($i67 == 1));
  goto $bb31;
$bb31:
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 957, 3} true;
  call DUPFFfree($p32);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 958, 3} true;
  call DUPFFfree($p33);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 959, 3} true;
  call DUPFFfree($p25);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 960, 11} true;
  $M.5 := $store.ref($M.5, $p0, $p26);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 961, 11} true;
  $M.5 := $store.ref($M.5, $p1, $p31);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 962, 3} true;
  $p8 := $p24;
  goto $bb3;
}
const abort: ref;
axiom (abort == $sub.ref(0, 17554));
procedure  abort();
const main: ref;
axiom (main == $sub.ref(0, 18586));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref32;
  var $p5: ref32;
  var $p6: ref32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref32;
  var $p10: ref32;
  var $p11: ref32;
  var $p12: ref;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 967, 7} true;
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  call $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  call $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume true;
  assume true;
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 967, 7} true;
  call $p2 := DUPFFnew(1);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 967, 23} true;
  $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 967, 23} true;
  $p4 := $load.ref($M.1, $p3);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 967, 20} true;
  $p5 := $add.ref($p4, $mul.ref(1, 4));
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 967, 33} true;
  $M.4 := $store.i32($M.4, $p5, 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 967, 41} true;
  $p6 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 967, 45} true;
  $M.0 := $store.i32($M.0, $p6, 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 968, 7} true;
  call $p7 := DUPFFnew(2);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 968, 23} true;
  $p8 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 968, 23} true;
  $p9 := $load.ref($M.1, $p8);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 968, 20} true;
  $p10 := $add.ref($p9, $mul.ref(2, 4));
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 968, 33} true;
  $M.4 := $store.i32($M.4, $p10, 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 968, 41} true;
  $p11 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(4, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 968, 45} true;
  $M.0 := $store.i32($M.0, $p11, 2);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 969, 7} true;
  call $p12 := DUPFFexgcd($p0, $p1, $p2, $p7);
  assume {:sourceloc "../testcases/svcomp/memsafety/20020406-1.i", 971, 3} true;
  $r := 0;
  return;
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 19618));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 20650));
procedure  __SMACK_static_init()
{
$bb0:
  return;
}
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
