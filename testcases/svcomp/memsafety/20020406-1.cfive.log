SMACK program verifier version 2.6.3
WARNING: inttoptr @ addr 0xa15ff8 is (unsoundly) assumed to point to a fresh memory region.
 WARNING: inttoptr @ addr 0xa7a4b8 is (unsoundly) assumed to point to a fresh memory region.
 WARNING: inttoptr @ addr 0xa20c48 is (unsoundly) assumed to point to a fresh memory region.
 WARNING: inttoptr @ addr 0xa20c48 is (unsoundly) assumed to point to a fresh memory region.
 WARNING: inttoptr @ addr 0xa15ff8 is (unsoundly) assumed to point to a fresh memory region.
 WARNING: inttoptr @ addr 0xa20c48 is (unsoundly) assumed to point to a fresh memory region.
 WARNING: inttoptr @ addr 0xa15ff8 is (unsoundly) assumed to point to a fresh memory region.
 WARNING: inttoptr @ addr 0xa20c48 is (unsoundly) assumed to point to a fresh memory region.
 [regions] for:   %2 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %0, i32 0, i32 1, !dbg !56, !verifier.code !55
   in function: DUPFFdeg
 [regions]   using region: <Node:i32>[4,8]{A}
 [regions]   returning index: 0
 
 [regions] for:   %4 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %3, i32 0, i32 2, !dbg !59, !verifier.code !55
   in function: DUPFFnew
 [regions]   using region: <Node:i32*>[8,16]{A}
 [regions]   returning index: 1
 
 [regions] for:   %14 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %3, i32 0, i32 2, !dbg !70, !verifier.code !55
   in function: DUPFFnew
 [regions]   using region: <Node:i32*>[8,16]{A}
    found overlap at index 1: <Node:i32*>[8,16]{A}
 [regions]   merged region: <Node:i32*>[8,16]{A}
 [regions]   returning index: 1
 
 [regions] for:   %17 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %3, i32 0, i32 2, !dbg !72, !verifier.code !55
   in function: DUPFFnew
 [regions]   using region: <Node:i32*>[8,16]{A}
    found overlap at index 1: <Node:i32*>[8,16]{A}
 [regions]   merged region: <Node:i32*>[8,16]{A}
 [regions]   returning index: 1
 
 [regions] for:   %20 = load i32*, i32** %17, align 8, !dbg !72, !verifier.code !55 with length 4294967295
   in function: DUPFFnew
 [regions]   using region: <Node:i32>[0,4294967295]{A}
 [regions]   returning index: 2
 
 [regions] for:   %28 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %3, i32 0, i32 0, !dbg !78, !verifier.code !55
   in function: DUPFFnew
 [regions]   using region: <Node:i32>[0,4]{A}
 [regions]   returning index: 3
 
 [regions] for:   %31 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %3, i32 0, i32 1, !dbg !80, !verifier.code !55
   in function: DUPFFnew
 [regions]   using region: <Node:i32>[4,8]{A}
    found overlap at index 0: <Node:i32>[4,8]{A}
 [regions]   merged region: <Node:i32>[4,8]{A}
 [regions]   returning index: 0
 
 [regions] for:   %18 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %2, i32 0, i32 2, !dbg !75, !verifier.code !56
   in function: DUPFFexgcd
 [regions]   using region: <Node:i32*>[8,16]{A}
    found overlap at index 1: <Node:i32*>[8,16]{A}
 [regions]   merged region: <Node:i32*>[8,16]{A}
 [regions]   returning index: 1
 
 [regions] for:   %22 = getelementptr inbounds i32, i32* %21, i64 0, !dbg !77, !verifier.code !56
   in function: DUPFFexgcd
 [regions]   using region: <Node:i32>[0,4]{A}
    found overlap at index 2: <Node:i32>[0,4294967295]{A}
 [regions]   merged region: <Node:i32>[0,4294967295]{A}
 [regions]   returning index: 2
 
 [regions] for:   %40 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %39, i32 0, i32 2, !dbg !100, !verifier.code !56
   in function: DUPFFexgcd
 [regions]   using region: <Node:i32*>[8,16]{A}
    found overlap at index 1: <Node:i32*>[8,16]{A}
 [regions]   merged region: <Node:i32*>[8,16]{A}
 [regions]   returning index: 1
 
 [regions] for:   %44 = getelementptr inbounds i32, i32* %43, i64 0, !dbg !101, !verifier.code !56
   in function: DUPFFexgcd
 [regions]   using region: <Node:i32>[0,4]{A}
    found overlap at index 2: <Node:i32>[0,4294967295]{A}
 [regions]   merged region: <Node:i32>[0,4294967295]{A}
 [regions]   returning index: 2
 
 [regions] for:   %47 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %39, i32 0, i32 1, !dbg !103, !verifier.code !56
   in function: DUPFFexgcd
 [regions]   using region: <Node:i32>[4,8]{A}
    found overlap at index 0: <Node:i32>[4,8]{A}
 [regions]   merged region: <Node:i32>[4,8]{A}
 [regions]   returning index: 0
 
 [regions] for:   %53 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %52, i32 0, i32 2, !dbg !111, !verifier.code !56
   in function: DUPFFexgcd
 [regions]   using region: <Node:i32*>[8,16]{A}
    found overlap at index 1: <Node:i32*>[8,16]{A}
 [regions]   merged region: <Node:i32*>[8,16]{A}
 [regions]   returning index: 1
 
 [regions] for:   %57 = getelementptr inbounds i32, i32* %56, i64 0, !dbg !112, !verifier.code !56
   in function: DUPFFexgcd
 [regions]   using region: <Node:i32>[0,4]{A}
    found overlap at index 2: <Node:i32>[0,4294967295]{A}
 [regions]   merged region: <Node:i32>[0,4294967295]{A}
 [regions]   returning index: 2
 
 [regions] for:   %60 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %52, i32 0, i32 1, !dbg !114, !verifier.code !56
   in function: DUPFFexgcd
 [regions]   using region: <Node:i32>[4,8]{A}
    found overlap at index 0: <Node:i32>[4,8]{A}
 [regions]   merged region: <Node:i32>[4,8]{A}
 [regions]   returning index: 0
 
 [regions] for:   %68 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %38, i32 0, i32 2, !dbg !122, !verifier.code !56
   in function: DUPFFexgcd
 [regions]   using region: <Node:i32*>[8,16]{A}
    found overlap at index 1: <Node:i32*>[8,16]{A}
 [regions]   merged region: <Node:i32*>[8,16]{A}
 [regions]   returning index: 1
 
 [regions] for:   %73 = getelementptr inbounds i32, i32* %71, i64 %72, !dbg !123, !verifier.code !56
   in function: DUPFFexgcd
 [regions]   using region: <Node:i32>[0,4]{A}
    found overlap at index 2: <Node:i32>[0,4294967295]{A}
 [regions]   merged region: <Node:i32>[0,4294967295]{A}
 [regions]   returning index: 2
 
 [regions] for:   %83 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %37, i32 0, i32 2, !dbg !132, !verifier.code !56
   in function: DUPFFexgcd
 [regions]   using region: <Node:i32*>[8,16]{A}
    found overlap at index 1: <Node:i32*>[8,16]{A}
 [regions]   merged region: <Node:i32*>[8,16]{A}
 [regions]   returning index: 1
 
 [regions] for:   %88 = getelementptr inbounds i32, i32* %86, i64 %87, !dbg !133, !verifier.code !56
   in function: DUPFFexgcd
 [regions]   using region: <Node:i32>[0,4]{A}
    found overlap at index 2: <Node:i32>[0,4294967295]{A}
 [regions]   merged region: <Node:i32>[0,4294967295]{A}
 [regions]   returning index: 2
 
 [regions] for: %struct.DUPFFstruct** %0
   at instruction:   %105 = bitcast %struct.DUPFFstruct** %0 to i8*, !dbg !165
   in function: DUPFFexgcd
 [regions]   using region: <Node:%struct.DUPFFstruct*>[0,8]{A}
 [regions]   returning index: 4
 
 [regions] for: %struct.DUPFFstruct** %1
   at instruction:   %107 = bitcast %struct.DUPFFstruct** %1 to i8*, !dbg !166
   in function: DUPFFexgcd
 [regions]   using region: <Node:%struct.DUPFFstruct*>[0,8]{A}
    found overlap at index 4: <Node:%struct.DUPFFstruct*>[0,8]{A}
 [regions]   merged region: <Node:%struct.DUPFFstruct*>[0,8]{A}
 [regions]   returning index: 4
 
 [regions] for:   %4 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %3, i32 0, i32 2, !dbg !60, !verifier.code !52
   in function: main
 [regions]   using region: <Node:i32*>[8,16]{A}
    found overlap at index 1: <Node:i32*>[8,16]{A}
 [regions]   merged region: <Node:i32*>[8,16]{A}
 [regions]   returning index: 1
 
 [regions] for:   %8 = getelementptr inbounds i32, i32* %7, i64 1, !dbg !61, !verifier.code !52
   in function: main
 [regions]   using region: <Node:i32>[0,4]{A}
    found overlap at index 2: <Node:i32>[0,4294967295]{A}
 [regions]   merged region: <Node:i32>[0,4294967295]{A}
 [regions]   returning index: 2
 
 [regions] for:   %11 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %3, i32 0, i32 1, !dbg !63, !verifier.code !52
   in function: main
 [regions]   using region: <Node:i32>[4,8]{A}
    found overlap at index 0: <Node:i32>[4,8]{A}
 [regions]   merged region: <Node:i32>[4,8]{A}
 [regions]   returning index: 0
 
 [regions] for:   %15 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %14, i32 0, i32 2, !dbg !67, !verifier.code !52
   in function: main
 [regions]   using region: <Node:i32*>[8,16]{A}
    found overlap at index 1: <Node:i32*>[8,16]{A}
 [regions]   merged region: <Node:i32*>[8,16]{A}
 [regions]   returning index: 1
 
 [regions] for:   %19 = getelementptr inbounds i32, i32* %18, i64 2, !dbg !68, !verifier.code !52
   in function: main
 [regions]   using region: <Node:i32>[0,4]{A}
    found overlap at index 2: <Node:i32>[0,4294967295]{A}
 [regions]   merged region: <Node:i32>[0,4294967295]{A}
 [regions]   returning index: 2
 
 [regions] for:   %22 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %14, i32 0, i32 1, !dbg !70, !verifier.code !52
   in function: main
 [regions]   using region: <Node:i32>[4,8]{A}
    found overlap at index 0: <Node:i32>[4,8]{A}
 [regions]   merged region: <Node:i32>[4,8]{A}
 [regions]   returning index: 0
 
 We are now translating the program to boogie...
 Analyzing globals...
 -------INSERT: Global Variables .str.31
 Analyzing functions...
 Analyzing function: FFmul
 -------INSERT: Global Variables FFmul
 Analyzing function body: FFmul
 Generating body for FFmul
 
 Finished analyzing function: FFmul
 
 Analyzing function: llvm.dbg.declare
 -------INSERT: Global Variables llvm.dbg.declare
 Analyzing function: DUPFFdeg
 -------INSERT: Global Variables DUPFFdeg
 Analyzing function body: DUPFFdeg
 Generating body for DUPFFdeg
 [regions] for:   %2 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %0, i32 0, i32 1, !dbg !56, !verifier.code !55
   in function: DUPFFdeg
 [regions]   using region: <Node:i32>[4,8]{A}
    found overlap at index 0: <Node:i32>[4,8]{A}
 [regions]   merged region: <Node:i32>[4,8]{A}
 [regions]   returning index: 0
 
 
 Finished analyzing function: DUPFFdeg
 
 Analyzing function: DUPFFnew
 -------INSERT: Global Variables DUPFFnew
 Analyzing function body: DUPFFnew
 Generating body for DUPFFnew
 [regions] for:   %4 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %3, i32 0, i32 2, !dbg !59, !verifier.code !55
   in function: DUPFFnew
 [regions]   using region: <Node:i32*>[8,16]{A}
    found overlap at index 1: <Node:i32*>[8,16]{A}
 [regions]   merged region: <Node:i32*>[8,16]{A}
 [regions]   returning index: 1
 
 [regions] for:   %4 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %3, i32 0, i32 2, !dbg !59, !verifier.code !55
   in function: DUPFFnew
 [regions]   using region: <Node:i32*>[8,16]{A}
    found overlap at index 1: <Node:i32*>[8,16]{A}
 [regions]   merged region: <Node:i32*>[8,16]{A}
 [regions]   returning index: 1
 
 [regions] for:   %14 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %3, i32 0, i32 2, !dbg !70, !verifier.code !55
   in function: DUPFFnew
 [regions]   using region: <Node:i32*>[8,16]{A}
    found overlap at index 1: <Node:i32*>[8,16]{A}
 [regions]   merged region: <Node:i32*>[8,16]{A}
 [regions]   returning index: 1
 
 [regions] for:   %14 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %3, i32 0, i32 2, !dbg !70, !verifier.code !55
   in function: DUPFFnew
 [regions]   using region: <Node:i32*>[8,16]{A}
    found overlap at index 1: <Node:i32*>[8,16]{A}
 [regions]   merged region: <Node:i32*>[8,16]{A}
 [regions]   returning index: 1
 
 [regions] for:   %17 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %3, i32 0, i32 2, !dbg !72, !verifier.code !55
   in function: DUPFFnew
 [regions]   using region: <Node:i32*>[8,16]{A}
    found overlap at index 1: <Node:i32*>[8,16]{A}
 [regions]   merged region: <Node:i32*>[8,16]{A}
 [regions]   returning index: 1
 
 [regions] for:   %21 = bitcast i32* %20 to i8*, !dbg !73, !verifier.code !55 with length 4294967295
   in function: DUPFFnew
 [regions]   using region: <Node:i8>[0,4294967295]{A}
    found overlap at index 2: <Node:i32>[0,4294967295]{A}
 [regions]   merged region: <Node:*>[0,4294967295]{A}
 [regions]   returning index: 2
 
 [regions] for:   %28 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %3, i32 0, i32 0, !dbg !78, !verifier.code !55
   in function: DUPFFnew
 [regions]   using region: <Node:i32>[0,4]{A}
    found overlap at index 3: <Node:i32>[0,4]{A}
 [regions]   merged region: <Node:i32>[0,4]{A}
 [regions]   returning index: 3
 
 [regions] for:   %28 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %3, i32 0, i32 0, !dbg !78, !verifier.code !55
   in function: DUPFFnew
 [regions]   using region: <Node:i32>[0,4]{A}
    found overlap at index 3: <Node:i32>[0,4]{A}
 [regions]   merged region: <Node:i32>[0,4]{A}
 [regions]   returning index: 3
 
 [regions] for:   %31 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %3, i32 0, i32 1, !dbg !80, !verifier.code !55
   in function: DUPFFnew
 [regions]   using region: <Node:i32>[4,8]{A}
    found overlap at index 0: <Node:i32>[4,8]{A}
 [regions]   merged region: <Node:i32>[4,8]{A}
 [regions]   returning index: 0
 
 [regions] for:   %31 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %3, i32 0, i32 1, !dbg !80, !verifier.code !55
   in function: DUPFFnew
 [regions]   using region: <Node:i32>[4,8]{A}
    found overlap at index 0: <Node:i32>[4,8]{A}
 [regions]   merged region: <Node:i32>[4,8]{A}
 [regions]   returning index: 0
 
 
 Finished analyzing function: DUPFFnew
 
 Analyzing function: malloc
 -------INSERT: Global Variables malloc
 Analyzing function: llvm.memset.p0i8.i64
 -------INSERT: Global Variables llvm.memset.p0i8.i64
 Analyzing function: DUPFFfree
 -------INSERT: Global Variables DUPFFfree
 Analyzing function body: DUPFFfree
 Generating body for DUPFFfree
 
 Finished analyzing function: DUPFFfree
 
 Analyzing function: DUPFFswap
 -------INSERT: Global Variables DUPFFswap
 Analyzing function body: DUPFFswap
 Generating body for DUPFFswap
 
 Finished analyzing function: DUPFFswap
 
 Analyzing function: DUPFFcopy
 -------INSERT: Global Variables DUPFFcopy
 Analyzing function body: DUPFFcopy
 Generating body for DUPFFcopy
 
 Finished analyzing function: DUPFFcopy
 
 Analyzing function: DUPFFshift_add
 -------INSERT: Global Variables DUPFFshift_add
 Analyzing function body: DUPFFshift_add
 Generating body for DUPFFshift_add
 
 Finished analyzing function: DUPFFshift_add
 
 Analyzing function: DUPFFexgcd
 -------INSERT: Global Variables DUPFFexgcd
 Analyzing function body: DUPFFexgcd
 Generating body for DUPFFexgcd
 [regions] for:   %18 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %2, i32 0, i32 2, !dbg !75, !verifier.code !56
   in function: DUPFFexgcd
 [regions]   using region: <Node:i32*>[8,16]{A}
    found overlap at index 1: <Node:i32*>[8,16]{A}
 [regions]   merged region: <Node:i32*>[8,16]{A}
 [regions]   returning index: 1
 
 [regions] for:   %22 = getelementptr inbounds i32, i32* %21, i64 0, !dbg !77, !verifier.code !56
   in function: DUPFFexgcd
 [regions]   using region: <Node:i32>[0,4]{A}
    found overlap at index 2: <Node:*>[0,4294967295]{A}
 [regions]   merged region: <Node:*>[0,4294967295]{A}
 [regions]   returning index: 2
 
 [regions] for:   %40 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %39, i32 0, i32 2, !dbg !100, !verifier.code !56
   in function: DUPFFexgcd
 [regions]   using region: <Node:i32*>[8,16]{A}
    found overlap at index 1: <Node:i32*>[8,16]{A}
 [regions]   merged region: <Node:i32*>[8,16]{A}
 [regions]   returning index: 1
 
 [regions] for:   %44 = getelementptr inbounds i32, i32* %43, i64 0, !dbg !101, !verifier.code !56
   in function: DUPFFexgcd
 [regions]   using region: <Node:i32>[0,4]{A}
    found overlap at index 2: <Node:*>[0,4294967295]{A}
 [regions]   merged region: <Node:*>[0,4294967295]{A}
 [regions]   returning index: 2
 
 [regions] for:   %44 = getelementptr inbounds i32, i32* %43, i64 0, !dbg !101, !verifier.code !56
   in function: DUPFFexgcd
 [regions]   using region: <Node:i32>[0,4]{A}
    found overlap at index 2: <Node:*>[0,4294967295]{A}
 [regions]   merged region: <Node:*>[0,4294967295]{A}
 [regions]   returning index: 2
 
 [regions] for:   %47 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %39, i32 0, i32 1, !dbg !103, !verifier.code !56
   in function: DUPFFexgcd
 [regions]   using region: <Node:i32>[4,8]{A}
    found overlap at index 0: <Node:i32>[4,8]{A}
 [regions]   merged region: <Node:i32>[4,8]{A}
 [regions]   returning index: 0
 
 [regions] for:   %47 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %39, i32 0, i32 1, !dbg !103, !verifier.code !56
   in function: DUPFFexgcd
 [regions]   using region: <Node:i32>[4,8]{A}
    found overlap at index 0: <Node:i32>[4,8]{A}
 [regions]   merged region: <Node:i32>[4,8]{A}
 [regions]   returning index: 0
 
 [regions] for:   %53 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %52, i32 0, i32 2, !dbg !111, !verifier.code !56
   in function: DUPFFexgcd
 [regions]   using region: <Node:i32*>[8,16]{A}
    found overlap at index 1: <Node:i32*>[8,16]{A}
 [regions]   merged region: <Node:i32*>[8,16]{A}
 [regions]   returning index: 1
 
 [regions] for:   %57 = getelementptr inbounds i32, i32* %56, i64 0, !dbg !112, !verifier.code !56
   in function: DUPFFexgcd
 [regions]   using region: <Node:i32>[0,4]{A}
    found overlap at index 2: <Node:*>[0,4294967295]{A}
 [regions]   merged region: <Node:*>[0,4294967295]{A}
 [regions]   returning index: 2
 
 [regions] for:   %57 = getelementptr inbounds i32, i32* %56, i64 0, !dbg !112, !verifier.code !56
   in function: DUPFFexgcd
 [regions]   using region: <Node:i32>[0,4]{A}
    found overlap at index 2: <Node:*>[0,4294967295]{A}
 [regions]   merged region: <Node:*>[0,4294967295]{A}
 [regions]   returning index: 2
 
 [regions] for:   %60 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %52, i32 0, i32 1, !dbg !114, !verifier.code !56
   in function: DUPFFexgcd
 [regions]   using region: <Node:i32>[4,8]{A}
    found overlap at index 0: <Node:i32>[4,8]{A}
 [regions]   merged region: <Node:i32>[4,8]{A}
 [regions]   returning index: 0
 
 [regions] for:   %60 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %52, i32 0, i32 1, !dbg !114, !verifier.code !56
   in function: DUPFFexgcd
 [regions]   using region: <Node:i32>[4,8]{A}
    found overlap at index 0: <Node:i32>[4,8]{A}
 [regions]   merged region: <Node:i32>[4,8]{A}
 [regions]   returning index: 0
 
 [regions] for:   %68 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %38, i32 0, i32 2, !dbg !122, !verifier.code !56
   in function: DUPFFexgcd
 [regions]   using region: <Node:i32*>[8,16]{A}
    found overlap at index 1: <Node:i32*>[8,16]{A}
 [regions]   merged region: <Node:i32*>[8,16]{A}
 [regions]   returning index: 1
 
 [regions] for:   %73 = getelementptr inbounds i32, i32* %71, i64 %72, !dbg !123, !verifier.code !56
   in function: DUPFFexgcd
 [regions]   using region: <Node:i32>[0,4]{A}
    found overlap at index 2: <Node:*>[0,4294967295]{A}
 [regions]   merged region: <Node:*>[0,4294967295]{A}
 [regions]   returning index: 2
 
 [regions] for:   %83 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %37, i32 0, i32 2, !dbg !132, !verifier.code !56
   in function: DUPFFexgcd
 [regions]   using region: <Node:i32*>[8,16]{A}
    found overlap at index 1: <Node:i32*>[8,16]{A}
 [regions]   merged region: <Node:i32*>[8,16]{A}
 [regions]   returning index: 1
 
 [regions] for:   %88 = getelementptr inbounds i32, i32* %86, i64 %87, !dbg !133, !verifier.code !56
   in function: DUPFFexgcd
 [regions]   using region: <Node:i32>[0,4]{A}
    found overlap at index 2: <Node:*>[0,4294967295]{A}
 [regions]   merged region: <Node:*>[0,4294967295]{A}
 [regions]   returning index: 2
 
 [regions] for: %struct.DUPFFstruct** %0
   at instruction:   %105 = bitcast %struct.DUPFFstruct** %0 to i8*, !dbg !165
   in function: DUPFFexgcd
 [regions]   using region: <Node:%struct.DUPFFstruct*>[0,8]{A}
    found overlap at index 4: <Node:%struct.DUPFFstruct*>[0,8]{A}
 [regions]   merged region: <Node:%struct.DUPFFstruct*>[0,8]{A}
 [regions]   returning index: 4
 
 [regions] for: %struct.DUPFFstruct** %0
   at instruction:   %105 = bitcast %struct.DUPFFstruct** %0 to i8*, !dbg !165
   in function: DUPFFexgcd
 [regions]   using region: <Node:%struct.DUPFFstruct*>[0,8]{A}
    found overlap at index 4: <Node:%struct.DUPFFstruct*>[0,8]{A}
 [regions]   merged region: <Node:%struct.DUPFFstruct*>[0,8]{A}
 [regions]   returning index: 4
 
 [regions] for: %struct.DUPFFstruct** %1
   at instruction:   %107 = bitcast %struct.DUPFFstruct** %1 to i8*, !dbg !166
   in function: DUPFFexgcd
 [regions]   using region: <Node:%struct.DUPFFstruct*>[0,8]{A}
    found overlap at index 4: <Node:%struct.DUPFFstruct*>[0,8]{A}
 [regions]   merged region: <Node:%struct.DUPFFstruct*>[0,8]{A}
 [regions]   returning index: 4
 
 [regions] for: %struct.DUPFFstruct** %1
   at instruction:   %107 = bitcast %struct.DUPFFstruct** %1 to i8*, !dbg !166
   in function: DUPFFexgcd
 [regions]   using region: <Node:%struct.DUPFFstruct*>[0,8]{A}
    found overlap at index 4: <Node:%struct.DUPFFstruct*>[0,8]{A}
 [regions]   merged region: <Node:%struct.DUPFFstruct*>[0,8]{A}
 [regions]   returning index: 4
 
 
 Finished analyzing function: DUPFFexgcd
 
 Analyzing function: main
 -------INSERT: Global Variables main
 Analyzing function body: main
 Generating body for main
 [regions] for:   %4 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %3, i32 0, i32 2, !dbg !60, !verifier.code !52
   in function: main
 [regions]   using region: <Node:i32*>[8,16]{A}
    found overlap at index 1: <Node:i32*>[8,16]{A}
 [regions]   merged region: <Node:i32*>[8,16]{A}
 [regions]   returning index: 1
 
 [regions] for:   %8 = getelementptr inbounds i32, i32* %7, i64 1, !dbg !61, !verifier.code !52
   in function: main
 [regions]   using region: <Node:i32>[0,4]{A}
    found overlap at index 2: <Node:*>[0,4294967295]{A}
 [regions]   merged region: <Node:*>[0,4294967295]{A}
 [regions]   returning index: 2
 
 [regions] for:   %8 = getelementptr inbounds i32, i32* %7, i64 1, !dbg !61, !verifier.code !52
   in function: main
 [regions]   using region: <Node:i32>[0,4]{A}
    found overlap at index 2: <Node:*>[0,4294967295]{A}
 [regions]   merged region: <Node:*>[0,4294967295]{A}
 [regions]   returning index: 2
 
 [regions] for:   %11 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %3, i32 0, i32 1, !dbg !63, !verifier.code !52
   in function: main
 [regions]   using region: <Node:i32>[4,8]{A}
    found overlap at index 0: <Node:i32>[4,8]{A}
 [regions]   merged region: <Node:i32>[4,8]{A}
 [regions]   returning index: 0
 
 [regions] for:   %11 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %3, i32 0, i32 1, !dbg !63, !verifier.code !52
   in function: main
 [regions]   using region: <Node:i32>[4,8]{A}
    found overlap at index 0: <Node:i32>[4,8]{A}
 [regions]   merged region: <Node:i32>[4,8]{A}
 [regions]   returning index: 0
 
 [regions] for:   %15 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %14, i32 0, i32 2, !dbg !67, !verifier.code !52
   in function: main
 [regions]   using region: <Node:i32*>[8,16]{A}
    found overlap at index 1: <Node:i32*>[8,16]{A}
 [regions]   merged region: <Node:i32*>[8,16]{A}
 [regions]   returning index: 1
 
 [regions] for:   %19 = getelementptr inbounds i32, i32* %18, i64 2, !dbg !68, !verifier.code !52
   in function: main
 [regions]   using region: <Node:i32>[0,4]{A}
    found overlap at index 2: <Node:*>[0,4294967295]{A}
 [regions]   merged region: <Node:*>[0,4294967295]{A}
 [regions]   returning index: 2
 
 [regions] for:   %19 = getelementptr inbounds i32, i32* %18, i64 2, !dbg !68, !verifier.code !52
   in function: main
 [regions]   using region: <Node:i32>[0,4]{A}
    found overlap at index 2: <Node:*>[0,4294967295]{A}
 [regions]   merged region: <Node:*>[0,4294967295]{A}
 [regions]   returning index: 2
 
 [regions] for:   %22 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %14, i32 0, i32 1, !dbg !70, !verifier.code !52
   in function: main
 [regions]   using region: <Node:i32>[4,8]{A}
    found overlap at index 0: <Node:i32>[4,8]{A}
 [regions]   merged region: <Node:i32>[4,8]{A}
 [regions]   returning index: 0
 
 [regions] for:   %22 = getelementptr inbounds %struct.DUPFFstruct, %struct.DUPFFstruct* %14, i32 0, i32 1, !dbg !70, !verifier.code !52
   in function: main
 [regions]   using region: <Node:i32>[4,8]{A}
    found overlap at index 0: <Node:i32>[4,8]{A}
 [regions]   merged region: <Node:i32>[4,8]{A}
 [regions]   returning index: 0
 
 
 Finished analyzing function: main
 
 Analyzing function: __SMACK_code
 -------INSERT: Global Variables __SMACK_code
 Analyzing function: __VERIFIER_assume
 -------INSERT: Global Variables __VERIFIER_assume
 Analyzing function body: __VERIFIER_assume
 Generating body for __VERIFIER_assume
 
 Finished analyzing function: __VERIFIER_assume
 
 Analyzing function: __SMACK_dummy
 -------INSERT: Global Variables __SMACK_dummy
 Analyzing function body: __SMACK_dummy
 Generating body for __SMACK_dummy
 
 Finished analyzing function: __SMACK_dummy
 
 Analyzing function: __SMACK_and32
 -------INSERT: Global Variables __SMACK_and32
 Analyzing function body: __SMACK_and32
 Generating body for __SMACK_and32
 
 Finished analyzing function: __SMACK_and32
 
 Analyzing function: __SMACK_and64
 -------INSERT: Global Variables __SMACK_and64
 Analyzing function body: __SMACK_and64
 Generating body for __SMACK_and64
 
 Finished analyzing function: __SMACK_and64
 
 Analyzing function: __SMACK_and16
 -------INSERT: Global Variables __SMACK_and16
 Analyzing function body: __SMACK_and16
 Generating body for __SMACK_and16
 
 Finished analyzing function: __SMACK_and16
 
 Analyzing function: __SMACK_and8
 -------INSERT: Global Variables __SMACK_and8
 Analyzing function body: __SMACK_and8
 Generating body for __SMACK_and8
 
 Finished analyzing function: __SMACK_and8
 
 Analyzing function: __SMACK_or32
 -------INSERT: Global Variables __SMACK_or32
 Analyzing function body: __SMACK_or32
 Generating body for __SMACK_or32
 
 Finished analyzing function: __SMACK_or32
 
 Analyzing function: __SMACK_or64
 -------INSERT: Global Variables __SMACK_or64
 Analyzing function body: __SMACK_or64
 Generating body for __SMACK_or64
 
 Finished analyzing function: __SMACK_or64
 
 Analyzing function: __SMACK_or16
 -------INSERT: Global Variables __SMACK_or16
 Analyzing function body: __SMACK_or16
 Generating body for __SMACK_or16
 
 Finished analyzing function: __SMACK_or16
 
 Analyzing function: __SMACK_or8
 -------INSERT: Global Variables __SMACK_or8
 Analyzing function body: __SMACK_or8
 Generating body for __SMACK_or8
 
 Finished analyzing function: __SMACK_or8
 
 Analyzing function: __SMACK_check_overflow
 -------INSERT: Global Variables __SMACK_check_overflow
 Analyzing function body: __SMACK_check_overflow
 Generating body for __SMACK_check_overflow
 
 Finished analyzing function: __SMACK_check_overflow
 
 Analyzing function: __SMACK_decls
 -------INSERT: Global Variables __SMACK_decls
 Analyzing function body: __SMACK_decls
 Generating body for __SMACK_decls
 
 Finished analyzing function: __SMACK_decls
 
 Analyzing function: __SMACK_top_decl
 -------INSERT: Global Variables __SMACK_top_decl
 Analyzing function: __SMACK_check_memory_safety
 -------INSERT: Global Variables __SMACK_check_memory_safety
 Analyzing function: __SMACK_check_memory_leak
 -------INSERT: Global Variables __SMACK_check_memory_leak
 Analyzing function body: __SMACK_check_memory_leak
 Generating body for __SMACK_check_memory_leak
 
 Finished analyzing function: __SMACK_check_memory_leak
 
 Analyzing function: __SMACK_init_func_memory_model
 -------INSERT: Global Variables __SMACK_init_func_memory_model
 Analyzing function body: __SMACK_init_func_memory_model
 Generating body for __SMACK_init_func_memory_model
 
 Finished analyzing function: __SMACK_init_func_memory_model
 
 Analyzing function: __SMACK_my_memory_check
 -------INSERT: Global Variables __SMACK_my_memory_check
 Analyzing function body: __SMACK_my_memory_check
 Generating body for __SMACK_my_memory_check
 
 Finished analyzing function: __SMACK_my_memory_check
 
 Analyzing function: __SMACK_decl
 -------INSERT: Global Variables __SMACK_decl
 Analyzing function: __SMACK_whatIsThis
 -------INSERT: Global Variables __SMACK_whatIsThis
 Analyzing function body: __SMACK_whatIsThis
 Generating body for __SMACK_whatIsThis
 
 Finished analyzing function: __SMACK_whatIsThis
 
 Analyzing function: __WHAT_code
 -------INSERT: Global Variables __WHAT_code
 Analyzing function: abort
 -------INSERT: Global Variables abort
 Analyzing function body: abort
 Generating body for abort
 
 Finished analyzing function: abort
 
 Analyzing function: llvm.dbg.value
 -------INSERT: Global Variables llvm.dbg.value
 Analyzing function: __SMACK_static_init
 -------INSERT: Global Variables __SMACK_static_init
 Analyzing function body: __SMACK_static_init
 Generating body for __SMACK_static_init
 
 Finished analyzing function: __SMACK_static_init
 
 Start Analyzing Prelude: FFmul
 
 Start Analyzing Prelude: llvm.dbg.declare
 
 Start Analyzing Prelude: DUPFFdeg
 
 Start Analyzing Prelude: DUPFFnew
 
 Start Analyzing Prelude: malloc
 
 Start Analyzing Prelude: llvm.memset.p0i8.i64
 
 Start Analyzing Prelude: DUPFFfree
 
 Start Analyzing Prelude: DUPFFswap
 
 Start Analyzing Prelude: DUPFFcopy
 
 Start Analyzing Prelude: DUPFFshift_add
 
 Start Analyzing Prelude: DUPFFexgcd
 
 Start Analyzing Prelude: main
 
 Start Analyzing Prelude: __SMACK_code.ref
 
 Start Analyzing Prelude: __SMACK_code.ref.i32
 
 Start Analyzing Prelude: __VERIFIER_assume
 
 Start Analyzing Prelude: __SMACK_dummy
 
 Start Analyzing Prelude: __SMACK_and32
 
 Start Analyzing Prelude: __SMACK_and64
 
 Start Analyzing Prelude: __SMACK_and16
 
 Start Analyzing Prelude: __SMACK_and8
 
 Start Analyzing Prelude: __SMACK_or32
 
 Start Analyzing Prelude: __SMACK_or64
 
 Start Analyzing Prelude: __SMACK_or16
 
 Start Analyzing Prelude: __SMACK_or8
 
 Start Analyzing Prelude: __SMACK_check_overflow
 
 Start Analyzing Prelude: __SMACK_top_decl.ref
 
 Start Analyzing Prelude: __SMACK_check_memory_safety
 
 Start Analyzing Prelude: __SMACK_check_memory_leak
 
 Start Analyzing Prelude: __SMACK_init_func_memory_model
 
 Start Analyzing Prelude: __SMACK_my_memory_check
 
 Start Analyzing Prelude: __SMACK_decl.ref
 
 Start Analyzing Prelude: __SMACK_whatIsThis
 
 Start Analyzing Prelude: __WHAT_code.ref
 
 Start Analyzing Prelude: abort
 
 Start Analyzing Prelude: llvm.dbg.value
 
 Start Analyzing Prelude: __SMACK_static_init
 
 Start Analyzing Prelude: boogie_si_record_i16
 
 Start Analyzing Prelude: boogie_si_record_i32
 
 Start Analyzing Prelude: boogie_si_record_i64
 
 Start Analyzing Prelude: boogie_si_record_i8
 
 Start Analyzing Prelude: boogie_si_record_ref
 
 Start Analyzing Prelude: $initialize
 
 /usr/local/share/smack/lib/smack.c(1879,1): This assertion might not hold.
Execution trace:
    ../testcases/svcomp/memsafety/20020406-1.c(127,7): 
    /usr/local/share/smack/lib/smack.c(1884,3): 
    ../testcases/svcomp/memsafety/20020406-1.c(127,7): 
    ../testcases/svcomp/memsafety/20020406-1.c(127,7): 
    ../testcases/svcomp/memsafety/20020406-1.c(127,7): 
    ../testcases/svcomp/memsafety/20020406-1.c(39,22): 
    ../testcases/svcomp/memsafety/20020406-1.c(39,22): 
    ../testcases/svcomp/memsafety/20020406-1.c(39,22): 
    ../testcases/svcomp/memsafety/20020406-1.c(42,42): 
    ../testcases/svcomp/memsafety/20020406-1.c(42,42): 
    ../testcases/svcomp/memsafety/20020406-1.c(42,42): 
    ../testcases/svcomp/memsafety/20020406-1.c(42,42): 
    ../testcases/svcomp/memsafety/20020406-1.c(42,42): 
    ../testcases/svcomp/memsafety/20020406-1.c(42,42): 
    ../testcases/svcomp/memsafety/20020406-1.c(45,8): 
    ../testcases/svcomp/memsafety/20020406-1.c(45,8): 
    ../testcases/svcomp/memsafety/20020406-1.c(45,8): 
    ../testcases/svcomp/memsafety/20020406-1.c(127,7): 
    ../testcases/svcomp/memsafety/20020406-1.c(127,7): 
    ../testcases/svcomp/memsafety/20020406-1.c(127,7): 
    ../testcases/svcomp/memsafety/20020406-1.c(127,7): 
    ../testcases/svcomp/memsafety/20020406-1.c(39,22): 
    ../testcases/svcomp/memsafety/20020406-1.c(39,22): 
    ../testcases/svcomp/memsafety/20020406-1.c(39,22): 
    ../testcases/svcomp/memsafety/20020406-1.c(42,42): 
    ../testcases/svcomp/memsafety/20020406-1.c(42,42): 
    ../testcases/svcomp/memsafety/20020406-1.c(42,42): 
    ../testcases/svcomp/memsafety/20020406-1.c(42,42): 
    ../testcases/svcomp/memsafety/20020406-1.c(42,42): 
    ../testcases/svcomp/memsafety/20020406-1.c(42,42): 
    ../testcases/svcomp/memsafety/20020406-1.c(45,8): 
    ../testcases/svcomp/memsafety/20020406-1.c(45,8): 
    ../testcases/svcomp/memsafety/20020406-1.c(45,8): 
    ../testcases/svcomp/memsafety/20020406-1.c(127,7): 
    ../testcases/svcomp/memsafety/20020406-1.c(127,7): 
    ../testcases/svcomp/memsafety/20020406-1.c(127,7): 
    ../testcases/svcomp/memsafety/20020406-1.c(127,7): 
    ../testcases/svcomp/memsafety/20020406-1.c(76,7): 
    ../testcases/svcomp/memsafety/20020406-1.c(33,13): 
    ../testcases/svcomp/memsafety/20020406-1.c(33,13): 
    ../testcases/svcomp/memsafety/20020406-1.c(76,7): 
    ../testcases/svcomp/memsafety/20020406-1.c(33,13): 
    ../testcases/svcomp/memsafety/20020406-1.c(33,13): 
    ../testcases/svcomp/memsafety/20020406-1.c(76,7): 
    ../testcases/svcomp/memsafety/20020406-1.c(76,41): 
    ../testcases/svcomp/memsafety/20020406-1.c(76,7): 
    ../testcases/svcomp/memsafety/20020406-1.c(33,13): 
    ../testcases/svcomp/memsafety/20020406-1.c(33,13): 
    ../testcases/svcomp/memsafety/20020406-1.c(76,7): 
    ../testcases/svcomp/memsafety/20020406-1.c(33,13): 
    ../testcases/svcomp/memsafety/20020406-1.c(33,13): 
    ../testcases/svcomp/memsafety/20020406-1.c(76,7): 
    ../testcases/svcomp/memsafety/20020406-1.c(77,7): 
    ../testcases/svcomp/memsafety/20020406-1.c(33,13): 
    ../testcases/svcomp/memsafety/20020406-1.c(33,13): 
    ../testcases/svcomp/memsafety/20020406-1.c(77,7): 
    ../testcases/svcomp/memsafety/20020406-1.c(77,27): 
    ../testcases/svcomp/memsafety/20020406-1.c(33,13): 
    ../testcases/svcomp/memsafety/20020406-1.c(33,13): 
    ../testcases/svcomp/memsafety/20020406-1.c(77,27): 
    ../testcases/svcomp/memsafety/20020406-1.c(78,10): 
    ../testcases/svcomp/memsafety/20020406-1.c(78,10): 
    ../testcases/svcomp/memsafety/20020406-1.c(78,10): 
    ../testcases/svcomp/memsafety/20020406-1.c(78,26): 
    ../testcases/svcomp/memsafety/20020406-1.c(0,0): 
    ../testcases/svcomp/memsafety/20020406-1.c(76,41): 
    ../testcases/svcomp/memsafety/20020406-1.c(0,0): 
    ../testcases/svcomp/memsafety/20020406-1.c(127,7): 
    /usr/local/share/smack/lib/smack.c(1878,3): 

SMACK found an error.
