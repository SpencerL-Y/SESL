// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/smack ../testcases/svcomp/memsafety/20051113-1.i -ll ../testcases/svcomp/memsafety/20051113-1_IR.ll --bpl ../testcases/svcomp/memsafety/20051113-1.bpl -t --sh-mem-leak --add-line-info

const {:global_variable} {:pointer_to_size 16} .str: ref;
axiom (.str == $sub.ref(0, 1026));
const {:global_variable} {:pointer_to_size 104} {:count 13} .str.1: ref;
axiom (.str.1 == $sub.ref(0, 2063));
const {:global_variable} {:pointer_to_size 152} {:count 19} __PRETTY_FUNCTION__.reach_error: ref;
axiom (__PRETTY_FUNCTION__.reach_error == $sub.ref(0, 3106));
const reach_error: ref;
axiom (reach_error == $sub.ref(0, 4138));
procedure  reach_error()
{
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 12, 83} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 12, 83} true;
  call __assert_fail(.str, .str.1, 3, __PRETTY_FUNCTION__.reach_error);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 12, 83} true;
  assume false;
}
const __assert_fail: ref;
axiom (__assert_fail == $sub.ref(0, 5170));
procedure  __assert_fail($p0: ref, $p1: ref, $i2: i32, $p3: ref);
const Sum: ref;
axiom (Sum == $sub.ref(0, 6202));
procedure  Sum($p0: ref)
  returns ($r: i64)
{
  var $p1: ref32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i32;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref64;
  var $i12: i64;
  var $i13: i64;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i64;
  var $i4: i64;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 556, 29} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 556, 29} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 556, 29} true;
  $i2 := $load.i32($M.0, $p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 556, 19} true;
  $i3 := $slt.i32(0, $i2);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 556, 5} true;
  $i4 := 0;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 556, 5} true;
  $i5, $i6 := 0, 0;
  goto $bb4;
$bb2:
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 556, 5} true;
  assume !(($i3 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 0, 0} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 559, 5} true;
  $r := $i4;
  return;
$bb4:
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 557, 26} true;
  $p7 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(4, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 557, 18} true;
  $i8 := $sext.i32.i64($i5);
  $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(4, 1)), $mul.ref($i8, 30));
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 557, 34} true;
  $p10 := $bitcast.ref.ref($p9);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 557, 36} true;
  $p11 := $add.ref($add.ref($p10, $mul.ref(0, 22)), $mul.ref(6, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 557, 36} true;
  $i12 := $load.i64($M.1, $p11);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 557, 15} true;
  $i13 := $add.i64($i6, $i12);
  call {:cexpr "count"} boogie_si_record_i64($i13);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 558, 5} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 556, 37} true;
  $i14 := $add.i32($i5, 1);
  call {:cexpr "i"} boogie_si_record_i32($i14);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 556, 29} true;
  $i15 := $load.i32($M.0, $p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 556, 19} true;
  $i16 := $slt.i32($i14, $i15);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 556, 5} true;
  $i17 := $i13;
  assume {:branchcond $i16} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i16 == 1);
  $i5, $i6 := $i14, $i13;
  goto $bb4;
$bb7:
  assume !(($i16 == 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 556, 5} true;
  $i4 := $i17;
  goto $bb3;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 7234));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const Sum2: ref;
axiom (Sum2 == $sub.ref(0, 8266));
procedure  Sum2($p0: ref)
  returns ($r: i64)
{
  var $p1: ref32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i32;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref64;
  var $i12: i64;
  var $i13: i64;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i64;
  var $i4: i64;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 566, 29} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 566, 29} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 566, 29} true;
  $i2 := $load.i32($M.0, $p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 566, 19} true;
  $i3 := $slt.i32(0, $i2);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 566, 5} true;
  $i4 := 0;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 566, 5} true;
  $i5, $i6 := 0, 0;
  goto $bb4;
$bb2:
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 566, 5} true;
  assume !(($i3 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 0, 0} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 569, 5} true;
  $r := $i4;
  return;
$bb4:
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 567, 26} true;
  $p7 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(4, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 567, 18} true;
  $i8 := $sext.i32.i64($i5);
  $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(4, 1)), $mul.ref($i8, 30));
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 567, 34} true;
  $p10 := $bitcast.ref.ref($p9);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 567, 36} true;
  $p11 := $add.ref($add.ref($p10, $mul.ref(0, 22)), $mul.ref(14, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 567, 36} true;
  $i12 := $load.i64($M.2, $p11);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 567, 15} true;
  $i13 := $add.i64($i6, $i12);
  call {:cexpr "count"} boogie_si_record_i64($i13);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 568, 5} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 566, 37} true;
  $i14 := $add.i32($i5, 1);
  call {:cexpr "i"} boogie_si_record_i32($i14);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 566, 29} true;
  $i15 := $load.i32($M.0, $p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 566, 19} true;
  $i16 := $slt.i32($i14, $i15);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 566, 5} true;
  $i17 := $i13;
  assume {:branchcond $i16} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i16 == 1);
  $i5, $i6 := $i14, $i13;
  goto $bb4;
$bb7:
  assume !(($i16 == 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 566, 5} true;
  $i4 := $i17;
  goto $bb3;
}
const main: ref;
axiom (main == $sub.ref(0, 9298));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $p0: ref8;
  var $p1: ref;
  var $p2: ref8;
  var $p3: ref8;
  var $p4: ref32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref64;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref64;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref64;
  var $i29: i64;
  var $i30: i1;
  var $i31: i64;
  var $i32: i1;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 575, 16} true;
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 575, 16} true;
  call $p0 := malloc(94);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 575, 16} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 576, 10} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 576, 3} true;
  call $p3 := memset($p2, 0, 94);
  assume $isExternal($p3);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 577, 6} true;
  $p4 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 577, 12} true;
  $M.0 := $store.i32($M.0, $p4, 3);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 578, 6} true;
  $p5 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(4, 1));
  $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(4, 1)), $mul.ref(0, 30));
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 578, 14} true;
  $p7 := $bitcast.ref.ref($p6);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 578, 16} true;
  $p8 := $add.ref($add.ref($p7, $mul.ref(0, 22)), $mul.ref(6, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 578, 22} true;
  $M.1 := $store.i64($M.1, $p8, 555);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 579, 6} true;
  $p9 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(4, 1));
  $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(4, 1)), $mul.ref(1, 30));
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 579, 14} true;
  $p11 := $bitcast.ref.ref($p10);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 579, 16} true;
  $p12 := $add.ref($add.ref($p11, $mul.ref(0, 22)), $mul.ref(6, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 579, 22} true;
  $M.1 := $store.i64($M.1, $p12, 999);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 580, 6} true;
  $p13 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(4, 1));
  $p14 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(4, 1)), $mul.ref(2, 30));
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 580, 14} true;
  $p15 := $bitcast.ref.ref($p14);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 580, 16} true;
  $p16 := $add.ref($add.ref($p15, $mul.ref(0, 22)), $mul.ref(6, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 580, 22} true;
  $M.1 := $store.i64($M.1, $p16, 4311810305);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 581, 6} true;
  $p17 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(4, 1));
  $p18 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(4, 1)), $mul.ref(0, 30));
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 581, 14} true;
  $p19 := $bitcast.ref.ref($p18);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 581, 16} true;
  $p20 := $add.ref($add.ref($p19, $mul.ref(0, 22)), $mul.ref(14, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 581, 23} true;
  $M.2 := $store.i64($M.2, $p20, 555);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 582, 6} true;
  $p21 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(4, 1));
  $p22 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(4, 1)), $mul.ref(1, 30));
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 582, 14} true;
  $p23 := $bitcast.ref.ref($p22);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 582, 16} true;
  $p24 := $add.ref($add.ref($p23, $mul.ref(0, 22)), $mul.ref(14, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 582, 23} true;
  $M.2 := $store.i64($M.2, $p24, 999);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 583, 6} true;
  $p25 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(4, 1));
  $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(4, 1)), $mul.ref(2, 30));
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 583, 14} true;
  $p27 := $bitcast.ref.ref($p26);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 583, 16} true;
  $p28 := $add.ref($add.ref($p27, $mul.ref(0, 22)), $mul.ref(14, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 583, 23} true;
  $M.2 := $store.i64($M.2, $p28, 4311810305);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 584, 7} true;
  call $i29 := Sum($p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 584, 14} true;
  $i30 := $ne.i64($i29, 4311811859);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 584, 7} true;
  assume {:branchcond $i30} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i30 == 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 585, 5} true;
  call dummy_abort();
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 585, 5} true;
  goto $bb3;
$bb2:
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 584, 7} true;
  assume !(($i30 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 586, 7} true;
  call $i31 := Sum2($p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 586, 15} true;
  $i32 := $ne.i64($i31, 4311811859);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 586, 7} true;
  assume {:branchcond $i32} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i32 == 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 587, 5} true;
  call dummy_abort();
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 587, 5} true;
  goto $bb6;
$bb5:
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 586, 7} true;
  assume !(($i32 == 1));
  goto $bb6;
$bb6:
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 589, 3} true;
  $r := 0;
  return;
}
const malloc: ref;
axiom (malloc == $sub.ref(0, 10330));
procedure  malloc($i0: i32)
  returns ($r: ref)
{
  call $r := $malloc($zext.i32.i64($i0));
}
const memset: ref;
axiom (memset == $sub.ref(0, 11362));
procedure  memset($p0: ref, $i1: i32, $i2: i32)
  returns ($r: ref);
const dummy_abort: ref;
axiom (dummy_abort == $sub.ref(0, 12394));
procedure  dummy_abort()
{
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 573, 1} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/20051113-1.i", 573, 1} true;
  return;
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 13426));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 14458));
procedure  __SMACK_static_init()
{
$bb0:
  return;
}
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_i64(x: i64);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
