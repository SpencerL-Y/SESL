SMACK program verifier version 2.6.3
removing dead definition: llvm.dbg.declare
 WARNING: inttoptr @ addr 0x1806728 is (unsoundly) assumed to point to a fresh memory region.
 WARNING: inttoptr @ addr 0x18071c8 is (unsoundly) assumed to point to a fresh memory region.
 WARNING: inttoptr @ addr 0x1806728 is (unsoundly) assumed to point to a fresh memory region.
 WARNING: inttoptr @ addr 0x18071c8 is (unsoundly) assumed to point to a fresh memory region.
 WARNING: inttoptr @ addr 0x181e2d8 is (unsoundly) assumed to point to a fresh memory region.
 WARNING: inttoptr @ addr 0x1806728 is (unsoundly) assumed to point to a fresh memory region.
 WARNING: inttoptr @ addr 0x18071c8 is (unsoundly) assumed to point to a fresh memory region.
 [regions] for:   %3 = getelementptr inbounds %struct.Struct3, %struct.Struct3* %0, i32 0, i32 0, !dbg !83, !verifier.code !77
   in function: Sum
 [regions]   using region: <Node:i32>[0,4]{A}
 [regions]   returning index: 0
 
 [regions] for:   %13 = getelementptr inbounds %struct.Struct1, %struct.Struct1* %12, i32 0, i32 3, !dbg !91, !verifier.code !77
   in function: Sum
 [regions]   using region: <Node:i64>[10,18]{A}
 [regions]   returning index: 1
 
 [regions] for:   %3 = getelementptr inbounds %struct.Struct3, %struct.Struct3* %0, i32 0, i32 0, !dbg !83, !verifier.code !77
   in function: Sum2
 [regions]   using region: <Node:i32>[0,4]{A}
    found overlap at index 0: <Node:i32>[0,4]{A}
 [regions]   merged region: <Node:i32>[0,4]{A}
 [regions]   returning index: 0
 
 [regions] for:   %13 = getelementptr inbounds %struct.Struct1, %struct.Struct1* %12, i32 0, i32 4, !dbg !91, !verifier.code !77
   in function: Sum2
 [regions]   using region: <Node:i64>[18,26]{A}
 [regions]   returning index: 2
 
 [regions] for:   %1 = call noalias i8* @malloc(i64 94) #7, !dbg !41, !verifier.code !42 with length 94
   in function: main
 [regions]   using region: <Node:i8>[0,94]{A}
    found overlap at index 0: <Node:i32>[0,4]{A}
 [regions]   merged region: <Node:*>[0,94]{A}
 [regions]   found extra overlap at index 1: <Node:i64>[10,18]{A}
 [regions]   merged region: <Node:*>[0,94]{A}
 [regions]   found extra overlap at index 1: <Node:i64>[18,26]{A}
 [regions]   merged region: <Node:*>[0,94]{A}
 [regions]   returning index: 0
 
 [regions] for:   %6 = getelementptr inbounds %struct.Struct3, %struct.Struct3* %2, i32 0, i32 0, !dbg !80, !verifier.code !42
   in function: main
 [regions]   using region: <Node:i32>[0,4]{A}
    found overlap at index 0: <Node:*>[0,94]{A}
 [regions]   merged region: <Node:*>[0,94]{A}
 [regions]   returning index: 0
 
 [regions] for:   %12 = getelementptr inbounds %struct.Struct1, %struct.Struct1* %11, i32 0, i32 3, !dbg !84, !verifier.code !42
   in function: main
 [regions]   using region: <Node:i64>[10,18]{A}
    found overlap at index 0: <Node:*>[0,94]{A}
 [regions]   merged region: <Node:*>[0,94]{A}
 [regions]   returning index: 0
 
 [regions] for:   %18 = getelementptr inbounds %struct.Struct1, %struct.Struct1* %17, i32 0, i32 3, !dbg !88, !verifier.code !42
   in function: main
 [regions]   using region: <Node:i64>[10,18]{A}
    found overlap at index 0: <Node:*>[0,94]{A}
 [regions]   merged region: <Node:*>[0,94]{A}
 [regions]   returning index: 0
 
 [regions] for:   %24 = getelementptr inbounds %struct.Struct1, %struct.Struct1* %23, i32 0, i32 3, !dbg !92, !verifier.code !42
   in function: main
 [regions]   using region: <Node:i64>[10,18]{A}
    found overlap at index 0: <Node:*>[0,94]{A}
 [regions]   merged region: <Node:*>[0,94]{A}
 [regions]   returning index: 0
 
 [regions] for:   %30 = getelementptr inbounds %struct.Struct1, %struct.Struct1* %29, i32 0, i32 4, !dbg !96, !verifier.code !42
   in function: main
 [regions]   using region: <Node:i64>[18,26]{A}
    found overlap at index 0: <Node:*>[0,94]{A}
 [regions]   merged region: <Node:*>[0,94]{A}
 [regions]   returning index: 0
 
 [regions] for:   %36 = getelementptr inbounds %struct.Struct1, %struct.Struct1* %35, i32 0, i32 4, !dbg !100, !verifier.code !42
   in function: main
 [regions]   using region: <Node:i64>[18,26]{A}
    found overlap at index 0: <Node:*>[0,94]{A}
 [regions]   merged region: <Node:*>[0,94]{A}
 [regions]   returning index: 0
 
 [regions] for:   %42 = getelementptr inbounds %struct.Struct1, %struct.Struct1* %41, i32 0, i32 4, !dbg !104, !verifier.code !42
   in function: main
 [regions]   using region: <Node:i64>[18,26]{A}
    found overlap at index 0: <Node:*>[0,94]{A}
 [regions]   merged region: <Node:*>[0,94]{A}
 [regions]   returning index: 0
 
 We are now translating the program to boogie...
 Analyzing globals...
 -------INSERT: Global Variables .str.31
 Analyzing functions...
 Analyzing function: Sum
 -------INSERT: Global Variables Sum
 Analyzing function body: Sum
 Generating body for Sum
 [regions] for:   %3 = getelementptr inbounds %struct.Struct3, %struct.Struct3* %0, i32 0, i32 0, !dbg !83, !verifier.code !77
   in function: Sum
 [regions]   using region: <Node:i32>[0,4]{A}
    found overlap at index 0: <Node:*>[0,94]{A}
 [regions]   merged region: <Node:*>[0,94]{A}
 [regions]   returning index: 0
 
 [regions] for:   %13 = getelementptr inbounds %struct.Struct1, %struct.Struct1* %12, i32 0, i32 3, !dbg !91, !verifier.code !77
   in function: Sum
 [regions]   using region: <Node:i64>[10,18]{A}
    found overlap at index 0: <Node:*>[0,94]{A}
 [regions]   merged region: <Node:*>[0,94]{A}
 [regions]   returning index: 0
 
 
 Finished analyzing function: Sum
 
 Analyzing function: Sum2
 -------INSERT: Global Variables Sum2
 Analyzing function body: Sum2
 Generating body for Sum2
 [regions] for:   %3 = getelementptr inbounds %struct.Struct3, %struct.Struct3* %0, i32 0, i32 0, !dbg !83, !verifier.code !77
   in function: Sum2
 [regions]   using region: <Node:i32>[0,4]{A}
    found overlap at index 0: <Node:*>[0,94]{A}
 [regions]   merged region: <Node:*>[0,94]{A}
 [regions]   returning index: 0
 
 [regions] for:   %13 = getelementptr inbounds %struct.Struct1, %struct.Struct1* %12, i32 0, i32 4, !dbg !91, !verifier.code !77
   in function: Sum2
 [regions]   using region: <Node:i64>[18,26]{A}
    found overlap at index 0: <Node:*>[0,94]{A}
 [regions]   merged region: <Node:*>[0,94]{A}
 [regions]   returning index: 0
 
 
 Finished analyzing function: Sum2
 
 Analyzing function: main
 -------INSERT: Global Variables main
 Analyzing function body: main
 Generating body for main
 [regions] for:   %3 = bitcast %struct.Struct3* %2 to i8*, !dbg !79, !verifier.code !42 with length 94
   in function: main
 [regions]   using region: <Node:i8>[0,94]{A}
    found overlap at index 0: <Node:*>[0,94]{A}
 [regions]   merged region: <Node:*>[0,94]{A}
 [regions]   returning index: 0
 
 [regions] for:   %6 = getelementptr inbounds %struct.Struct3, %struct.Struct3* %2, i32 0, i32 0, !dbg !80, !verifier.code !42
   in function: main
 [regions]   using region: <Node:i32>[0,4]{A}
    found overlap at index 0: <Node:*>[0,94]{A}
 [regions]   merged region: <Node:*>[0,94]{A}
 [regions]   returning index: 0
 
 [regions] for:   %6 = getelementptr inbounds %struct.Struct3, %struct.Struct3* %2, i32 0, i32 0, !dbg !80, !verifier.code !42
   in function: main
 [regions]   using region: <Node:i32>[0,4]{A}
    found overlap at index 0: <Node:*>[0,94]{A}
 [regions]   merged region: <Node:*>[0,94]{A}
 [regions]   returning index: 0
 
 [regions] for:   %12 = getelementptr inbounds %struct.Struct1, %struct.Struct1* %11, i32 0, i32 3, !dbg !84, !verifier.code !42
   in function: main
 [regions]   using region: <Node:i64>[10,18]{A}
    found overlap at index 0: <Node:*>[0,94]{A}
 [regions]   merged region: <Node:*>[0,94]{A}
 [regions]   returning index: 0
 
 [regions] for:   %12 = getelementptr inbounds %struct.Struct1, %struct.Struct1* %11, i32 0, i32 3, !dbg !84, !verifier.code !42
   in function: main
 [regions]   using region: <Node:i64>[10,18]{A}
    found overlap at index 0: <Node:*>[0,94]{A}
 [regions]   merged region: <Node:*>[0,94]{A}
 [regions]   returning index: 0
 
 [regions] for:   %18 = getelementptr inbounds %struct.Struct1, %struct.Struct1* %17, i32 0, i32 3, !dbg !88, !verifier.code !42
   in function: main
 [regions]   using region: <Node:i64>[10,18]{A}
    found overlap at index 0: <Node:*>[0,94]{A}
 [regions]   merged region: <Node:*>[0,94]{A}
 [regions]   returning index: 0
 
 [regions] for:   %18 = getelementptr inbounds %struct.Struct1, %struct.Struct1* %17, i32 0, i32 3, !dbg !88, !verifier.code !42
   in function: main
 [regions]   using region: <Node:i64>[10,18]{A}
    found overlap at index 0: <Node:*>[0,94]{A}
 [regions]   merged region: <Node:*>[0,94]{A}
 [regions]   returning index: 0
 
 [regions] for:   %24 = getelementptr inbounds %struct.Struct1, %struct.Struct1* %23, i32 0, i32 3, !dbg !92, !verifier.code !42
   in function: main
 [regions]   using region: <Node:i64>[10,18]{A}
    found overlap at index 0: <Node:*>[0,94]{A}
 [regions]   merged region: <Node:*>[0,94]{A}
 [regions]   returning index: 0
 
 [regions] for:   %24 = getelementptr inbounds %struct.Struct1, %struct.Struct1* %23, i32 0, i32 3, !dbg !92, !verifier.code !42
   in function: main
 [regions]   using region: <Node:i64>[10,18]{A}
    found overlap at index 0: <Node:*>[0,94]{A}
 [regions]   merged region: <Node:*>[0,94]{A}
 [regions]   returning index: 0
 
 [regions] for:   %30 = getelementptr inbounds %struct.Struct1, %struct.Struct1* %29, i32 0, i32 4, !dbg !96, !verifier.code !42
   in function: main
 [regions]   using region: <Node:i64>[18,26]{A}
    found overlap at index 0: <Node:*>[0,94]{A}
 [regions]   merged region: <Node:*>[0,94]{A}
 [regions]   returning index: 0
 
 [regions] for:   %30 = getelementptr inbounds %struct.Struct1, %struct.Struct1* %29, i32 0, i32 4, !dbg !96, !verifier.code !42
   in function: main
 [regions]   using region: <Node:i64>[18,26]{A}
    found overlap at index 0: <Node:*>[0,94]{A}
 [regions]   merged region: <Node:*>[0,94]{A}
 [regions]   returning index: 0
 
 [regions] for:   %36 = getelementptr inbounds %struct.Struct1, %struct.Struct1* %35, i32 0, i32 4, !dbg !100, !verifier.code !42
   in function: main
 [regions]   using region: <Node:i64>[18,26]{A}
    found overlap at index 0: <Node:*>[0,94]{A}
 [regions]   merged region: <Node:*>[0,94]{A}
 [regions]   returning index: 0
 
 [regions] for:   %36 = getelementptr inbounds %struct.Struct1, %struct.Struct1* %35, i32 0, i32 4, !dbg !100, !verifier.code !42
   in function: main
 [regions]   using region: <Node:i64>[18,26]{A}
    found overlap at index 0: <Node:*>[0,94]{A}
 [regions]   merged region: <Node:*>[0,94]{A}
 [regions]   returning index: 0
 
 [regions] for:   %42 = getelementptr inbounds %struct.Struct1, %struct.Struct1* %41, i32 0, i32 4, !dbg !104, !verifier.code !42
   in function: main
 [regions]   using region: <Node:i64>[18,26]{A}
    found overlap at index 0: <Node:*>[0,94]{A}
 [regions]   merged region: <Node:*>[0,94]{A}
 [regions]   returning index: 0
 
 [regions] for:   %42 = getelementptr inbounds %struct.Struct1, %struct.Struct1* %41, i32 0, i32 4, !dbg !104, !verifier.code !42
   in function: main
 [regions]   using region: <Node:i64>[18,26]{A}
    found overlap at index 0: <Node:*>[0,94]{A}
 [regions]   merged region: <Node:*>[0,94]{A}
 [regions]   returning index: 0
 
 
 Finished analyzing function: main
 
 Analyzing function: malloc
 -------INSERT: Global Variables malloc
 Analyzing function: llvm.memset.p0i8.i64
 -------INSERT: Global Variables llvm.memset.p0i8.i64
 Analyzing function: dummy_abort
 -------INSERT: Global Variables dummy_abort
 Analyzing function body: dummy_abort
 Generating body for dummy_abort
 
 Finished analyzing function: dummy_abort
 
 Analyzing function: __SMACK_code
 -------INSERT: Global Variables __SMACK_code
 Analyzing function: __VERIFIER_assume
 -------INSERT: Global Variables __VERIFIER_assume
 Analyzing function body: __VERIFIER_assume
 Generating body for __VERIFIER_assume
 
 Finished analyzing function: __VERIFIER_assume
 
 Analyzing function: __SMACK_dummy
 -------INSERT: Global Variables __SMACK_dummy
 Analyzing function body: __SMACK_dummy
 Generating body for __SMACK_dummy
 
 Finished analyzing function: __SMACK_dummy
 
 Analyzing function: __SMACK_and32
 -------INSERT: Global Variables __SMACK_and32
 Analyzing function body: __SMACK_and32
 Generating body for __SMACK_and32
 
 Finished analyzing function: __SMACK_and32
 
 Analyzing function: __SMACK_and64
 -------INSERT: Global Variables __SMACK_and64
 Analyzing function body: __SMACK_and64
 Generating body for __SMACK_and64
 
 Finished analyzing function: __SMACK_and64
 
 Analyzing function: __SMACK_and16
 -------INSERT: Global Variables __SMACK_and16
 Analyzing function body: __SMACK_and16
 Generating body for __SMACK_and16
 
 Finished analyzing function: __SMACK_and16
 
 Analyzing function: __SMACK_and8
 -------INSERT: Global Variables __SMACK_and8
 Analyzing function body: __SMACK_and8
 Generating body for __SMACK_and8
 
 Finished analyzing function: __SMACK_and8
 
 Analyzing function: __SMACK_or32
 -------INSERT: Global Variables __SMACK_or32
 Analyzing function body: __SMACK_or32
 Generating body for __SMACK_or32
 
 Finished analyzing function: __SMACK_or32
 
 Analyzing function: __SMACK_or64
 -------INSERT: Global Variables __SMACK_or64
 Analyzing function body: __SMACK_or64
 Generating body for __SMACK_or64
 
 Finished analyzing function: __SMACK_or64
 
 Analyzing function: __SMACK_or16
 -------INSERT: Global Variables __SMACK_or16
 Analyzing function body: __SMACK_or16
 Generating body for __SMACK_or16
 
 Finished analyzing function: __SMACK_or16
 
 Analyzing function: __SMACK_or8
 -------INSERT: Global Variables __SMACK_or8
 Analyzing function body: __SMACK_or8
 Generating body for __SMACK_or8
 
 Finished analyzing function: __SMACK_or8
 
 Analyzing function: __SMACK_check_overflow
 -------INSERT: Global Variables __SMACK_check_overflow
 Analyzing function body: __SMACK_check_overflow
 Generating body for __SMACK_check_overflow
 
 Finished analyzing function: __SMACK_check_overflow
 
 Analyzing function: __SMACK_decls
 -------INSERT: Global Variables __SMACK_decls
 Analyzing function body: __SMACK_decls
 Generating body for __SMACK_decls
 
 Finished analyzing function: __SMACK_decls
 
 Analyzing function: __SMACK_top_decl
 -------INSERT: Global Variables __SMACK_top_decl
 Analyzing function: __SMACK_check_memory_safety
 -------INSERT: Global Variables __SMACK_check_memory_safety
 Analyzing function: __SMACK_check_memory_leak
 -------INSERT: Global Variables __SMACK_check_memory_leak
 Analyzing function body: __SMACK_check_memory_leak
 Generating body for __SMACK_check_memory_leak
 
 Finished analyzing function: __SMACK_check_memory_leak
 
 Analyzing function: __SMACK_init_func_memory_model
 -------INSERT: Global Variables __SMACK_init_func_memory_model
 Analyzing function body: __SMACK_init_func_memory_model
 Generating body for __SMACK_init_func_memory_model
 
 Finished analyzing function: __SMACK_init_func_memory_model
 
 Analyzing function: __SMACK_my_memory_check
 -------INSERT: Global Variables __SMACK_my_memory_check
 Analyzing function body: __SMACK_my_memory_check
 Generating body for __SMACK_my_memory_check
 
 Finished analyzing function: __SMACK_my_memory_check
 
 Analyzing function: __SMACK_decl
 -------INSERT: Global Variables __SMACK_decl
 Analyzing function: __SMACK_whatIsThis
 -------INSERT: Global Variables __SMACK_whatIsThis
 Analyzing function body: __SMACK_whatIsThis
 Generating body for __SMACK_whatIsThis
 
 Finished analyzing function: __SMACK_whatIsThis
 
 Analyzing function: __WHAT_code
 -------INSERT: Global Variables __WHAT_code
 Analyzing function: llvm.dbg.value
 -------INSERT: Global Variables llvm.dbg.value
 Analyzing function: __SMACK_static_init
 -------INSERT: Global Variables __SMACK_static_init
 Analyzing function body: __SMACK_static_init
 Generating body for __SMACK_static_init
 
 Finished analyzing function: __SMACK_static_init
 
 Start Analyzing Prelude: Sum
 
 Start Analyzing Prelude: Sum2
 
 Start Analyzing Prelude: main
 
 Start Analyzing Prelude: malloc
 
 Start Analyzing Prelude: llvm.memset.p0i8.i64
 
 Start Analyzing Prelude: dummy_abort
 
 Start Analyzing Prelude: __SMACK_code.ref
 
 Start Analyzing Prelude: __SMACK_code.ref.i32
 
 Start Analyzing Prelude: __VERIFIER_assume
 
 Start Analyzing Prelude: __SMACK_dummy
 
 Start Analyzing Prelude: __SMACK_and32
 
 Start Analyzing Prelude: __SMACK_and64
 
 Start Analyzing Prelude: __SMACK_and16
 
 Start Analyzing Prelude: __SMACK_and8
 
 Start Analyzing Prelude: __SMACK_or32
 
 Start Analyzing Prelude: __SMACK_or64
 
 Start Analyzing Prelude: __SMACK_or16
 
 Start Analyzing Prelude: __SMACK_or8
 
 Start Analyzing Prelude: __SMACK_check_overflow
 
 Start Analyzing Prelude: __SMACK_top_decl.ref
 
 Start Analyzing Prelude: __SMACK_check_memory_safety
 
 Start Analyzing Prelude: __SMACK_check_memory_leak
 
 Start Analyzing Prelude: __SMACK_init_func_memory_model
 
 Start Analyzing Prelude: __SMACK_my_memory_check
 
 Start Analyzing Prelude: __SMACK_decl.ref
 
 Start Analyzing Prelude: __SMACK_whatIsThis
 
 Start Analyzing Prelude: __WHAT_code.ref
 
 Start Analyzing Prelude: llvm.dbg.value
 
 Start Analyzing Prelude: __SMACK_static_init
 
 Start Analyzing Prelude: boogie_si_record_i16
 
 Start Analyzing Prelude: boogie_si_record_i32
 
 Start Analyzing Prelude: boogie_si_record_i64
 
 Start Analyzing Prelude: boogie_si_record_i8
 
 Start Analyzing Prelude: boogie_si_record_ref
 
 Start Analyzing Prelude: $initialize
 
 SMACK found no errors with unroll bound 1.
