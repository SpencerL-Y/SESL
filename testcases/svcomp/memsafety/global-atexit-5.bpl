// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/smack ../testcases/svcomp/memsafety/global-atexit-5.c -ll ../testcases/svcomp/memsafety/global-atexit-5_IR.ll --bpl ../testcases/svcomp/memsafety/global-atexit-5.bpl -t --sh-mem-leak

const g: ref;
axiom (g == $sub.ref(0, 1032));
const free_g1: ref;
axiom (free_g1 == $sub.ref(0, 2064));
procedure  free_g1()
{
  var $p0: ref;
  var $p1: ref8;
$bb0:
  $p0 := $M.0;
  $p1 := $bitcast.ref.ref($p0);
  call free_($p1);
  $M.0 := $0.ref;
  return;
}
const free_: ref;
axiom (free_ == $sub.ref(0, 3096));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const free_g2: ref;
axiom (free_g2 == $sub.ref(0, 4128));
procedure  free_g2()
{
  var $p0: ref;
  var $i1: i1;
  var $p2: ref;
  var $p3: ref32;
  var $p4: ref8;
$bb0:
  $p0 := $M.0;
  $i1 := $ne.ref($p0, $0.ref);
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  $p2 := $M.0;
  $p3 := $load.ref($M.1, $p2);
  $p4 := $bitcast.ref.ref($p3);
  call free_($p4);
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  goto $bb3;
$bb3:
  return;
}
const h: ref;
axiom (h == $sub.ref(0, 5160));
procedure  h()
{
  var $i0: i1;
$bb0:
  call $i0 := __VERIFIER_nondet_bool();
  call {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i0);
  assume {:branchcond $i0} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i0 == 1);
  call exit(1);
  assume false;
$bb2:
  assume !(($i0 == 1));
  return;
}
const __VERIFIER_nondet_bool: ref;
axiom (__VERIFIER_nondet_bool == $sub.ref(0, 6192));
procedure  __VERIFIER_nondet_bool()
  returns ($r: i1);
const exit: ref;
axiom (exit == $sub.ref(0, 7224));
procedure  exit($i0: i32);
const f: ref;
axiom (f == $sub.ref(0, 8256));
procedure  f()
{
  var $p0: ref8;
  var $p1: ref32;
  var $p2: ref;
  var $i3: i32;
$bb0:
  call $p0 := malloc(4);
  $p1 := $bitcast.ref.ref($p0);
  $p2 := $M.0;
  $M.1 := $store.ref($M.1, $p2, $p0);
  call $i3 := atexit(free_g2);
  call h();
  return;
}
const malloc: ref;
axiom (malloc == $sub.ref(0, 9288));
procedure  malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $malloc($i0);
}
const atexit: ref;
axiom (atexit == $sub.ref(0, 10320));
procedure  atexit($p0: ref)
  returns ($r: i32);
const main: ref;
axiom (main == $sub.ref(0, 11352));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $p0: ref8;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref32;
  var $p6: ref8;
  var $p7: ref;
  var $p8: ref8;
$bb0:
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  call $p0 := malloc(8);
  $p1 := $bitcast.ref.ref($p0);
  $M.0 := $p0;
  call $i2 := atexit(free_g1);
  call $i3 := __VERIFIER_nondet_bool();
  call {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  call exit(1);
  assume false;
$bb2:
  assume !(($i3 == 1));
  call f();
  $p4 := $M.0;
  $p5 := $load.ref($M.1, $p4);
  $p6 := $bitcast.ref.ref($p5);
  call free_($p6);
  $p7 := $M.0;
  $p8 := $bitcast.ref.ref($p7);
  call free_($p8);
  $r := 0;
  return;
}
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 12384));
procedure  __SMACK_static_init()
{
$bb0:
  $M.0 := $0.ref;
  return;
}
procedure  boogie_si_record_i1(x: i1);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
