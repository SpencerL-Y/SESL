SMACK program verifier version 2.6.3
removing dead definition: llvm.dbg.declare
 WARNING: inttoptr @ addr 0x9d20c8 is (unsoundly) assumed to point to a fresh memory region.
 WARNING: inttoptr @ addr 0x9d20c8 is (unsoundly) assumed to point to a fresh memory region.
 WARNING: inttoptr @ addr 0x9d20c8 is (unsoundly) assumed to point to a fresh memory region.
 WARNING: inttoptr @ addr 0x9d20c8 is (unsoundly) assumed to point to a fresh memory region.
 [regions] for: @g = internal global i32** null, align 8, !dbg !0
   at instruction:   %16 = bitcast i32*** @g to i8*, !dbg !60
   in function: main
 [regions]   using region: <Node:i32**>[0,8]{S}
 [regions]   returning index: 0
 
 [regions] for: @g = internal global i32** null, align 8, !dbg !0
   at instruction:   %16 = bitcast i32*** @g to i8*, !dbg !60
   in function: main
 [regions]   using region: <Node:i32**>[0,8]{S}
    found overlap at index 0: <Node:i32**>[0,8]{S}
 [regions]   merged region: <Node:i32**>[0,8]{S}
 [regions]   returning index: 0
 
 [regions] for: @g = internal global i32** null, align 8, !dbg !0
   at instruction:   %16 = bitcast i32*** @g to i8*, !dbg !60
   in function: main
 [regions]   using region: <Node:i32**>[0,8]{S}
    found overlap at index 0: <Node:i32**>[0,8]{S}
 [regions]   merged region: <Node:i32**>[0,8]{S}
 [regions]   returning index: 0
 
 [regions] for: @g = internal global i32** null, align 8, !dbg !0
   at instruction:   %16 = bitcast i32*** @g to i8*, !dbg !60
   in function: main
 [regions]   using region: <Node:i32**>[0,8]{S}
    found overlap at index 0: <Node:i32**>[0,8]{S}
 [regions]   merged region: <Node:i32**>[0,8]{S}
 [regions]   returning index: 0
 
 [regions] for:   %8 = load i32**, i32*** @g, align 8, !dbg !52, !verifier.code !49
   in function: free_g2
 [regions]   using region: <Node:i32*>[0,8]{A}
 [regions]   returning index: 1
 
 [regions] for: @g = internal global i32** null, align 8, !dbg !0
   at instruction:   %16 = bitcast i32*** @g to i8*, !dbg !60
   in function: main
 [regions]   using region: <Node:i32**>[0,8]{S}
    found overlap at index 0: <Node:i32**>[0,8]{S}
 [regions]   merged region: <Node:i32**>[0,8]{S}
 [regions]   returning index: 0
 
 [regions] for:   %5 = load i32**, i32*** @g, align 8, !dbg !50, !verifier.code !48
   in function: f
 [regions]   using region: <Node:i32*>[0,8]{A}
    found overlap at index 1: <Node:i32*>[0,8]{A}
 [regions]   merged region: <Node:i32*>[0,8]{A}
 [regions]   returning index: 1
 
 [regions] for: @g = internal global i32** null, align 8, !dbg !0
   at instruction:   %16 = bitcast i32*** @g to i8*, !dbg !60
   in function: main
 [regions]   using region: <Node:i32**>[0,8]{S}
    found overlap at index 0: <Node:i32**>[0,8]{S}
 [regions]   merged region: <Node:i32**>[0,8]{S}
 [regions]   returning index: 0
 
 [regions] for: @g = internal global i32** null, align 8, !dbg !0
   at instruction:   %16 = bitcast i32*** @g to i8*, !dbg !60
   in function: main
 [regions]   using region: <Node:i32**>[0,8]{S}
    found overlap at index 0: <Node:i32**>[0,8]{S}
 [regions]   merged region: <Node:i32**>[0,8]{S}
 [regions]   returning index: 0
 
 [regions] for:   %11 = load i32**, i32*** @g, align 8, !dbg !57, !verifier.code !48
   in function: main
 [regions]   using region: <Node:i32*>[0,8]{A}
    found overlap at index 1: <Node:i32*>[0,8]{A}
 [regions]   merged region: <Node:i32*>[0,8]{A}
 [regions]   returning index: 1
 
 [regions] for: @g = internal global i32** null, align 8, !dbg !0
   at instruction:   %16 = bitcast i32*** @g to i8*, !dbg !60
   in function: main
 [regions]   using region: <Node:i32**>[0,8]{S}
    found overlap at index 0: <Node:i32**>[0,8]{S}
 [regions]   merged region: <Node:i32**>[0,8]{S}
 [regions]   returning index: 0
 
 [regions] for: @g = internal global i32** null, align 8, !dbg !0
   at instruction:   %16 = bitcast i32*** @g to i8*, !dbg !60
   in function: main
 [regions]   using region: <Node:i32**>[0,8]{S}
    found overlap at index 0: <Node:i32**>[0,8]{S}
 [regions]   merged region: <Node:i32**>[0,8]{S}
 [regions]   returning index: 0
 
 We are now translating the program to boogie...
 Analyzing globals...
 -------INSERT: Global Variables g
 -------INSERT: Global Variables .str.31
 Analyzing functions...
 Analyzing function: free_g1
 -------INSERT: Global Variables free_g1
 Analyzing function body: free_g1
 Generating body for free_g1
 [regions] for: @g = internal global i32** null, align 8, !dbg !0
   at instruction:   %16 = bitcast i32*** @g to i8*, !dbg !60
   in function: main
 [regions]   using region: <Node:i32**>[0,8]{S}
    found overlap at index 0: <Node:i32**>[0,8]{S}
 [regions]   merged region: <Node:i32**>[0,8]{S}
 [regions]   returning index: 0
 
 [regions] for: @g = internal global i32** null, align 8, !dbg !0
   at instruction:   %16 = bitcast i32*** @g to i8*, !dbg !60
   in function: main
 [regions]   using region: <Node:i32**>[0,8]{S}
    found overlap at index 0: <Node:i32**>[0,8]{S}
 [regions]   merged region: <Node:i32**>[0,8]{S}
 [regions]   returning index: 0
 
 [regions] for: @g = internal global i32** null, align 8, !dbg !0
   at instruction:   %16 = bitcast i32*** @g to i8*, !dbg !60
   in function: main
 [regions]   using region: <Node:i32**>[0,8]{S}
    found overlap at index 0: <Node:i32**>[0,8]{S}
 [regions]   merged region: <Node:i32**>[0,8]{S}
 [regions]   returning index: 0
 
 
 Finished analyzing function: free_g1
 
 Analyzing function: free_
 -------INSERT: Global Variables free_
 Analyzing function: free_g2
 -------INSERT: Global Variables free_g2
 Analyzing function body: free_g2
 Generating body for free_g2
 [regions] for: @g = internal global i32** null, align 8, !dbg !0
   at instruction:   %16 = bitcast i32*** @g to i8*, !dbg !60
   in function: main
 [regions]   using region: <Node:i32**>[0,8]{S}
    found overlap at index 0: <Node:i32**>[0,8]{S}
 [regions]   merged region: <Node:i32**>[0,8]{S}
 [regions]   returning index: 0
 
 [regions] for: @g = internal global i32** null, align 8, !dbg !0
   at instruction:   %16 = bitcast i32*** @g to i8*, !dbg !60
   in function: main
 [regions]   using region: <Node:i32**>[0,8]{S}
    found overlap at index 0: <Node:i32**>[0,8]{S}
 [regions]   merged region: <Node:i32**>[0,8]{S}
 [regions]   returning index: 0
 
 [regions] for:   %8 = load i32**, i32*** @g, align 8, !dbg !52, !verifier.code !49
   in function: free_g2
 [regions]   using region: <Node:i32*>[0,8]{A}
    found overlap at index 1: <Node:i32*>[0,8]{A}
 [regions]   merged region: <Node:i32*>[0,8]{A}
 [regions]   returning index: 1
 
 
 Finished analyzing function: free_g2
 
 Analyzing function: h
 -------INSERT: Global Variables h
 Analyzing function body: h
 Generating body for h
 
 Finished analyzing function: h
 
 Analyzing function: f
 -------INSERT: Global Variables f
 Analyzing function body: f
 Generating body for f
 [regions] for: @g = internal global i32** null, align 8, !dbg !0
   at instruction:   %16 = bitcast i32*** @g to i8*, !dbg !60
   in function: main
 [regions]   using region: <Node:i32**>[0,8]{S}
    found overlap at index 0: <Node:i32**>[0,8]{S}
 [regions]   merged region: <Node:i32**>[0,8]{S}
 [regions]   returning index: 0
 
 [regions] for:   %5 = load i32**, i32*** @g, align 8, !dbg !50, !verifier.code !48
   in function: f
 [regions]   using region: <Node:i32*>[0,8]{A}
    found overlap at index 1: <Node:i32*>[0,8]{A}
 [regions]   merged region: <Node:i32*>[0,8]{A}
 [regions]   returning index: 1
 
 [regions] for:   %5 = load i32**, i32*** @g, align 8, !dbg !50, !verifier.code !48
   in function: f
 [regions]   using region: <Node:i32*>[0,8]{A}
    found overlap at index 1: <Node:i32*>[0,8]{A}
 [regions]   merged region: <Node:i32*>[0,8]{A}
 [regions]   returning index: 1
 
 
 Finished analyzing function: f
 
 Analyzing function: malloc
 -------INSERT: Global Variables malloc
 Analyzing function: atexit
 -------INSERT: Global Variables atexit
 Analyzing function: main
 -------INSERT: Global Variables main
 Analyzing function body: main
 Generating body for main
 [regions] for: @g = internal global i32** null, align 8, !dbg !0
   at instruction:   %16 = bitcast i32*** @g to i8*, !dbg !60
   in function: main
 [regions]   using region: <Node:i32**>[0,8]{S}
    found overlap at index 0: <Node:i32**>[0,8]{S}
 [regions]   merged region: <Node:i32**>[0,8]{S}
 [regions]   returning index: 0
 
 [regions] for: @g = internal global i32** null, align 8, !dbg !0
   at instruction:   %16 = bitcast i32*** @g to i8*, !dbg !60
   in function: main
 [regions]   using region: <Node:i32**>[0,8]{S}
    found overlap at index 0: <Node:i32**>[0,8]{S}
 [regions]   merged region: <Node:i32**>[0,8]{S}
 [regions]   returning index: 0
 
 [regions] for: @g = internal global i32** null, align 8, !dbg !0
   at instruction:   %16 = bitcast i32*** @g to i8*, !dbg !60
   in function: main
 [regions]   using region: <Node:i32**>[0,8]{S}
    found overlap at index 0: <Node:i32**>[0,8]{S}
 [regions]   merged region: <Node:i32**>[0,8]{S}
 [regions]   returning index: 0
 
 [regions] for:   %11 = load i32**, i32*** @g, align 8, !dbg !57, !verifier.code !48
   in function: main
 [regions]   using region: <Node:i32*>[0,8]{A}
    found overlap at index 1: <Node:i32*>[0,8]{A}
 [regions]   merged region: <Node:i32*>[0,8]{A}
 [regions]   returning index: 1
 
 [regions] for: @g = internal global i32** null, align 8, !dbg !0
   at instruction:   %16 = bitcast i32*** @g to i8*, !dbg !60
   in function: main
 [regions]   using region: <Node:i32**>[0,8]{S}
    found overlap at index 0: <Node:i32**>[0,8]{S}
 [regions]   merged region: <Node:i32**>[0,8]{S}
 [regions]   returning index: 0
 
 
 Finished analyzing function: main
 
 Analyzing function: __SMACK_code
 -------INSERT: Global Variables __SMACK_code
 Analyzing function: __VERIFIER_assume
 -------INSERT: Global Variables __VERIFIER_assume
 Analyzing function body: __VERIFIER_assume
 Generating body for __VERIFIER_assume
 
 Finished analyzing function: __VERIFIER_assume
 
 Analyzing function: __SMACK_dummy
 -------INSERT: Global Variables __SMACK_dummy
 Analyzing function body: __SMACK_dummy
 Generating body for __SMACK_dummy
 
 Finished analyzing function: __SMACK_dummy
 
 Analyzing function: __SMACK_and32
 -------INSERT: Global Variables __SMACK_and32
 Analyzing function body: __SMACK_and32
 Generating body for __SMACK_and32
 
 Finished analyzing function: __SMACK_and32
 
 Analyzing function: __SMACK_and64
 -------INSERT: Global Variables __SMACK_and64
 Analyzing function body: __SMACK_and64
 Generating body for __SMACK_and64
 
 Finished analyzing function: __SMACK_and64
 
 Analyzing function: __SMACK_and16
 -------INSERT: Global Variables __SMACK_and16
 Analyzing function body: __SMACK_and16
 Generating body for __SMACK_and16
 
 Finished analyzing function: __SMACK_and16
 
 Analyzing function: __SMACK_and8
 -------INSERT: Global Variables __SMACK_and8
 Analyzing function body: __SMACK_and8
 Generating body for __SMACK_and8
 
 Finished analyzing function: __SMACK_and8
 
 Analyzing function: __SMACK_or32
 -------INSERT: Global Variables __SMACK_or32
 Analyzing function body: __SMACK_or32
 Generating body for __SMACK_or32
 
 Finished analyzing function: __SMACK_or32
 
 Analyzing function: __SMACK_or64
 -------INSERT: Global Variables __SMACK_or64
 Analyzing function body: __SMACK_or64
 Generating body for __SMACK_or64
 
 Finished analyzing function: __SMACK_or64
 
 Analyzing function: __SMACK_or16
 -------INSERT: Global Variables __SMACK_or16
 Analyzing function body: __SMACK_or16
 Generating body for __SMACK_or16
 
 Finished analyzing function: __SMACK_or16
 
 Analyzing function: __SMACK_or8
 -------INSERT: Global Variables __SMACK_or8
 Analyzing function body: __SMACK_or8
 Generating body for __SMACK_or8
 
 Finished analyzing function: __SMACK_or8
 
 Analyzing function: __SMACK_check_overflow
 -------INSERT: Global Variables __SMACK_check_overflow
 Analyzing function body: __SMACK_check_overflow
 Generating body for __SMACK_check_overflow
 
 Finished analyzing function: __SMACK_check_overflow
 
 Analyzing function: __VERIFIER_nondet_int
 -------INSERT: Global Variables __VERIFIER_nondet_int
 Analyzing function body: __VERIFIER_nondet_int
 Generating body for __VERIFIER_nondet_int
 
 Finished analyzing function: __VERIFIER_nondet_int
 
 Analyzing function: __SMACK_nondet_int
 -------INSERT: Global Variables __SMACK_nondet_int
 Analyzing function: __VERIFIER_nondet_bool
 -------INSERT: Global Variables __VERIFIER_nondet_bool
 Analyzing function body: __VERIFIER_nondet_bool
 Generating body for __VERIFIER_nondet_bool
 
 Finished analyzing function: __VERIFIER_nondet_bool
 
 Analyzing function: __SMACK_decls
 -------INSERT: Global Variables __SMACK_decls
 Analyzing function body: __SMACK_decls
 Generating body for __SMACK_decls
 
 Finished analyzing function: __SMACK_decls
 
 Analyzing function: __SMACK_top_decl
 -------INSERT: Global Variables __SMACK_top_decl
 Analyzing function: __SMACK_check_memory_safety
 -------INSERT: Global Variables __SMACK_check_memory_safety
 Analyzing function: __SMACK_check_memory_leak
 -------INSERT: Global Variables __SMACK_check_memory_leak
 Analyzing function body: __SMACK_check_memory_leak
 Generating body for __SMACK_check_memory_leak
 
 Finished analyzing function: __SMACK_check_memory_leak
 
 Analyzing function: __SMACK_init_func_memory_model
 -------INSERT: Global Variables __SMACK_init_func_memory_model
 Analyzing function body: __SMACK_init_func_memory_model
 Generating body for __SMACK_init_func_memory_model
 
 Finished analyzing function: __SMACK_init_func_memory_model
 
 Analyzing function: __SMACK_my_memory_check
 -------INSERT: Global Variables __SMACK_my_memory_check
 Analyzing function body: __SMACK_my_memory_check
 Generating body for __SMACK_my_memory_check
 
 Finished analyzing function: __SMACK_my_memory_check
 
 Analyzing function: __SMACK_decl
 -------INSERT: Global Variables __SMACK_decl
 Analyzing function: __SMACK_whatIsThis
 -------INSERT: Global Variables __SMACK_whatIsThis
 Analyzing function body: __SMACK_whatIsThis
 Generating body for __SMACK_whatIsThis
 
 Finished analyzing function: __SMACK_whatIsThis
 
 Analyzing function: __WHAT_code
 -------INSERT: Global Variables __WHAT_code
 Analyzing function: exit
 -------INSERT: Global Variables exit
 Analyzing function body: exit
 Generating body for exit
 
 Finished analyzing function: exit
 
 Analyzing function: llvm.dbg.value
 -------INSERT: Global Variables llvm.dbg.value
 Analyzing function: __SMACK_static_init
 -------INSERT: Global Variables __SMACK_static_init
 Analyzing function body: __SMACK_static_init
 Generating body for __SMACK_static_init
 [regions] for: @g = internal global i32** null, align 8, !dbg !0
   at instruction:   %16 = bitcast i32*** @g to i8*, !dbg !60
   in function: main
 [regions]   using region: <Node:i32**>[0,8]{S}
    found overlap at index 0: <Node:i32**>[0,8]{S}
 [regions]   merged region: <Node:i32**>[0,8]{S}
 [regions]   returning index: 0
 
 [regions] for: @g = internal global i32** null, align 8, !dbg !0
   at instruction:   %16 = bitcast i32*** @g to i8*, !dbg !60
   in function: main
 [regions]   using region: <Node:i32**>[0,8]{S}
    found overlap at index 0: <Node:i32**>[0,8]{S}
 [regions]   merged region: <Node:i32**>[0,8]{S}
 [regions]   returning index: 0
 
 
 Finished analyzing function: __SMACK_static_init
 
 Start Analyzing Prelude: free_g1
 
 Start Analyzing Prelude: free_
 
 Start Analyzing Prelude: free_g2
 
 Start Analyzing Prelude: h
 
 Start Analyzing Prelude: f
 
 Start Analyzing Prelude: malloc
 
 Start Analyzing Prelude: atexit
 
 Start Analyzing Prelude: main
 
 Start Analyzing Prelude: __SMACK_code.ref
 
 Start Analyzing Prelude: __SMACK_code.ref.i32
 
 Start Analyzing Prelude: __VERIFIER_assume
 
 Start Analyzing Prelude: __SMACK_dummy
 
 Start Analyzing Prelude: __SMACK_and32
 
 Start Analyzing Prelude: __SMACK_and64
 
 Start Analyzing Prelude: __SMACK_and16
 
 Start Analyzing Prelude: __SMACK_and8
 
 Start Analyzing Prelude: __SMACK_or32
 
 Start Analyzing Prelude: __SMACK_or64
 
 Start Analyzing Prelude: __SMACK_or16
 
 Start Analyzing Prelude: __SMACK_or8
 
 Start Analyzing Prelude: __SMACK_check_overflow
 
 Start Analyzing Prelude: __VERIFIER_nondet_int
 
 Start Analyzing Prelude: __SMACK_nondet_int
 
 Start Analyzing Prelude: __VERIFIER_nondet_bool
 
 Start Analyzing Prelude: __SMACK_top_decl.ref
 
 Start Analyzing Prelude: __SMACK_check_memory_safety
 
 Start Analyzing Prelude: __SMACK_check_memory_leak
 
 Start Analyzing Prelude: __SMACK_init_func_memory_model
 
 Start Analyzing Prelude: __SMACK_my_memory_check
 
 Start Analyzing Prelude: __SMACK_decl.ref
 
 Start Analyzing Prelude: __SMACK_whatIsThis
 
 Start Analyzing Prelude: __WHAT_code.ref
 
 Start Analyzing Prelude: exit
 
 Start Analyzing Prelude: llvm.dbg.value
 
 Start Analyzing Prelude: __SMACK_static_init
 
 Start Analyzing Prelude: boogie_si_record_i1
 
 Start Analyzing Prelude: boogie_si_record_i16
 
 Start Analyzing Prelude: boogie_si_record_i32
 
 Start Analyzing Prelude: boogie_si_record_i64
 
 Start Analyzing Prelude: boogie_si_record_i8
 
 Start Analyzing Prelude: boogie_si_record_ref
 
 Start Analyzing Prelude: $initialize
 
 /usr/local/share/smack/lib/stdlib.c(12,3): This assertion might not hold.
Execution trace:
    ../testcases/svcomp/memsafety/global-atexit-5.c(31,15): 
    /usr/local/share/smack/lib/smack.c(1884,3): 
    ../testcases/svcomp/memsafety/global-atexit-5.c(31,15): 
    ../testcases/svcomp/memsafety/global-atexit-5.c(31,15): 
    ../testcases/svcomp/memsafety/global-atexit-5.c(31,15): 
    /usr/local/share/smack/lib/smack.c(1577,20): 
    /usr/local/share/smack/lib/smack.c(1461,11): 
    /usr/local/share/smack/lib/smack.c(1462,39): 
    /usr/local/share/smack/lib/smack.c(0,0): 
    /usr/local/share/smack/lib/smack.c(1604,29): 
    /usr/local/share/smack/lib/smack.c(0,0): 
    /usr/local/share/smack/lib/smack.c(1577,20): 
    /usr/local/share/smack/lib/smack.c(1578,31): 
    /usr/local/share/smack/lib/smack.c(1578,28): 
    /usr/local/share/smack/lib/smack.c(1604,29): 
    /usr/local/share/smack/lib/smack.c(1578,28): 
    ../testcases/svcomp/memsafety/global-atexit-5.c(31,15): 
    ../testcases/svcomp/memsafety/global-atexit-5.c(33,32): 
    /usr/local/share/smack/lib/stdlib.c(10,3): 

SMACK found an error.
