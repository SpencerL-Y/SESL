// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/smack ../svcomp/memsafety//test-0019-1.c -ll ../svcomp/memsafety//test-0019-1_IR.ll --bpl ../svcomp/memsafety//test-0019-1.bpl -t --sh-mem-leak

const {:global_variable} {:pointer_to_size 16} .str: ref;
axiom (.str == $sub.ref(0, 1026));
const {:global_variable} {:pointer_to_size 280} {:count 35} .str.1: ref;
axiom (.str.1 == $sub.ref(0, 2085));
const {:global_variable} {:pointer_to_size 152} {:count 19} __PRETTY_FUNCTION__.reach_error: ref;
axiom (__PRETTY_FUNCTION__.reach_error == $sub.ref(0, 3128));
const reach_error: ref;
axiom (reach_error == $sub.ref(0, 4160));
procedure  reach_error()
{
$bb0:
  call __assert_fail(.str, .str.1, 3, __PRETTY_FUNCTION__.reach_error);
  assume false;
}
const __assert_fail: ref;
axiom (__assert_fail == $sub.ref(0, 5192));
procedure  __assert_fail($p0: ref, $p1: ref, $i2: i32, $p3: ref);
const main: ref;
axiom (main == $sub.ref(0, 6224));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref8;
  var $p4: ref;
  var $p5: ref8;
$bb0:
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  call $p0 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume true;
  call alloc_data($p0);
  $p1 := $bitcast.ref.ref($p0);
  $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p3 := $load.ref($M.0, $p2);
  $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p5 := $load.ref($M.1, $p4);
  call free_data($p3, $p5);
  $r := 0;
  return;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 7256));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const alloc_data: ref;
axiom (alloc_data == $sub.ref(0, 8288));
procedure  alloc_data($p0: ref)
{
  var $p1: ref8;
  var $p2: ref;
  var $p3: ref8;
  var $p4: ref;
$bb0:
  call $p1 := malloc(16);
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p2, $p1);
  call $p3 := malloc(24);
  $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.1 := $store.ref($M.1, $p4, $p3);
  return;
}
const free_data: ref;
axiom (free_data == $sub.ref(0, 9320));
procedure  free_data($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref8;
  var $p8: ref;
  var $p9: ref8;
  var $i10: i1;
$bb0:
  call $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  $p3 := $bitcast.ref.ref($p2);
  $p4 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.2 := $store.ref($M.2, $p4, $p0);
  $p5 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.3 := $store.ref($M.3, $p5, $p1);
  assume true;
  $p6 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p7 := $load.ref($M.2, $p6);
  $p8 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p9 := $load.ref($M.3, $p8);
  $i10 := $eq.ref($p7, $p9);
  assume {:branchcond $i10} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i10 == 1);
  goto $bb3;
$bb2:
  assume !(($i10 == 1));
  call free_($p7);
  call free_($p9);
  goto $bb3;
$bb3:
  return;
}
const free_: ref;
axiom (free_ == $sub.ref(0, 10352));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const malloc: ref;
axiom (malloc == $sub.ref(0, 11384));
procedure  malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $malloc($i0);
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 12416));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 13448));
procedure  __SMACK_static_init()
{
$bb0:
  return;
}
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
