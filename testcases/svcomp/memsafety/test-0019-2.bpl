// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/sesl ../testcases/svcomp/memsafety/test-0019-2.i -ll ../testcases/svcomp/memsafety/test-0019-2_IR.ll --bpl ../testcases/svcomp/memsafety/test-0019-2.bpl -t --sh-mem-leak --add-line-info

const {:global_variable} {:pointer_to_size 16} .str: ref;
axiom (.str == $sub.ref(0, 1026));
const {:global_variable} {:pointer_to_size 112} {:count 14} .str.1: ref;
axiom (.str.1 == $sub.ref(0, 2064));
const {:global_variable} {:pointer_to_size 152} {:count 19} __PRETTY_FUNCTION__.reach_error: ref;
axiom (__PRETTY_FUNCTION__.reach_error == $sub.ref(0, 3107));
const reach_error: ref;
axiom (reach_error == $sub.ref(0, 4139));
procedure  reach_error()
{
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0019-2.i", 12, 83} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0019-2.i", 12, 83} true;
  call __assert_fail(.str, .str.1, 3, __PRETTY_FUNCTION__.reach_error);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0019-2.i", 12, 83} true;
  assume false;
}
const __assert_fail: ref;
axiom (__assert_fail == $sub.ref(0, 5171));
procedure  __assert_fail($p0: ref, $p1: ref, $i2: i32, $p3: ref);
const main: ref;
axiom (main == $sub.ref(0, 6203));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $p0: ref;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0019-2.i", 545, 5} true;
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  call $p0 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume true;
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0019-2.i", 545, 5} true;
  call alloc_data($p0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0019-2.i", 546, 5} true;
  call free_data($p0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0019-2.i", 547, 5} true;
  $r := 0;
  return;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 7235));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const alloc_data: ref;
axiom (alloc_data == $sub.ref(0, 8267));
procedure  alloc_data($p0: ref)
{
  var $p1: ref8;
  var $p2: ref;
  var $p3: ref8;
  var $p4: ref;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0019-2.i", 529, 17} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0019-2.i", 529, 17} true;
  call $p1 := malloc(16);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0019-2.i", 529, 12} true;
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0019-2.i", 529, 15} true;
  $M.0 := $store.ref($M.0, $p2, $p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0019-2.i", 530, 17} true;
  call $p3 := malloc(24);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0019-2.i", 530, 12} true;
  $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0019-2.i", 530, 15} true;
  $M.1 := $store.ref($M.1, $p4, $p3);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0019-2.i", 531, 1} true;
  return;
}
const free_data: ref;
axiom (free_data == $sub.ref(0, 9299));
procedure  free_data($p0: ref)
{
  var $p1: ref;
  var $p2: ref8;
  var $p3: ref;
  var $p4: ref8;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0019-2.i", 534, 22} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0019-2.i", 534, 22} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0019-2.i", 534, 22} true;
  $p2 := $load.ref($M.0, $p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0019-2.i", 535, 22} true;
  $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0019-2.i", 535, 22} true;
  $p4 := $load.ref($M.1, $p3);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0019-2.i", 536, 12} true;
  $i5 := $eq.ref($p2, $p4);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0019-2.i", 536, 9} true;
  assume {:branchcond $i5} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i5 == 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0019-2.i", 537, 9} true;
  call free_($p2);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0019-2.i", 538, 9} true;
  call free_($p4);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0019-2.i", 539, 5} true;
  goto $bb3;
$bb2:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0019-2.i", 536, 9} true;
  assume !(($i5 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0019-2.i", 540, 11} true;
  $p6 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0019-2.i", 540, 14} true;
  $M.0 := $store.ref($M.0, $p6, $0.ref);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0019-2.i", 541, 11} true;
  $p7 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0019-2.i", 541, 14} true;
  $M.1 := $store.ref($M.1, $p7, $0.ref);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0019-2.i", 542, 1} true;
  return;
}
const free_: ref;
axiom (free_ == $sub.ref(0, 10331));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const malloc: ref;
axiom (malloc == $sub.ref(0, 11363));
procedure  malloc($i0: i32)
  returns ($r: ref)
{
  call $r := $malloc($zext.i32.i64($i0));
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 12395));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 13427));
procedure  __SMACK_static_init()
{
$bb0:
  return;
}
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
