// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/smack ../testcases/svcomp/memsafety/test-0102-1.c -ll ../testcases/svcomp/memsafety/test-0102-1_IR.ll --bpl ../testcases/svcomp/memsafety/test-0102-1.bpl -t --sh-mem-leak

const destroy_sub: ref;
axiom (destroy_sub == $sub.ref(0, 1032));
procedure  destroy_sub($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref8;
  var $p4: ref8;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref8;
  var $p13: ref8;
  var $p14: ref;
  var $p15: ref8;
  var $p16: ref;
  var $i17: i1;
$bb0:
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p2 := $load.ref($M.0, $p1);
  $p3 := $bitcast.ref.ref($p2);
  $p4 := $add.ref($p3, $mul.ref($sub.i64(0, $p2i.ref.i64($add.ref($add.ref($0.ref, $mul.ref(0, 24)), $mul.ref(8, 1)))), 1));
  $p5 := $bitcast.ref.ref($p4);
  $p6 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(8, 1));
  $i7 := $ne.ref($p6, $p0);
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  $p8 := $p4;
  goto $bb4;
$bb2:
  assume !(($i7 == 1));
  goto $bb3;
$bb3:
  return;
$bb4:
  $p9 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(8, 1));
  $p10 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(0, 1));
  $p11 := $load.ref($M.0, $p10);
  $p12 := $bitcast.ref.ref($p11);
  $p13 := $add.ref($p12, $mul.ref($sub.i64(0, $p2i.ref.i64($add.ref($add.ref($0.ref, $mul.ref(0, 24)), $mul.ref(8, 1)))), 1));
  $p14 := $bitcast.ref.ref($p13);
  $p15 := $bitcast.ref.ref($p8);
  call free_($p15);
  $p16 := $add.ref($add.ref($p14, $mul.ref(0, 24)), $mul.ref(8, 1));
  $i17 := $ne.ref($p16, $p0);
  assume {:branchcond $i17} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i17 == 1);
  $p8 := $p13;
  goto $bb4;
$bb6:
  assume !(($i17 == 1));
  goto $bb3;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 2064));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const free_: ref;
axiom (free_ == $sub.ref(0, 3096));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const destroy_top: ref;
axiom (destroy_top == $sub.ref(0, 4128));
procedure  destroy_top($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref8;
  var $p4: ref8;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref8;
  var $p13: ref8;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref8;
  var $p18: ref;
  var $i19: i1;
$bb0:
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p2 := $load.ref($M.0, $p1);
  $p3 := $bitcast.ref.ref($p2);
  $p4 := $add.ref($p3, $mul.ref(0, 1));
  $p5 := $bitcast.ref.ref($p4);
  $p6 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(0, 1));
  $i7 := $ne.ref($p6, $p0);
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  $p8 := $p2;
  goto $bb4;
$bb2:
  assume !(($i7 == 1));
  goto $bb3;
$bb3:
  return;
$bb4:
  $p9 := $add.ref($add.ref($p8, $mul.ref(0, 48)), $mul.ref(0, 1));
  $p10 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
  $p11 := $load.ref($M.0, $p10);
  $p12 := $bitcast.ref.ref($p11);
  $p13 := $add.ref($p12, $mul.ref(0, 1));
  $p14 := $bitcast.ref.ref($p13);
  $p15 := $add.ref($add.ref($p8, $mul.ref(0, 48)), $mul.ref(16, 1));
  call destroy_sub($p15);
  $p16 := $add.ref($add.ref($p8, $mul.ref(0, 48)), $mul.ref(32, 1));
  call destroy_sub($p16);
  $p17 := $bitcast.ref.ref($p8);
  call free_($p17);
  $p18 := $add.ref($add.ref($p14, $mul.ref(0, 48)), $mul.ref(0, 1));
  $i19 := $ne.ref($p18, $p0);
  assume {:branchcond $i19} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i19 == 1);
  $p8 := $p11;
  goto $bb4;
$bb6:
  assume !(($i19 == 1));
  goto $bb3;
}
const insert_sub: ref;
axiom (insert_sub == $sub.ref(0, 5160));
procedure  insert_sub($p0: ref)
{
  var $p1: ref8;
  var $p2: ref;
  var $i3: i1;
  var $p4: ref32;
  var $p5: ref;
$bb0:
  call $p1 := malloc(24);
  $p2 := $bitcast.ref.ref($p1);
  $i3 := $ne.ref($p2, $0.ref);
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  $p4 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
  $M.0 := $store.i32($M.0, $p4, 0);
  $p5 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(8, 1));
  call list_add_tail($p5, $p0);
  return;
$bb2:
  assume !(($i3 == 1));
  call abort();
  assume false;
}
const malloc: ref;
axiom (malloc == $sub.ref(0, 6192));
procedure  malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $malloc($i0);
}
const abort: ref;
axiom (abort == $sub.ref(0, 7224));
procedure  abort();
const list_add_tail: ref;
axiom (list_add_tail == $sub.ref(0, 8256));
procedure  list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
$bb0:
  $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p3 := $load.ref($M.0, $p2);
  call __list_add($p0, $p3, $p1);
  return;
}
const __list_add: ref;
axiom (__list_add == $sub.ref(0, 9288));
procedure  __list_add($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
$bb0:
  $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.0 := $store.ref($M.0, $p3, $p0);
  $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p4, $p2);
  $p5 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.0 := $store.ref($M.0, $p5, $p1);
  $p6 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p6, $p0);
  return;
}
const create_sub_list: ref;
axiom (create_sub_list == $sub.ref(0, 10320));
procedure  create_sub_list($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
$bb0:
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.0 := $store.ref($M.0, $p1, $p0);
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p2, $p0);
  goto $bb1;
$bb1:
  call insert_sub($p0);
  goto $bb2;
$bb2:
  call $i3 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
  $i4 := $ne.i32($i3, 0);
  assume {:branchcond $i4} true;
  goto $bb3, $bb4;
$bb3:
  assume ($i4 == 1);
  goto $bb1;
$bb4:
  assume !(($i4 == 1));
  return;
}
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0, 11352));
procedure  __VERIFIER_nondet_int()
  returns ($r: i32);
const insert_top: ref;
axiom (insert_top == $sub.ref(0, 12384));
procedure  insert_top($p0: ref)
{
  var $p1: ref8;
  var $p2: ref;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
$bb0:
  call $p1 := malloc(48);
  $p2 := $bitcast.ref.ref($p1);
  $i3 := $ne.ref($p2, $0.ref);
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  $p4 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(16, 1));
  call create_sub_list($p4);
  $p5 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(32, 1));
  call create_sub_list($p5);
  $p6 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1));
  call list_add_tail($p6, $p0);
  return;
$bb2:
  assume !(($i3 == 1));
  call abort();
  assume false;
}
const create_top: ref;
axiom (create_top == $sub.ref(0, 13416));
procedure  create_top($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
$bb0:
  goto $bb1;
$bb1:
  call insert_top($p0);
  goto $bb2;
$bb2:
  call $i1 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
  $i2 := $ne.i32($i1, 0);
  assume {:branchcond $i2} true;
  goto $bb3, $bb4;
$bb3:
  assume ($i2 == 1);
  goto $bb1;
$bb4:
  assume !(($i2 == 1));
  return;
}
const main: ref;
axiom (main == $sub.ref(0, 14448));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
$bb0:
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  call $p0 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p1, $p0);
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.0 := $store.ref($M.0, $p2, $p0);
  call create_top($p0);
  call destroy_top($p0);
  $r := 0;
  return;
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 15480));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 16512));
procedure  __SMACK_static_init()
{
$bb0:
  return;
}
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
