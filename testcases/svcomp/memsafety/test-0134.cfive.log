SMACK program verifier version 2.6.3
WARNING: inttoptr @ addr 0xc50388 is (unsoundly) assumed to point to a fresh memory region.
 WARNING: inttoptr @ addr 0xc50388 is (unsoundly) assumed to point to a fresh memory region.
 WARNING: inttoptr @ addr 0xc56fa8 is (unsoundly) assumed to point to a fresh memory region.
 WARNING: inttoptr @ addr 0xc50388 is (unsoundly) assumed to point to a fresh memory region.
 WARNING: inttoptr @ addr 0xc56fa8 is (unsoundly) assumed to point to a fresh memory region.
 WARNING: inttoptr @ addr 0xc50388 is (unsoundly) assumed to point to a fresh memory region.
 WARNING: inttoptr @ addr 0xc50388 is (unsoundly) assumed to point to a fresh memory region.
 WARNING: inttoptr @ addr 0xc50388 is (unsoundly) assumed to point to a fresh memory region.
 WARNING: inttoptr @ addr 0xc50388 is (unsoundly) assumed to point to a fresh memory region.
 WARNING: inttoptr @ addr 0xc50388 is (unsoundly) assumed to point to a fresh memory region.
 WARNING: inttoptr @ addr 0xc50388 is (unsoundly) assumed to point to a fresh memory region.
 [regions] for:   %6 = getelementptr inbounds %struct.list_head, %struct.list_head* %1, i32 0, i32 0, !dbg !62, !verifier.code !56
   in function: gl_sort
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %9 = getelementptr inbounds %struct.list_head, %struct.list_head* %1, i32 0, i32 1, !dbg !62, !verifier.code !56
   in function: gl_sort
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   merged region: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for: %struct.list_head** getelementptr inbounds (%struct.list_head, %struct.list_head* @gl_list, i32 0, i32 0)
   at instruction:   %5 = bitcast %struct.list_head** getelementptr inbounds (%struct.list_head, %struct.list_head* @gl_list, i32 0, i32 0) to i8*, !dbg !61
   in function: gl_seek_max
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   merged region: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %7 = getelementptr inbounds %struct.list_head, %struct.list_head* %4, i32 0, i32 0, !dbg !62, !verifier.code !57
   in function: gl_destroy
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   merged region: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for: %struct.list_head** getelementptr inbounds (%struct.list_head, %struct.list_head* @gl_list, i32 0, i32 0)
   at instruction:   %5 = bitcast %struct.list_head** getelementptr inbounds (%struct.list_head, %struct.list_head* @gl_list, i32 0, i32 0) to i8*, !dbg !61
   in function: gl_seek_max
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   merged region: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %2 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 0, !dbg !59, !verifier.code !58
   in function: list_empty
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   merged region: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for: %struct.list_head** getelementptr inbounds (%struct.list_head, %struct.list_head* @gl_list, i32 0, i32 0)
   at instruction:   %5 = bitcast %struct.list_head** getelementptr inbounds (%struct.list_head, %struct.list_head* @gl_list, i32 0, i32 0) to i8*, !dbg !61
   in function: gl_seek_max
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   merged region: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %9 = getelementptr inbounds %struct.list_head, %struct.list_head* %7, i32 0, i32 0, !dbg !66, !verifier.code !58
   in function: gl_seek_max
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   merged region: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %21 = getelementptr inbounds %struct.list_head, %struct.list_head* %.01, i32 0, i32 0, !dbg !86, !verifier.code !58
   in function: gl_seek_max
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   merged region: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %3 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 1, !dbg !60, !verifier.code !58
   in function: list_move
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   merged region: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %7 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 0, !dbg !61, !verifier.code !58
   in function: list_move
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   merged region: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %3 = getelementptr inbounds %struct.list_head, %struct.list_head* %1, i32 0, i32 0, !dbg !60, !verifier.code !58
   in function: list_add
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   merged region: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %2 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 1, !dbg !59, !verifier.code !58
   in function: list_del
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   merged region: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %6 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 0, !dbg !60, !verifier.code !58
   in function: list_del
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   merged region: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %10 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 0, !dbg !62, !verifier.code !58
   in function: list_del
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   merged region: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %13 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 1, !dbg !64, !verifier.code !58
   in function: list_del
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   merged region: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %3 = getelementptr inbounds %struct.list_head, %struct.list_head* %1, i32 0, i32 1, !dbg !60, !verifier.code !58
   in function: __list_del
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   merged region: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %6 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 0, !dbg !62, !verifier.code !58
   in function: __list_del
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   merged region: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %4 = getelementptr inbounds %struct.list_head, %struct.list_head* %2, i32 0, i32 1, !dbg !61, !verifier.code !58
   in function: __list_add
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   merged region: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %7 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 0, !dbg !63, !verifier.code !58
   in function: __list_add
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   merged region: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %10 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 1, !dbg !65, !verifier.code !58
   in function: __list_add
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   merged region: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %13 = getelementptr inbounds %struct.list_head, %struct.list_head* %1, i32 0, i32 0, !dbg !67, !verifier.code !58
   in function: __list_add
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   merged region: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %5 = getelementptr inbounds %struct.node, %struct.node* %4, i32 0, i32 0, !dbg !61, !verifier.code !58
   in function: val_from_node
 [regions]   using region: <Node:i32>[0,4]{LA}
    found overlap at index 0: <Node:%struct.list_head*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %7 = getelementptr inbounds %struct.node, %struct.node* %3, i32 0, i32 0, !dbg !65, !verifier.code !58
   in function: gl_insert
 [regions]   using region: <Node:i32>[0,4]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for: %struct.list_head** getelementptr inbounds (%struct.list_head, %struct.list_head* @gl_list, i32 0, i32 0)
   at instruction:   %5 = bitcast %struct.list_head** getelementptr inbounds (%struct.list_head, %struct.list_head* @gl_list, i32 0, i32 0) to i8*, !dbg !61
   in function: gl_seek_max
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for: %struct.list_head** getelementptr inbounds (%struct.list_head, %struct.list_head* @gl_list, i32 0, i32 1)
   at instruction:   store %struct.list_head* @gl_list, %struct.list_head** getelementptr inbounds (%struct.list_head, %struct.list_head* @gl_list, i32 0, i32 1)
   in function: __SMACK_static_init
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 We are now translating the program to boogie...
 Analyzing globals...
 -------INSERT: Global Variables gl_list
 -------INSERT: Global Variables .str.31
 Analyzing functions...
 Analyzing function: main
 -------INSERT: Global Variables main
 Analyzing function body: main
 Generating body for main
 
 Finished analyzing function: main
 
 Analyzing function: gl_read
 -------INSERT: Global Variables gl_read
 Analyzing function body: gl_read
 Generating body for gl_read
 
 Finished analyzing function: gl_read
 
 Analyzing function: gl_sort
 -------INSERT: Global Variables gl_sort
 Analyzing function body: gl_sort
 Generating body for gl_sort
 [regions] for:   %6 = getelementptr inbounds %struct.list_head, %struct.list_head* %1, i32 0, i32 0, !dbg !62, !verifier.code !56
   in function: gl_sort
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %6 = getelementptr inbounds %struct.list_head, %struct.list_head* %1, i32 0, i32 0, !dbg !62, !verifier.code !56
   in function: gl_sort
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %9 = getelementptr inbounds %struct.list_head, %struct.list_head* %1, i32 0, i32 1, !dbg !62, !verifier.code !56
   in function: gl_sort
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %9 = getelementptr inbounds %struct.list_head, %struct.list_head* %1, i32 0, i32 1, !dbg !62, !verifier.code !56
   in function: gl_sort
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 
 Finished analyzing function: gl_sort
 
 Analyzing function: gl_destroy
 -------INSERT: Global Variables gl_destroy
 Analyzing function body: gl_destroy
 Generating body for gl_destroy
 [regions] for: %struct.list_head** getelementptr inbounds (%struct.list_head, %struct.list_head* @gl_list, i32 0, i32 0)
   at instruction:   %5 = bitcast %struct.list_head** getelementptr inbounds (%struct.list_head, %struct.list_head* @gl_list, i32 0, i32 0) to i8*, !dbg !61
   in function: gl_seek_max
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %7 = getelementptr inbounds %struct.list_head, %struct.list_head* %4, i32 0, i32 0, !dbg !62, !verifier.code !57
   in function: gl_destroy
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for: %struct.list_head** getelementptr inbounds (%struct.list_head, %struct.list_head* @gl_list, i32 0, i32 0)
   at instruction:   %5 = bitcast %struct.list_head** getelementptr inbounds (%struct.list_head, %struct.list_head* @gl_list, i32 0, i32 0) to i8*, !dbg !61
   in function: gl_seek_max
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for: %struct.list_head** getelementptr inbounds (%struct.list_head, %struct.list_head* @gl_list, i32 0, i32 0)
   at instruction:   %5 = bitcast %struct.list_head** getelementptr inbounds (%struct.list_head, %struct.list_head* @gl_list, i32 0, i32 0) to i8*, !dbg !61
   in function: gl_seek_max
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 
 Finished analyzing function: gl_destroy
 
 Analyzing function: llvm.dbg.declare
 -------INSERT: Global Variables llvm.dbg.declare
 Analyzing function: free_
 -------INSERT: Global Variables free_
 Analyzing function: list_empty
 -------INSERT: Global Variables list_empty
 Analyzing function body: list_empty
 Generating body for list_empty
 [regions] for:   %2 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 0, !dbg !59, !verifier.code !58
   in function: list_empty
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 
 Finished analyzing function: list_empty
 
 Analyzing function: gl_seek_max
 -------INSERT: Global Variables gl_seek_max
 Analyzing function body: gl_seek_max
 Generating body for gl_seek_max
 [regions] for: %struct.list_head** getelementptr inbounds (%struct.list_head, %struct.list_head* @gl_list, i32 0, i32 0)
   at instruction:   %5 = bitcast %struct.list_head** getelementptr inbounds (%struct.list_head, %struct.list_head* @gl_list, i32 0, i32 0) to i8*, !dbg !61
   in function: gl_seek_max
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %9 = getelementptr inbounds %struct.list_head, %struct.list_head* %7, i32 0, i32 0, !dbg !66, !verifier.code !58
   in function: gl_seek_max
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %21 = getelementptr inbounds %struct.list_head, %struct.list_head* %.01, i32 0, i32 0, !dbg !86, !verifier.code !58
   in function: gl_seek_max
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 
 Finished analyzing function: gl_seek_max
 
 Analyzing function: list_move
 -------INSERT: Global Variables list_move
 Analyzing function body: list_move
 Generating body for list_move
 [regions] for:   %3 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 1, !dbg !60, !verifier.code !58
   in function: list_move
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %7 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 0, !dbg !61, !verifier.code !58
   in function: list_move
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 
 Finished analyzing function: list_move
 
 Analyzing function: list_add
 -------INSERT: Global Variables list_add
 Analyzing function body: list_add
 Generating body for list_add
 [regions] for:   %3 = getelementptr inbounds %struct.list_head, %struct.list_head* %1, i32 0, i32 0, !dbg !60, !verifier.code !58
   in function: list_add
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 
 Finished analyzing function: list_add
 
 Analyzing function: list_del
 -------INSERT: Global Variables list_del
 Analyzing function body: list_del
 Generating body for list_del
 [regions] for:   %2 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 1, !dbg !59, !verifier.code !58
   in function: list_del
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %6 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 0, !dbg !60, !verifier.code !58
   in function: list_del
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %10 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 0, !dbg !62, !verifier.code !58
   in function: list_del
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %10 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 0, !dbg !62, !verifier.code !58
   in function: list_del
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %13 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 1, !dbg !64, !verifier.code !58
   in function: list_del
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %13 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 1, !dbg !64, !verifier.code !58
   in function: list_del
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 
 Finished analyzing function: list_del
 
 Analyzing function: __list_del
 -------INSERT: Global Variables __list_del
 Analyzing function body: __list_del
 Generating body for __list_del
 [regions] for:   %3 = getelementptr inbounds %struct.list_head, %struct.list_head* %1, i32 0, i32 1, !dbg !60, !verifier.code !58
   in function: __list_del
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %3 = getelementptr inbounds %struct.list_head, %struct.list_head* %1, i32 0, i32 1, !dbg !60, !verifier.code !58
   in function: __list_del
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %6 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 0, !dbg !62, !verifier.code !58
   in function: __list_del
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %6 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 0, !dbg !62, !verifier.code !58
   in function: __list_del
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 
 Finished analyzing function: __list_del
 
 Analyzing function: __list_add
 -------INSERT: Global Variables __list_add
 Analyzing function body: __list_add
 Generating body for __list_add
 [regions] for:   %4 = getelementptr inbounds %struct.list_head, %struct.list_head* %2, i32 0, i32 1, !dbg !61, !verifier.code !58
   in function: __list_add
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %4 = getelementptr inbounds %struct.list_head, %struct.list_head* %2, i32 0, i32 1, !dbg !61, !verifier.code !58
   in function: __list_add
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %7 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 0, !dbg !63, !verifier.code !58
   in function: __list_add
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %7 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 0, !dbg !63, !verifier.code !58
   in function: __list_add
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %10 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 1, !dbg !65, !verifier.code !58
   in function: __list_add
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %10 = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 1, !dbg !65, !verifier.code !58
   in function: __list_add
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %13 = getelementptr inbounds %struct.list_head, %struct.list_head* %1, i32 0, i32 0, !dbg !67, !verifier.code !58
   in function: __list_add
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %13 = getelementptr inbounds %struct.list_head, %struct.list_head* %1, i32 0, i32 0, !dbg !67, !verifier.code !58
   in function: __list_add
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 
 Finished analyzing function: __list_add
 
 Analyzing function: val_from_node
 -------INSERT: Global Variables val_from_node
 Analyzing function body: val_from_node
 Generating body for val_from_node
 [regions] for:   %5 = getelementptr inbounds %struct.node, %struct.node* %4, i32 0, i32 0, !dbg !61, !verifier.code !58
   in function: val_from_node
 [regions]   using region: <Node:i32>[0,4]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 
 Finished analyzing function: val_from_node
 
 Analyzing function: gl_insert
 -------INSERT: Global Variables gl_insert
 Analyzing function body: gl_insert
 Generating body for gl_insert
 [regions] for:   %7 = getelementptr inbounds %struct.node, %struct.node* %3, i32 0, i32 0, !dbg !65, !verifier.code !58
   in function: gl_insert
 [regions]   using region: <Node:i32>[0,4]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %7 = getelementptr inbounds %struct.node, %struct.node* %3, i32 0, i32 0, !dbg !65, !verifier.code !58
   in function: gl_insert
 [regions]   using region: <Node:i32>[0,4]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 
 Finished analyzing function: gl_insert
 
 Analyzing function: malloc
 -------INSERT: Global Variables malloc
 Analyzing function: __SMACK_code
 -------INSERT: Global Variables __SMACK_code
 Analyzing function: __VERIFIER_assume
 -------INSERT: Global Variables __VERIFIER_assume
 Analyzing function body: __VERIFIER_assume
 Generating body for __VERIFIER_assume
 
 Finished analyzing function: __VERIFIER_assume
 
 Analyzing function: __SMACK_dummy
 -------INSERT: Global Variables __SMACK_dummy
 Analyzing function body: __SMACK_dummy
 Generating body for __SMACK_dummy
 
 Finished analyzing function: __SMACK_dummy
 
 Analyzing function: __SMACK_and32
 -------INSERT: Global Variables __SMACK_and32
 Analyzing function body: __SMACK_and32
 Generating body for __SMACK_and32
 
 Finished analyzing function: __SMACK_and32
 
 Analyzing function: __SMACK_and64
 -------INSERT: Global Variables __SMACK_and64
 Analyzing function body: __SMACK_and64
 Generating body for __SMACK_and64
 
 Finished analyzing function: __SMACK_and64
 
 Analyzing function: __SMACK_and16
 -------INSERT: Global Variables __SMACK_and16
 Analyzing function body: __SMACK_and16
 Generating body for __SMACK_and16
 
 Finished analyzing function: __SMACK_and16
 
 Analyzing function: __SMACK_and8
 -------INSERT: Global Variables __SMACK_and8
 Analyzing function body: __SMACK_and8
 Generating body for __SMACK_and8
 
 Finished analyzing function: __SMACK_and8
 
 Analyzing function: __SMACK_or32
 -------INSERT: Global Variables __SMACK_or32
 Analyzing function body: __SMACK_or32
 Generating body for __SMACK_or32
 
 Finished analyzing function: __SMACK_or32
 
 Analyzing function: __SMACK_or64
 -------INSERT: Global Variables __SMACK_or64
 Analyzing function body: __SMACK_or64
 Generating body for __SMACK_or64
 
 Finished analyzing function: __SMACK_or64
 
 Analyzing function: __SMACK_or16
 -------INSERT: Global Variables __SMACK_or16
 Analyzing function body: __SMACK_or16
 Generating body for __SMACK_or16
 
 Finished analyzing function: __SMACK_or16
 
 Analyzing function: __SMACK_or8
 -------INSERT: Global Variables __SMACK_or8
 Analyzing function body: __SMACK_or8
 Generating body for __SMACK_or8
 
 Finished analyzing function: __SMACK_or8
 
 Analyzing function: __SMACK_check_overflow
 -------INSERT: Global Variables __SMACK_check_overflow
 Analyzing function body: __SMACK_check_overflow
 Generating body for __SMACK_check_overflow
 
 Finished analyzing function: __SMACK_check_overflow
 
 Analyzing function: __VERIFIER_nondet_int
 -------INSERT: Global Variables __VERIFIER_nondet_int
 Analyzing function body: __VERIFIER_nondet_int
 Generating body for __VERIFIER_nondet_int
 
 Finished analyzing function: __VERIFIER_nondet_int
 
 Analyzing function: __SMACK_nondet_int
 -------INSERT: Global Variables __SMACK_nondet_int
 Analyzing function: __SMACK_decls
 -------INSERT: Global Variables __SMACK_decls
 Analyzing function body: __SMACK_decls
 Generating body for __SMACK_decls
 
 Finished analyzing function: __SMACK_decls
 
 Analyzing function: __SMACK_top_decl
 -------INSERT: Global Variables __SMACK_top_decl
 Analyzing function: __SMACK_check_memory_safety
 -------INSERT: Global Variables __SMACK_check_memory_safety
 Analyzing function: __SMACK_check_memory_leak
 -------INSERT: Global Variables __SMACK_check_memory_leak
 Analyzing function body: __SMACK_check_memory_leak
 Generating body for __SMACK_check_memory_leak
 
 Finished analyzing function: __SMACK_check_memory_leak
 
 Analyzing function: __SMACK_init_func_memory_model
 -------INSERT: Global Variables __SMACK_init_func_memory_model
 Analyzing function body: __SMACK_init_func_memory_model
 Generating body for __SMACK_init_func_memory_model
 
 Finished analyzing function: __SMACK_init_func_memory_model
 
 Analyzing function: __SMACK_my_memory_check
 -------INSERT: Global Variables __SMACK_my_memory_check
 Analyzing function body: __SMACK_my_memory_check
 Generating body for __SMACK_my_memory_check
 
 Finished analyzing function: __SMACK_my_memory_check
 
 Analyzing function: __SMACK_decl
 -------INSERT: Global Variables __SMACK_decl
 Analyzing function: __SMACK_whatIsThis
 -------INSERT: Global Variables __SMACK_whatIsThis
 Analyzing function body: __SMACK_whatIsThis
 Generating body for __SMACK_whatIsThis
 
 Finished analyzing function: __SMACK_whatIsThis
 
 Analyzing function: __WHAT_code
 -------INSERT: Global Variables __WHAT_code
 Analyzing function: abort
 -------INSERT: Global Variables abort
 Analyzing function body: abort
 Generating body for abort
 
 Finished analyzing function: abort
 
 Analyzing function: llvm.dbg.value
 -------INSERT: Global Variables llvm.dbg.value
 Analyzing function: __SMACK_static_init
 -------INSERT: Global Variables __SMACK_static_init
 Analyzing function body: __SMACK_static_init
 Generating body for __SMACK_static_init
 [regions] for: %struct.list_head** getelementptr inbounds (%struct.list_head, %struct.list_head* @gl_list, i32 0, i32 0)
   at instruction:   %5 = bitcast %struct.list_head** getelementptr inbounds (%struct.list_head, %struct.list_head* @gl_list, i32 0, i32 0) to i8*, !dbg !61
   in function: gl_seek_max
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for: %struct.list_head** getelementptr inbounds (%struct.list_head, %struct.list_head* @gl_list, i32 0, i32 0)
   at instruction:   %5 = bitcast %struct.list_head** getelementptr inbounds (%struct.list_head, %struct.list_head* @gl_list, i32 0, i32 0) to i8*, !dbg !61
   in function: gl_seek_max
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for: %struct.list_head** getelementptr inbounds (%struct.list_head, %struct.list_head* @gl_list, i32 0, i32 1)
   at instruction:   store %struct.list_head* @gl_list, %struct.list_head** getelementptr inbounds (%struct.list_head, %struct.list_head* @gl_list, i32 0, i32 1)
   in function: __SMACK_static_init
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for: %struct.list_head** getelementptr inbounds (%struct.list_head, %struct.list_head* @gl_list, i32 0, i32 1)
   at instruction:   store %struct.list_head* @gl_list, %struct.list_head** getelementptr inbounds (%struct.list_head, %struct.list_head* @gl_list, i32 0, i32 1)
   in function: __SMACK_static_init
 [regions]   using region: <Node:%struct.list_head*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 
 Finished analyzing function: __SMACK_static_init
 
 Start Analyzing Prelude: main
 
 Start Analyzing Prelude: gl_read
 
 Start Analyzing Prelude: gl_sort
 
 Start Analyzing Prelude: gl_destroy
 
 Start Analyzing Prelude: llvm.dbg.declare
 
 Start Analyzing Prelude: free_
 
 Start Analyzing Prelude: list_empty
 
 Start Analyzing Prelude: gl_seek_max
 
 Start Analyzing Prelude: list_move
 
 Start Analyzing Prelude: list_add
 
 Start Analyzing Prelude: list_del
 
 Start Analyzing Prelude: __list_del
 
 Start Analyzing Prelude: __list_add
 
 Start Analyzing Prelude: val_from_node
 
 Start Analyzing Prelude: gl_insert
 
 Start Analyzing Prelude: malloc
 
 Start Analyzing Prelude: __SMACK_code.ref
 
 Start Analyzing Prelude: __SMACK_code.ref.i32
 
 Start Analyzing Prelude: __VERIFIER_assume
 
 Start Analyzing Prelude: __SMACK_dummy
 
 Start Analyzing Prelude: __SMACK_and32
 
 Start Analyzing Prelude: __SMACK_and64
 
 Start Analyzing Prelude: __SMACK_and16
 
 Start Analyzing Prelude: __SMACK_and8
 
 Start Analyzing Prelude: __SMACK_or32
 
 Start Analyzing Prelude: __SMACK_or64
 
 Start Analyzing Prelude: __SMACK_or16
 
 Start Analyzing Prelude: __SMACK_or8
 
 Start Analyzing Prelude: __SMACK_check_overflow
 
 Start Analyzing Prelude: __VERIFIER_nondet_int
 
 Start Analyzing Prelude: __SMACK_nondet_int
 
 Start Analyzing Prelude: __SMACK_top_decl.ref
 
 Start Analyzing Prelude: __SMACK_check_memory_safety
 
 Start Analyzing Prelude: __SMACK_check_memory_leak
 
 Start Analyzing Prelude: __SMACK_init_func_memory_model
 
 Start Analyzing Prelude: __SMACK_my_memory_check
 
 Start Analyzing Prelude: __SMACK_decl.ref
 
 Start Analyzing Prelude: __SMACK_whatIsThis
 
 Start Analyzing Prelude: __WHAT_code.ref
 
 Start Analyzing Prelude: abort
 
 Start Analyzing Prelude: llvm.dbg.value
 
 Start Analyzing Prelude: __SMACK_static_init
 
 Start Analyzing Prelude: boogie_si_record_i16
 
 Start Analyzing Prelude: boogie_si_record_i32
 
 Start Analyzing Prelude: boogie_si_record_i64
 
 Start Analyzing Prelude: boogie_si_record_i8
 
 Start Analyzing Prelude: boogie_si_record_ref
 
 Start Analyzing Prelude: $initialize
 
 SMACK found no errors with unroll bound 3.
