// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/smack ../testcases/svcomp/memsafety/test-0137.i -ll ../testcases/svcomp/memsafety/test-0137_IR.ll --bpl ../testcases/svcomp/memsafety/test-0137.bpl -t --sh-mem-leak --add-line-info

const {:global_variable} {:pointer_to_size 128} gl_list: ref;
axiom (gl_list == $sub.ref(0, 1040));
const {:global_variable} {:pointer_to_size 16} .str: ref;
axiom (.str == $sub.ref(0, 2066));
const {:global_variable} {:pointer_to_size 96} {:count 12} .str.1: ref;
axiom (.str.1 == $sub.ref(0, 3102));
const {:global_variable} {:pointer_to_size 152} {:count 19} __PRETTY_FUNCTION__.reach_error: ref;
axiom (__PRETTY_FUNCTION__.reach_error == $sub.ref(0, 4145));
const reach_error: ref;
axiom (reach_error == $sub.ref(0, 5177));
procedure  reach_error()
{
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 12, 83} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 12, 83} true;
  call __assert_fail(.str, .str.1, 3, __PRETTY_FUNCTION__.reach_error);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 12, 83} true;
  assume false;
}
const __assert_fail: ref;
axiom (__assert_fail == $sub.ref(0, 6209));
procedure  __assert_fail($p0: ref, $p1: ref, $i2: i32, $p3: ref);
const main: ref;
axiom (main == $sub.ref(0, 7241));
procedure {:entrypoint} main()
  returns ($r: i32)
{
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 625, 5} true;
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 625, 5} true;
  call gl_read();
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 626, 5} true;
  call gl_sort();
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 627, 5} true;
  call gl_destroy();
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 628, 5} true;
  $r := 0;
  return;
}
const gl_read: ref;
axiom (gl_read == $sub.ref(0, 8273));
procedure  gl_read()
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i1;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 575, 5} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 575, 5} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 576, 19} true;
  call $i0 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 576, 9} true;
  call gl_insert($i0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 577, 5} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 578, 12} true;
  call $i1 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 577, 5} true;
  $i2 := $ne.i32($i1, 0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 577, 5} true;
  assume {:branchcond $i2} true;
  goto $bb3, $bb4;
$bb3:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 577, 5} true;
  assume ($i2 == 1);
  goto $bb1;
$bb4:
  assume !(($i2 == 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 579, 1} true;
  return;
}
const gl_sort: ref;
axiom (gl_sort == $sub.ref(0, 9305));
procedure  gl_sort()
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref8;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 613, 9} true;
  call $p0 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 613, 9} true;
  call $i1 := list_empty(gl_list);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 613, 9} true;
  $i2 := $ne.i32($i1, 0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 613, 9} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 614, 9} true;
  goto $bb3;
$bb2:
  assume !(($i2 == 1));
  assume true;
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 615, 28} true;
  $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 615, 28} true;
  $M.0 := $store.ref($M.0, $p3, $p0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 615, 28} true;
  $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 615, 28} true;
  $M.0 := $store.ref($M.0, $p4, $p0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 617, 23} true;
  call $p5 := gl_seek_max();
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 617, 5} true;
  $i6 := $ne.ref($p5, $0.ref);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 617, 5} true;
  assume {:branchcond $i6} true;
  goto $bb4, $bb5;
$bb3:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 622, 1} true;
  return;
$bb4:
  assume ($i6 == 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 617, 5} true;
  $p7 := $p5;
  goto $bb7;
$bb5:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 617, 5} true;
  assume !(($i6 == 1));
  goto $bb6;
$bb6:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 619, 9} true;
  $p10 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 619, 9} true;
  $p11 := $load.ref($M.0, $p10);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 619, 15} true;
  $p12 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 619, 20} true;
  $M.0 := $store.ref($M.0, $p12, gl_list);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 620, 9} true;
  $p13 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 620, 9} true;
  $p14 := $load.ref($M.0, $p13);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 620, 15} true;
  $p15 := $add.ref($add.ref($p14, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 620, 20} true;
  $M.0 := $store.ref($M.0, $p15, gl_list);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 621, 15} true;
  $p16 := $bitcast.ref.ref($p0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 621, 15} true;
  call $M.0 := $memcpy.i8($M.0, $M.0, gl_list, $p16, 16, false);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 622, 1} true;
  goto $bb3;
$bb7:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 618, 9} true;
  call list_move($p7, $p0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 617, 23} true;
  call $p8 := gl_seek_max();
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 617, 5} true;
  $i9 := $ne.ref($p8, $0.ref);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 617, 5} true;
  assume {:branchcond $i9} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i9 == 1);
  $p7 := $p8;
  goto $bb7;
$bb9:
  assume !(($i9 == 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 617, 5} true;
  goto $bb6;
}
const gl_destroy: ref;
axiom (gl_destroy == $sub.ref(0, 10337));
procedure  gl_destroy()
{
  var $p0: ref;
  var $i1: i1;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref8;
  var $p6: ref8;
  var $p7: ref;
  var $p8: ref8;
  var $p9: ref;
  var $i10: i1;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 583, 40} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 583, 40} true;
  $p0 := $load.ref($M.0, gl_list);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 583, 21} true;
  $i1 := $ne.ref(gl_list, $p0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 583, 5} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 583, 5} true;
  $p2 := $p0;
  goto $bb4;
$bb2:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 583, 5} true;
  assume !(($i1 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 587, 1} true;
  return;
$bb4:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 584, 30} true;
  $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 584, 30} true;
  $p4 := $load.ref($M.0, $p3);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 584, 22} true;
  $M.0 := $store.ref($M.0, gl_list, $p4);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 585, 31} true;
  $p5 := $bitcast.ref.ref($p2);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 585, 45} true;
  $p6 := $add.ref($p5, $mul.ref($sub.i64(0, $p2i.ref.i64($add.ref($add.ref($0.ref, $mul.ref(0, 24)), $mul.ref(8, 1)))), 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 585, 15} true;
  $p7 := $bitcast.ref.ref($p6);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 585, 14} true;
  $p8 := $bitcast.ref.ref($p7);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 585, 9} true;
  call free_($p8);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 583, 40} true;
  $p9 := $load.ref($M.0, gl_list);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 583, 21} true;
  $i10 := $ne.ref(gl_list, $p9);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 583, 5} true;
  assume {:branchcond $i10} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i10 == 1);
  $p2 := $p9;
  goto $bb4;
$bb6:
  assume !(($i10 == 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 583, 5} true;
  goto $bb3;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 11369));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const free_: ref;
axiom (free_ == $sub.ref(0, 12401));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const list_empty: ref;
axiom (list_empty == $sub.ref(0, 13433));
procedure  list_empty($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i32;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 529, 15} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 529, 15} true;
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 529, 15} true;
  $p2 := $load.ref($M.0, $p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 529, 20} true;
  $i3 := $eq.ref($p2, $p0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 529, 20} true;
  $i4 := $zext.i1.i32($i3);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 529, 2} true;
  $r := $i4;
  return;
}
const gl_seek_max: ref;
axiom (gl_seek_max == $sub.ref(0, 14465));
procedure  gl_seek_max()
  returns ($r: ref)
{
  var $i0: i32;
  var $i1: i1;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $p20: ref;
  var $p8: ref;
  var $p2: ref;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 596, 9} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 596, 9} true;
  call $i0 := list_empty(gl_list);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 596, 9} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 596, 9} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 597, 9} true;
  $p2 := $0.ref;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 599, 27} true;
  $p3 := $load.ref($M.0, gl_list);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 600, 15} true;
  call $i4 := val_from_node($p3);
  call {:cexpr "max"} boogie_si_record_i32($i4);
  goto $bb4;
$bb3:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 0, 0} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 610, 1} true;
  $r := $p2;
  return;
$bb4:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 602, 27} true;
  $p5 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 602, 27} true;
  $p6 := $load.ref($M.0, $p5);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 602, 37} true;
  $i7 := $ne.ref($p6, $p3);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 602, 5} true;
  $p8 := $p3;
  assume {:branchcond $i7} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i7 == 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 602, 5} true;
  $p9, $p10, $i11 := $p6, $p3, $i4;
  goto $bb8;
$bb6:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 602, 5} true;
  assume !(($i7 == 1));
  goto $bb7;
$bb7:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 599, 17} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 609, 5} true;
  $p2 := $p8;
  goto $bb3;
$bb8:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 603, 27} true;
  call $i12 := val_from_node($p9);
  call {:cexpr "value"} boogie_si_record_i32($i12);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 604, 19} true;
  $i13 := $slt.i32($i12, $i11);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 604, 13} true;
  assume {:branchcond $i13} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i13 == 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 605, 13} true;
  $p14, $i15, $p16 := $p9, $i11, $p10;
  goto $bb11;
$bb10:
  assume !(($i13 == 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 608, 5} true;
  $p14, $i15, $p16 := $p9, $i12, $p9;
  goto $bb11;
$bb11:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 0, 0} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 0, 0} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 602, 62} true;
  $p17 := $add.ref($add.ref($p14, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 602, 62} true;
  $p18 := $load.ref($M.0, $p17);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 602, 37} true;
  $i19 := $ne.ref($p18, $p16);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 602, 5} true;
  $p20 := $p16;
  assume {:branchcond $i19} true;
  goto $bb12, $bb13;
$bb12:
  assume ($i19 == 1);
  $p9, $p10, $i11 := $p18, $p16, $i15;
  goto $bb8;
$bb13:
  assume !(($i19 == 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 602, 5} true;
  $p8 := $p20;
  goto $bb7;
}
const list_move: ref;
axiom (list_move == $sub.ref(0, 15497));
procedure  list_move($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 557, 26} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 557, 26} true;
  $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 557, 26} true;
  $p3 := $load.ref($M.0, $p2);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 557, 38} true;
  $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 557, 38} true;
  $p5 := $load.ref($M.0, $p4);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 557, 9} true;
  call __list_del($p3, $p5);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 558, 9} true;
  call list_add($p0, $p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 559, 1} true;
  return;
}
const llvm.memcpy.p0i8.p0i8.i64: ref;
axiom (llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 16529));
procedure  llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i1);
const __list_del: ref;
axiom (__list_del == $sub.ref(0, 17561));
procedure  __list_del($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 542, 8} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 542, 8} true;
  $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 542, 13} true;
  $M.0 := $store.ref($M.0, $p2, $p0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 543, 8} true;
  $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 543, 13} true;
  $M.0 := $store.ref($M.0, $p3, $p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 544, 1} true;
  return;
}
const list_add: ref;
axiom (list_add == $sub.ref(0, 18593));
procedure  list_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 547, 30} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 547, 30} true;
  $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 547, 30} true;
  $p3 := $load.ref($M.0, $p2);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 547, 2} true;
  call __list_add($p0, $p1, $p3);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 548, 1} true;
  return;
}
const __list_add: ref;
axiom (__list_add == $sub.ref(0, 19625));
procedure  __list_add($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 535, 8} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 535, 8} true;
  $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 535, 13} true;
  $M.0 := $store.ref($M.0, $p3, $p0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 536, 7} true;
  $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 536, 12} true;
  $M.0 := $store.ref($M.0, $p4, $p2);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 537, 7} true;
  $p5 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 537, 12} true;
  $M.0 := $store.ref($M.0, $p5, $p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 538, 8} true;
  $p6 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 538, 13} true;
  $M.0 := $store.ref($M.0, $p6, $p0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 539, 1} true;
  return;
}
const val_from_node: ref;
axiom (val_from_node == $sub.ref(0, 20657));
procedure  val_from_node($p0: ref)
  returns ($r: i32)
{
  var $p1: ref8;
  var $p2: ref8;
  var $p3: ref;
  var $p4: ref32;
  var $i5: i32;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 589, 43} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 589, 43} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 589, 57} true;
  $p2 := $add.ref($p1, $mul.ref($sub.i64(0, $p2i.ref.i64($add.ref($add.ref($0.ref, $mul.ref(0, 24)), $mul.ref(8, 1)))), 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 589, 27} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 590, 19} true;
  $p4 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 590, 19} true;
  $i5 := $load.i32($M.0, $p4);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 590, 5} true;
  $r := $i5;
  return;
}
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0, 21689));
procedure  __VERIFIER_nondet_int()
  returns ($r: i32);
const gl_insert: ref;
axiom (gl_insert == $sub.ref(0, 22721));
procedure  gl_insert($i0: i32)
{
  var $p1: ref8;
  var $p2: ref;
  var $i3: i1;
  var $p4: ref32;
  var $p5: ref;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 567, 25} true;
  call {:cexpr "gl_insert:arg:value"} boogie_si_record_i32($i0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 567, 25} true;
  call $p1 := malloc(24);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 567, 25} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 568, 10} true;
  $i3 := $ne.ref($p2, $0.ref);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 568, 9} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 570, 11} true;
  $p4 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 570, 17} true;
  $M.0 := $store.i32($M.0, $p4, $i0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 571, 21} true;
  $p5 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 571, 5} true;
  call list_add($p5, gl_list);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 572, 1} true;
  return;
$bb2:
  assume !(($i3 == 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 569, 9} true;
  call abort();
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0137.i", 569, 9} true;
  assume false;
}
const malloc: ref;
axiom (malloc == $sub.ref(0, 23753));
procedure  malloc($i0: i32)
  returns ($r: ref)
{
  call $r := $malloc($zext.i32.i64($i0));
}
const abort: ref;
axiom (abort == $sub.ref(0, 24785));
procedure  abort();
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 25817));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 26849));
procedure  __SMACK_static_init()
{
$bb0:
  $M.0 := $store.ref($M.0, gl_list, gl_list);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(gl_list, $mul.ref(0, 16)), $mul.ref(8, 1)), gl_list);
  return;
}
procedure  $memcpy.i8(M.dst: [ref] i8, M.src: [ref] i8, dst: ref, src: ref, len: ref, isvolatile: bool) returns (M.ret: [ref] i8)
{
  assume (forall x: ref :: $sle.ref.bool(dst,x) && $slt.ref.bool(x,$add.ref(dst,len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src,dst),x)]);
  assume (forall x: ref :: $slt.ref.bool(x,dst) ==> M.ret[x] == M.dst[x]);
  assume (forall x: ref :: $sle.ref.bool($add.ref(dst,len),x) ==> M.ret[x] == M.dst[x]);
}

procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
