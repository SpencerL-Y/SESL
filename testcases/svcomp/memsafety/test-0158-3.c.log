SMACK program verifier version 2.6.3
WARNING: inttoptr @ addr 0x1370498 is (unsoundly) assumed to point to a fresh memory region.
 WARNING: inttoptr @ addr 0x136ca08 is (unsoundly) assumed to point to a fresh memory region.
 [regions] for:   %3 = bitcast %union.anon* %1 to i8**, !dbg !58, !verifier.code !41
   in function: main
 [regions]   using region: <Node:i8*>[0,8]{A}
 [regions]   returning index: 0
 
 [regions] for:   %8 = getelementptr inbounds %struct.anon, %struct.anon* %7, i32 0, i32 2, !dbg !62, !verifier.code !41
   in function: main
 [regions]   using region: <Node:i8*>[16,24]{A}
 [regions]   returning index: 1
 
 [regions] for:   %11 = bitcast %union.anon* %1 to i8**, !dbg !64, !verifier.code !41
   in function: main
 [regions]   using region: <Node:i8*>[0,8]{A}
    found overlap at index 0: <Node:i8*>[0,8]{A}
 [regions]   merged region: <Node:i8*>[0,8]{A}
 [regions]   returning index: 0
 
 [regions] for:   %17 = getelementptr inbounds %struct.anon, %struct.anon* %15, i32 0, i32 0, i64 1
   in function: main
 [regions]   using region: <Node:i8>[1,2]{A}
    found overlap at index 0: <Node:i8*>[0,8]{A}
 [regions]   merged region: <Node:*>[0,8]{A}
 [regions]   returning index: 0
 
 [regions] for:   %20 = bitcast %union.anon* %1 to i8**, !dbg !70, !verifier.code !41
   in function: main
 [regions]   using region: <Node:i8*>[0,8]{A}
    found overlap at index 0: <Node:*>[0,8]{A}
 [regions]   merged region: <Node:*>[0,8]{A}
 [regions]   returning index: 0
 
 We are now translating the program to boogie...
 Analyzing globals...
 -------INSERT: Global Variables .str.31
 Analyzing functions...
 Analyzing function: main
 -------INSERT: Global Variables main
 Analyzing function body: main
 Generating body for main
 [regions] for:   %3 = bitcast %union.anon* %1 to i8**, !dbg !58, !verifier.code !41
   in function: main
 [regions]   using region: <Node:i8*>[0,8]{A}
    found overlap at index 0: <Node:*>[0,8]{A}
 [regions]   merged region: <Node:*>[0,8]{A}
 [regions]   returning index: 0
 
 [regions] for:   %3 = bitcast %union.anon* %1 to i8**, !dbg !58, !verifier.code !41
   in function: main
 [regions]   using region: <Node:i8*>[0,8]{A}
    found overlap at index 0: <Node:*>[0,8]{A}
 [regions]   merged region: <Node:*>[0,8]{A}
 [regions]   returning index: 0
 
 [regions] for:   %8 = getelementptr inbounds %struct.anon, %struct.anon* %7, i32 0, i32 2, !dbg !62, !verifier.code !41
   in function: main
 [regions]   using region: <Node:i8*>[16,24]{A}
    found overlap at index 1: <Node:i8*>[16,24]{A}
 [regions]   merged region: <Node:i8*>[16,24]{A}
 [regions]   returning index: 1
 
 [regions] for:   %8 = getelementptr inbounds %struct.anon, %struct.anon* %7, i32 0, i32 2, !dbg !62, !verifier.code !41
   in function: main
 [regions]   using region: <Node:i8*>[16,24]{A}
    found overlap at index 1: <Node:i8*>[16,24]{A}
 [regions]   merged region: <Node:i8*>[16,24]{A}
 [regions]   returning index: 1
 
 [regions] for:   %11 = bitcast %union.anon* %1 to i8**, !dbg !64, !verifier.code !41
   in function: main
 [regions]   using region: <Node:i8*>[0,8]{A}
    found overlap at index 0: <Node:*>[0,8]{A}
 [regions]   merged region: <Node:*>[0,8]{A}
 [regions]   returning index: 0
 
 [regions] for:   %17 = getelementptr inbounds %struct.anon, %struct.anon* %15, i32 0, i32 0, i64 1
   in function: main
 [regions]   using region: <Node:i8>[1,2]{A}
    found overlap at index 0: <Node:*>[0,8]{A}
 [regions]   merged region: <Node:*>[0,8]{A}
 [regions]   returning index: 0
 
 [regions] for:   %17 = getelementptr inbounds %struct.anon, %struct.anon* %15, i32 0, i32 0, i64 1
   in function: main
 [regions]   using region: <Node:i8>[1,2]{A}
    found overlap at index 0: <Node:*>[0,8]{A}
 [regions]   merged region: <Node:*>[0,8]{A}
 [regions]   returning index: 0
 
 [regions] for:   %20 = bitcast %union.anon* %1 to i8**, !dbg !70, !verifier.code !41
   in function: main
 [regions]   using region: <Node:i8*>[0,8]{A}
    found overlap at index 0: <Node:*>[0,8]{A}
 [regions]   merged region: <Node:*>[0,8]{A}
 [regions]   returning index: 0
 
 
 Finished analyzing function: main
 
 Analyzing function: llvm.dbg.declare
 -------INSERT: Global Variables llvm.dbg.declare
 Analyzing function: malloc
 -------INSERT: Global Variables malloc
 Analyzing function: free_
 -------INSERT: Global Variables free_
 Analyzing function: __SMACK_code
 -------INSERT: Global Variables __SMACK_code
 Analyzing function: __VERIFIER_assume
 -------INSERT: Global Variables __VERIFIER_assume
 Analyzing function body: __VERIFIER_assume
 Generating body for __VERIFIER_assume
 
 Finished analyzing function: __VERIFIER_assume
 
 Analyzing function: __SMACK_dummy
 -------INSERT: Global Variables __SMACK_dummy
 Analyzing function body: __SMACK_dummy
 Generating body for __SMACK_dummy
 
 Finished analyzing function: __SMACK_dummy
 
 Analyzing function: __SMACK_and32
 -------INSERT: Global Variables __SMACK_and32
 Analyzing function body: __SMACK_and32
 Generating body for __SMACK_and32
 
 Finished analyzing function: __SMACK_and32
 
 Analyzing function: __SMACK_and64
 -------INSERT: Global Variables __SMACK_and64
 Analyzing function body: __SMACK_and64
 Generating body for __SMACK_and64
 
 Finished analyzing function: __SMACK_and64
 
 Analyzing function: __SMACK_and16
 -------INSERT: Global Variables __SMACK_and16
 Analyzing function body: __SMACK_and16
 Generating body for __SMACK_and16
 
 Finished analyzing function: __SMACK_and16
 
 Analyzing function: __SMACK_and8
 -------INSERT: Global Variables __SMACK_and8
 Analyzing function body: __SMACK_and8
 Generating body for __SMACK_and8
 
 Finished analyzing function: __SMACK_and8
 
 Analyzing function: __SMACK_or32
 -------INSERT: Global Variables __SMACK_or32
 Analyzing function body: __SMACK_or32
 Generating body for __SMACK_or32
 
 Finished analyzing function: __SMACK_or32
 
 Analyzing function: __SMACK_or64
 -------INSERT: Global Variables __SMACK_or64
 Analyzing function body: __SMACK_or64
 Generating body for __SMACK_or64
 
 Finished analyzing function: __SMACK_or64
 
 Analyzing function: __SMACK_or16
 -------INSERT: Global Variables __SMACK_or16
 Analyzing function body: __SMACK_or16
 Generating body for __SMACK_or16
 
 Finished analyzing function: __SMACK_or16
 
 Analyzing function: __SMACK_or8
 -------INSERT: Global Variables __SMACK_or8
 Analyzing function body: __SMACK_or8
 Generating body for __SMACK_or8
 
 Finished analyzing function: __SMACK_or8
 
 Analyzing function: __SMACK_check_overflow
 -------INSERT: Global Variables __SMACK_check_overflow
 Analyzing function body: __SMACK_check_overflow
 Generating body for __SMACK_check_overflow
 
 Finished analyzing function: __SMACK_check_overflow
 
 Analyzing function: __SMACK_decls
 -------INSERT: Global Variables __SMACK_decls
 Analyzing function body: __SMACK_decls
 Generating body for __SMACK_decls
 
 Finished analyzing function: __SMACK_decls
 
 Analyzing function: __SMACK_top_decl
 -------INSERT: Global Variables __SMACK_top_decl
 Analyzing function: __SMACK_check_memory_safety
 -------INSERT: Global Variables __SMACK_check_memory_safety
 Analyzing function: __SMACK_check_memory_leak
 -------INSERT: Global Variables __SMACK_check_memory_leak
 Analyzing function body: __SMACK_check_memory_leak
 Generating body for __SMACK_check_memory_leak
 
 Finished analyzing function: __SMACK_check_memory_leak
 
 Analyzing function: __SMACK_init_func_memory_model
 -------INSERT: Global Variables __SMACK_init_func_memory_model
 Analyzing function body: __SMACK_init_func_memory_model
 Generating body for __SMACK_init_func_memory_model
 
 Finished analyzing function: __SMACK_init_func_memory_model
 
 Analyzing function: __SMACK_my_memory_check
 -------INSERT: Global Variables __SMACK_my_memory_check
 Analyzing function body: __SMACK_my_memory_check
 Generating body for __SMACK_my_memory_check
 
 Finished analyzing function: __SMACK_my_memory_check
 
 Analyzing function: __SMACK_decl
 -------INSERT: Global Variables __SMACK_decl
 Analyzing function: __SMACK_whatIsThis
 -------INSERT: Global Variables __SMACK_whatIsThis
 Analyzing function body: __SMACK_whatIsThis
 Generating body for __SMACK_whatIsThis
 
 Finished analyzing function: __SMACK_whatIsThis
 
 Analyzing function: __WHAT_code
 -------INSERT: Global Variables __WHAT_code
 Analyzing function: llvm.dbg.value
 -------INSERT: Global Variables llvm.dbg.value
 Analyzing function: __SMACK_static_init
 -------INSERT: Global Variables __SMACK_static_init
 Analyzing function body: __SMACK_static_init
 Generating body for __SMACK_static_init
 
 Finished analyzing function: __SMACK_static_init
 
 Start Analyzing Prelude: main
 
 Start Analyzing Prelude: llvm.dbg.declare
 
 Start Analyzing Prelude: malloc
 
 Start Analyzing Prelude: free_
 
 Start Analyzing Prelude: __SMACK_code.ref
 
 Start Analyzing Prelude: __SMACK_code.ref.i32
 
 Start Analyzing Prelude: __VERIFIER_assume
 
 Start Analyzing Prelude: __SMACK_dummy
 
 Start Analyzing Prelude: __SMACK_and32
 
 Start Analyzing Prelude: __SMACK_and64
 
 Start Analyzing Prelude: __SMACK_and16
 
 Start Analyzing Prelude: __SMACK_and8
 
 Start Analyzing Prelude: __SMACK_or32
 
 Start Analyzing Prelude: __SMACK_or64
 
 Start Analyzing Prelude: __SMACK_or16
 
 Start Analyzing Prelude: __SMACK_or8
 
 Start Analyzing Prelude: __SMACK_check_overflow
 
 Start Analyzing Prelude: __SMACK_top_decl.ref
 
 Start Analyzing Prelude: __SMACK_check_memory_safety
 
 Start Analyzing Prelude: __SMACK_check_memory_leak
 
 Start Analyzing Prelude: __SMACK_init_func_memory_model
 
 Start Analyzing Prelude: __SMACK_my_memory_check
 
 Start Analyzing Prelude: __SMACK_decl.ref
 
 Start Analyzing Prelude: __SMACK_whatIsThis
 
 Start Analyzing Prelude: __WHAT_code.ref
 
 Start Analyzing Prelude: llvm.dbg.value
 
 Start Analyzing Prelude: __SMACK_static_init
 
 Start Analyzing Prelude: boogie_si_record_i16
 
 Start Analyzing Prelude: boogie_si_record_i32
 
 Start Analyzing Prelude: boogie_si_record_i64
 
 Start Analyzing Prelude: boogie_si_record_i8
 
 Start Analyzing Prelude: boogie_si_record_ref
 
 Start Analyzing Prelude: $initialize
 
     ../testcases/svcomp/memsafety/test-0158-3.c(22,15): 
    /usr/local/share/smack/lib/smack.c(1884,3): 
    ../testcases/svcomp/memsafety/test-0158-3.c(22,15): 
    ../testcases/svcomp/memsafety/test-0158-3.c(22,15): 
    ../testcases/svcomp/memsafety/test-0158-3.c(22,15): 
    ../testcases/svcomp/memsafety/test-0158-3.c(22,15): 
    ../testcases/svcomp/memsafety/test-0158-3.c(22,15): 
    ../testcases/svcomp/memsafety/test-0158-3.c(22,15): 
    ../testcases/svcomp/memsafety/test-0158-3.c(22,15): 
    ../testcases/svcomp/memsafety/test-0158-3.c(22,15): 
    ../testcases/svcomp/memsafety/test-0158-3.c(22,15): 

SMACK found an error.
