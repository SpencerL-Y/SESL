// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/smack ../testcases/svcomp/memsafety/test-0214.c -ll ../testcases/svcomp/memsafety/test-0214_IR.ll --bpl ../testcases/svcomp/memsafety/test-0214.bpl -t --sh-mem-leak

const {:global_variable} {:pointer_to_size 128} {:count 2} main.list: ref;
axiom (main.list == $sub.ref(0, 1040));
const is_empty: ref;
axiom (is_empty == $sub.ref(0, 2072));
procedure  is_empty($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref8;
  var $i3: i1;
  var $i4: i1;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref8;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref8;
$bb0:
  $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 8));
  $p2 := $load.ref($M.0, $p1);
  $i3 := $ne.ref($p2, $0.ref);
  $i4 := $xor.i1($i3, 1);
  $i5 := $zext.i1.i32($i4);
  call {:cexpr "no_beg"} boogie_si_record_i32($i5);
  $p6 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(1, 8));
  $p7 := $load.ref($M.0, $p6);
  $i8 := $ne.ref($p7, $0.ref);
  $i9 := $xor.i1($i8, 1);
  $i10 := $zext.i1.i32($i9);
  call {:cexpr "no_end"} boogie_si_record_i32($i10);
  $i11 := $ne.i32($i5, $i10);
  assume {:branchcond $i11} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i11 == 1);
  $p12 := $bitcast.ref.ref($p0);
  call free_($p12);
  goto $bb3;
$bb2:
  assume !(($i11 == 1));
  goto $bb3;
$bb3:
  $r := $i5;
  return;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 3104));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const free_: ref;
axiom (free_ == $sub.ref(0, 4136));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const create_item: ref;
axiom (create_item == $sub.ref(0, 5168));
procedure  create_item($i0: i32, $p1: ref)
  returns ($r: ref)
{
  var $p2: ref8;
  var $p3: ref;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref8;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref8;
  var $p19: ref;
  var $i20: i1;
  var $p21: ref8;
  var $i22: i64;
  var $p23: ref;
$bb0:
  call {:cexpr "create_item:arg:at"} boogie_si_record_i32($i0);
  call $p2 := malloc(280);
  $p3 := $bitcast.ref.ref($p2);
  $i4 := $ne.ref($p3, $0.ref);
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1);
  goto $bb3;
$bb2:
  assume !(($i4 == 1));
  call abort();
  assume false;
$bb3:
  $i5 := $slt.i32($i0, 1);
  assume {:branchcond $i5} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i5 == 1);
  $i7 := $eq.i32($i0, 0);
  assume {:branchcond $i7} true;
  goto $bb9, $bb10;
$bb5:
  assume !(($i5 == 1));
  $i6 := $eq.i32($i0, 1);
  assume {:branchcond $i6} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i6 == 1);
  $i8, $i9 := 1, 0;
  goto $bb11;
$bb7:
  assume !(($i6 == 1));
  goto $bb8;
$bb8:
  $i8, $i9 := $u0, $u0;
  goto $bb11;
$bb9:
  assume ($i7 == 1);
  $i8, $i9 := 0, 1;
  goto $bb11;
$bb10:
  assume !(($i7 == 1));
  goto $bb8;
$bb11:
  $p10 := $bitcast.ref.ref($p1);
  $p11 := $add.ref($add.ref($p3, $mul.ref(0, 280)), $mul.ref(0, 1));
  $i12 := $zext.i32.i64($i9);
  $p13 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 280)), $mul.ref(0, 1)), $mul.ref($i12, 8));
  $M.1 := $store.ref($M.1, $p13, $p1);
  $p14 := $add.ref($add.ref($p3, $mul.ref(0, 280)), $mul.ref(0, 1));
  $i15 := $zext.i32.i64($i8);
  $p16 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 280)), $mul.ref(0, 1)), $mul.ref($i15, 8));
  $M.1 := $store.ref($M.1, $p16, $0.ref);
  $p17 := $add.ref($add.ref($p3, $mul.ref(0, 280)), $mul.ref(16, 1));
  $p18 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 280)), $mul.ref(16, 1)), $mul.ref(0, 1));
  $M.1 := $store.i8($M.1, $p18, 0);
  $p19 := $add.ref($add.ref($p3, $mul.ref(0, 280)), $mul.ref(0, 1));
  $i20 := $ne.ref($p1, $0.ref);
  assume {:branchcond $i20} true;
  goto $bb12, $bb13;
$bb12:
  assume ($i20 == 1);
  $p21 := $bitcast.ref.ref($p19);
  $i22 := $zext.i32.i64($i8);
  $p23 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref($i22, 8));
  $M.1 := $store.ref($M.1, $p23, $p2);
  goto $bb14;
$bb13:
  assume !(($i20 == 1));
  goto $bb14;
$bb14:
  $r := $p19;
  return;
}
const malloc: ref;
axiom (malloc == $sub.ref(0, 6200));
procedure  malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $malloc($i0);
}
const abort: ref;
axiom (abort == $sub.ref(0, 7232));
procedure  abort();
const append_one: ref;
axiom (append_one == $sub.ref(0, 8264));
procedure  append_one($p0: ref, $i1: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $p4: ref8;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref8;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref8;
  var $i12: i1;
  var $p13: ref8;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref8;
  var $i17: i1;
  var $p18: ref8;
  var $p19: ref;
$bb0:
  call {:cexpr "append_one:arg:to"} boogie_si_record_i32($i1);
  $i2 := $zext.i32.i64($i1);
  $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref($i2, 8));
  $p4 := $load.ref($M.0, $p3);
  $p5 := $bitcast.ref.ref($p4);
  call $p6 := create_item($i1, $p5);
  $p7 := $bitcast.ref.ref($p6);
  $i8 := $zext.i32.i64($i1);
  $p9 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref($i8, 8));
  $M.0 := $store.ref($M.0, $p9, $p6);
  $p10 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 8));
  $p11 := $load.ref($M.0, $p10);
  $i12 := $eq.ref($0.ref, $p11);
  assume {:branchcond $i12} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i12 == 1);
  $p13 := $bitcast.ref.ref($p6);
  $p14 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 8));
  $M.0 := $store.ref($M.0, $p14, $p6);
  goto $bb3;
$bb2:
  assume !(($i12 == 1));
  goto $bb3;
$bb3:
  $p15 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(1, 8));
  $p16 := $load.ref($M.0, $p15);
  $i17 := $eq.ref($0.ref, $p16);
  assume {:branchcond $i17} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i17 == 1);
  $p18 := $bitcast.ref.ref($p6);
  $p19 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(1, 8));
  $M.0 := $store.ref($M.0, $p19, $p6);
  goto $bb6;
$bb5:
  assume !(($i17 == 1));
  goto $bb6;
$bb6:
  return;
}
const remove_one: ref;
axiom (remove_one == $sub.ref(0, 9296));
procedure  remove_one($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref8;
  var $p6: ref;
  var $p7: ref8;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref8;
  var $p11: ref;
  var $p12: ref8;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref8;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref8;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref8;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref8;
$bb0:
  call {:cexpr "remove_one:arg:from"} boogie_si_record_i32($i1);
  call $i2 := is_empty($p0);
  $i3 := $ne.i32($i2, 0);
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 8));
  $p5 := $load.ref($M.0, $p4);
  $p6 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(1, 8));
  $p7 := $load.ref($M.0, $p6);
  $i8 := $eq.ref($p5, $p7);
  assume {:branchcond $i8} true;
  goto $bb4, $bb5;
$bb3:
  return;
$bb4:
  assume ($i8 == 1);
  $p9 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 8));
  $p10 := $load.ref($M.0, $p9);
  call free_($p10);
  $p11 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 8));
  $p12 := $bitcast.ref.ref($p11);
  call $M.0 := $memset.i8($M.0, $p12, 0, 16, false);
  goto $bb3;
$bb5:
  assume !(($i8 == 1));
  $i13 := $eq.i32(0, $i1);
  $i14 := (if ($i13 == 1) then 1 else 0);
  call {:cexpr "next_field"} boogie_si_record_i32($i14);
  $i15 := $eq.i32(1, $i1);
  $i16 := (if ($i15 == 1) then 1 else 0);
  call {:cexpr "term_field"} boogie_si_record_i32($i16);
  $i17 := $zext.i32.i64($i1);
  $p18 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref($i17, 8));
  $p19 := $load.ref($M.0, $p18);
  $p20 := $bitcast.ref.ref($p19);
  $i21 := $zext.i32.i64($i14);
  $p22 := $add.ref($add.ref($p20, $mul.ref(0, 16)), $mul.ref($i21, 8));
  $p23 := $load.ref($M.1, $p22);
  $p24 := $bitcast.ref.ref($p23);
  $i25 := $zext.i32.i64($i16);
  $p26 := $add.ref($add.ref($p24, $mul.ref(0, 16)), $mul.ref($i25, 8));
  $M.1 := $store.ref($M.1, $p26, $0.ref);
  $p27 := $bitcast.ref.ref($p24);
  $i28 := $zext.i32.i64($i1);
  $p29 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref($i28, 8));
  $M.0 := $store.ref($M.0, $p29, $p23);
  $p30 := $bitcast.ref.ref($p20);
  call free_($p30);
  goto $bb3;
}
const llvm.memset.p0i8.i64: ref;
axiom (llvm.memset.p0i8.i64 == $sub.ref(0, 10328));
procedure  llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i1);
const rand_end_point: ref;
axiom (rand_end_point == $sub.ref(0, 11360));
procedure  rand_end_point()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
$bb0:
  call $i0 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
  $i1 := $ne.i32($i0, 0);
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  $i2 := 0;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  $i2 := 1;
  goto $bb3;
$bb3:
  $r := $i2;
  return;
}
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0, 12392));
procedure  __VERIFIER_nondet_int()
  returns ($r: i32);
const main: ref;
axiom (main == $sub.ref(0, 13424));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref8;
  var $p21: ref;
  var $i22: i1;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref8;
  var $p27: ref;
  var $p28: ref8;
  var $i29: i1;
$bb0:
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  call $i0 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
  $i1 := $ne.i32($i0, 0);
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  goto $bb4;
$bb2:
  assume !(($i1 == 1));
  goto $bb3;
$bb3:
  call $i14 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i14);
  $i15 := $ne.i32($i14, 0);
  assume {:branchcond $i15} true;
  goto $bb19, $bb20;
$bb4:
  call $i2 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
  $i3 := $ne.i32($i2, 0);
  assume {:branchcond $i3} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i3 == 1);
  goto $bb8;
$bb6:
  assume !(($i3 == 1));
  goto $bb7;
$bb7:
  call $i7 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i7);
  $i8 := $ne.i32($i7, 0);
  assume {:branchcond $i8} true;
  goto $bb11, $bb12;
$bb8:
  call $i4 := rand_end_point();
  call append_one(main.list, $i4);
  call $i5 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
  $i6 := $ne.i32($i5, 0);
  assume {:branchcond $i6} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i6 == 1);
  goto $bb8;
$bb10:
  assume !(($i6 == 1));
  goto $bb7;
$bb11:
  assume ($i8 == 1);
  goto $bb14;
$bb12:
  assume !(($i8 == 1));
  goto $bb13;
$bb13:
  call $i12 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
  $i13 := $ne.i32($i12, 0);
  assume {:branchcond $i13} true;
  goto $bb17, $bb18;
$bb14:
  call $i9 := rand_end_point();
  call remove_one(main.list, $i9);
  call $i10 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i10);
  $i11 := $ne.i32($i10, 0);
  assume {:branchcond $i11} true;
  goto $bb15, $bb16;
$bb15:
  assume ($i11 == 1);
  goto $bb14;
$bb16:
  assume !(($i11 == 1));
  goto $bb13;
$bb17:
  assume ($i13 == 1);
  goto $bb4;
$bb18:
  assume !(($i13 == 1));
  goto $bb3;
$bb19:
  assume ($i15 == 1);
  $i16, $i17 := 1, 0;
  goto $bb21;
$bb20:
  assume !(($i15 == 1));
  $i16, $i17 := 0, 1;
  goto $bb21;
$bb21:
  $i18 := $zext.i32.i64($i17);
  $p19 := $add.ref($add.ref(main.list, $mul.ref(0, 16)), $mul.ref($i18, 8));
  $p20 := $load.ref($M.0, $p19);
  $p21 := $bitcast.ref.ref($p20);
  $i22 := $ne.ref($p21, $0.ref);
  assume {:branchcond $i22} true;
  goto $bb22, $bb23;
$bb22:
  assume ($i22 == 1);
  $p23 := $p20;
  goto $bb25;
$bb23:
  assume !(($i22 == 1));
  goto $bb24;
$bb24:
  $r := 0;
  return;
$bb25:
  $i24 := $zext.i32.i64($i16);
  $p25 := $add.ref($add.ref($p23, $mul.ref(0, 16)), $mul.ref($i24, 8));
  $p26 := $load.ref($M.1, $p25);
  $p27 := $bitcast.ref.ref($p26);
  $p28 := $bitcast.ref.ref($p23);
  call free_($p28);
  $i29 := $ne.ref($p27, $0.ref);
  assume {:branchcond $i29} true;
  goto $bb26, $bb27;
$bb26:
  assume ($i29 == 1);
  $p23 := $p26;
  goto $bb25;
$bb27:
  assume !(($i29 == 1));
  goto $bb24;
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 14456));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 15488));
procedure  __SMACK_static_init()
{
$bb0:
  $M.0 := $store.ref($M.0, main.list, $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(main.list, $mul.ref(0, 16)), $mul.ref(1, 8)), $0.ref);
  return;
}
procedure  $memset.i8(M: [ref] i8, dst: ref, val: i8, len: ref, isvolatile: bool) returns (M.ret: [ref] i8)
{
  assume (forall x: ref :: $sle.ref.bool(dst,x) && $slt.ref.bool(x,$add.ref(dst,len)) ==> M.ret[x] == val);
  assume (forall x: ref :: $slt.ref.bool(x,dst) ==> M.ret[x] == M[x]);
  assume (forall x: ref :: $sle.ref.bool($add.ref(dst,len),x) ==> M.ret[x] == M[x]);
}

const {:global_variable} $u0: i32;
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
