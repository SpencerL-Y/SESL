// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/smack ../testcases/svcomp/memsafety/test-0234-1.i -ll ../testcases/svcomp/memsafety/test-0234-1_IR.ll --bpl ../testcases/svcomp/memsafety/test-0234-1.bpl -t --sh-mem-leak --add-line-info

const {:global_variable} {:pointer_to_size 16} .str: ref;
axiom (.str == $sub.ref(0, 1026));
const {:global_variable} {:pointer_to_size 112} {:count 14} .str.1: ref;
axiom (.str.1 == $sub.ref(0, 2064));
const {:global_variable} {:pointer_to_size 152} {:count 19} __PRETTY_FUNCTION__.reach_error: ref;
axiom (__PRETTY_FUNCTION__.reach_error == $sub.ref(0, 3107));
const {:global_variable} {:pointer_to_size 64} main.list: ref;
axiom (main.list == $sub.ref(0, 4139));
const reach_error: ref;
axiom (reach_error == $sub.ref(0, 5171));
procedure  reach_error()
{
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 12, 83} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 12, 83} true;
  call __assert_fail(.str, .str.1, 3, __PRETTY_FUNCTION__.reach_error);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 12, 83} true;
  assume false;
}
const __assert_fail: ref;
axiom (__assert_fail == $sub.ref(0, 6203));
procedure  __assert_fail($p0: ref, $p1: ref, $i2: i32, $p3: ref);
const main: ref;
axiom (main == $sub.ref(0, 7235));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $p2: ref;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 768, 5} true;
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 768, 5} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 769, 9} true;
  call l0_insert(main.list);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 769, 9} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 770, 12} true;
  call $i0 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 769, 9} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 769, 9} true;
  assume {:branchcond $i1} true;
  goto $bb3, $bb4;
$bb3:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 769, 9} true;
  assume ($i1 == 1);
  goto $bb1;
$bb4:
  assume !(($i1 == 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 771, 16} true;
  $p2 := $load.ref($M.0, main.list);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 771, 5} true;
  call l0_destroy($p2);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 772, 1} true;
  $r := 0;
  return;
}
const l0_insert: ref;
axiom (l0_insert == $sub.ref(0, 8267));
procedure  l0_insert($p0: ref)
{
  var $p1: ref8;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 708, 23} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 708, 23} true;
  call $p1 := zalloc_or_die(16);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 708, 23} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 709, 5} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 710, 26} true;
  $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 710, 9} true;
  call l1_insert($p3);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 710, 9} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 711, 12} true;
  call $i4 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 710, 9} true;
  $i5 := $ne.i32($i4, 0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 710, 9} true;
  assume {:branchcond $i5} true;
  goto $bb3, $bb4;
$bb3:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 710, 9} true;
  assume ($i5 == 1);
  goto $bb1;
$bb4:
  assume !(($i5 == 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 712, 18} true;
  $p6 := $load.ref($M.0, $p0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 712, 11} true;
  $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 712, 16} true;
  $M.1 := $store.ref($M.1, $p7, $p6);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 713, 11} true;
  $M.0 := $store.ref($M.0, $p0, $p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 714, 1} true;
  return;
}
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0, 9299));
procedure  __VERIFIER_nondet_int()
  returns ($r: i32);
const l0_destroy: ref;
axiom (l0_destroy == $sub.ref(0, 10331));
procedure  l0_destroy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref8;
  var $i7: i1;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 757, 5} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 757, 5} true;
  $p1 := $p0;
  goto $bb1;
$bb1:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 758, 26} true;
  $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 758, 26} true;
  $p3 := $load.ref($M.1, $p2);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 758, 9} true;
  call l1_destroy($p3);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 759, 33} true;
  $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 759, 33} true;
  $p5 := $load.ref($M.1, $p4);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 760, 14} true;
  $p6 := $bitcast.ref.ref($p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 760, 9} true;
  call free_($p6);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 762, 5} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 762, 5} true;
  $i7 := $ne.ref($p5, $0.ref);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 762, 5} true;
  assume {:branchcond $i7} true;
  goto $bb3, $bb4;
$bb3:
  assume ($i7 == 1);
  $p1 := $p5;
  goto $bb1;
$bb4:
  assume !(($i7 == 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 764, 1} true;
  return;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 11363));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const l1_destroy: ref;
axiom (l1_destroy == $sub.ref(0, 12395));
procedure  l1_destroy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref8;
  var $i7: i1;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 747, 5} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 747, 5} true;
  $p1 := $p0;
  goto $bb1;
$bb1:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 748, 26} true;
  $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 748, 26} true;
  $p3 := $load.ref($M.1, $p2);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 748, 9} true;
  call l2_destroy($p3);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 749, 33} true;
  $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 749, 33} true;
  $p5 := $load.ref($M.1, $p4);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 750, 14} true;
  $p6 := $bitcast.ref.ref($p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 750, 9} true;
  call free_($p6);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 752, 5} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 752, 5} true;
  $i7 := $ne.ref($p5, $0.ref);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 752, 5} true;
  assume {:branchcond $i7} true;
  goto $bb3, $bb4;
$bb3:
  assume ($i7 == 1);
  $p1 := $p5;
  goto $bb1;
$bb4:
  assume !(($i7 == 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 754, 1} true;
  return;
}
const free_: ref;
axiom (free_ == $sub.ref(0, 13427));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const l2_destroy: ref;
axiom (l2_destroy == $sub.ref(0, 14459));
procedure  l2_destroy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref8;
  var $i7: i1;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 737, 5} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 737, 5} true;
  $p1 := $p0;
  goto $bb1;
$bb1:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 738, 26} true;
  $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 738, 26} true;
  $p3 := $load.ref($M.1, $p2);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 738, 9} true;
  call l3_destroy($p3);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 739, 33} true;
  $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 739, 33} true;
  $p5 := $load.ref($M.1, $p4);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 740, 14} true;
  $p6 := $bitcast.ref.ref($p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 740, 9} true;
  call free_($p6);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 742, 5} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 742, 5} true;
  $i7 := $ne.ref($p5, $0.ref);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 742, 5} true;
  assume {:branchcond $i7} true;
  goto $bb3, $bb4;
$bb3:
  assume ($i7 == 1);
  $p1 := $p5;
  goto $bb1;
$bb4:
  assume !(($i7 == 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 744, 1} true;
  return;
}
const l3_destroy: ref;
axiom (l3_destroy == $sub.ref(0, 15491));
procedure  l3_destroy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref8;
  var $i7: i1;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 727, 5} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 727, 5} true;
  $p1 := $p0;
  goto $bb1;
$bb1:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 728, 26} true;
  $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 728, 26} true;
  $p3 := $load.ref($M.1, $p2);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 728, 9} true;
  call l4_destroy($p3);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 729, 33} true;
  $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 729, 33} true;
  $p5 := $load.ref($M.1, $p4);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 730, 14} true;
  $p6 := $bitcast.ref.ref($p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 730, 9} true;
  call free_($p6);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 732, 5} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 732, 5} true;
  $i7 := $ne.ref($p5, $0.ref);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 732, 5} true;
  assume {:branchcond $i7} true;
  goto $bb3, $bb4;
$bb3:
  assume ($i7 == 1);
  $p1 := $p5;
  goto $bb1;
$bb4:
  assume !(($i7 == 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 734, 1} true;
  return;
}
const l4_destroy: ref;
axiom (l4_destroy == $sub.ref(0, 16523));
procedure  l4_destroy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref8;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref8;
  var $i8: i1;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 717, 5} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 717, 5} true;
  $p1 := $p0;
  goto $bb1;
$bb1:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 718, 20} true;
  $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 718, 20} true;
  $p3 := $load.ref($M.1, $p2);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 718, 14} true;
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 718, 9} true;
  call free_($p4);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 719, 33} true;
  $p5 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 719, 33} true;
  $p6 := $load.ref($M.1, $p5);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 720, 14} true;
  $p7 := $bitcast.ref.ref($p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 720, 9} true;
  call free_($p7);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 722, 5} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 722, 5} true;
  $i8 := $ne.ref($p6, $0.ref);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 722, 5} true;
  assume {:branchcond $i8} true;
  goto $bb3, $bb4;
$bb3:
  assume ($i8 == 1);
  $p1 := $p6;
  goto $bb1;
$bb4:
  assume !(($i8 == 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 724, 1} true;
  return;
}
const zalloc_or_die: ref;
axiom (zalloc_or_die == $sub.ref(0, 17555));
procedure  zalloc_or_die($i0: i32)
  returns ($r: ref)
{
  var $p1: ref8;
  var $i2: i1;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 667, 17} true;
  call {:cexpr "zalloc_or_die:arg:size"} boogie_si_record_i32($i0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 667, 17} true;
  call $p1 := calloc_model(1, $i0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 668, 9} true;
  $i2 := $ne.ref($p1, $0.ref);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 668, 9} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 669, 9} true;
  $r := $p1;
  return;
$bb2:
  assume !(($i2 == 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 670, 5} true;
  call abort();
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 670, 5} true;
  assume false;
}
const l1_insert: ref;
axiom (l1_insert == $sub.ref(0, 18587));
procedure  l1_insert($p0: ref)
{
  var $p1: ref8;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 699, 23} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 699, 23} true;
  call $p1 := zalloc_or_die(16);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 699, 23} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 700, 5} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 701, 26} true;
  $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 701, 9} true;
  call l2_insert($p3);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 701, 9} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 702, 12} true;
  call $i4 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 701, 9} true;
  $i5 := $ne.i32($i4, 0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 701, 9} true;
  assume {:branchcond $i5} true;
  goto $bb3, $bb4;
$bb3:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 701, 9} true;
  assume ($i5 == 1);
  goto $bb1;
$bb4:
  assume !(($i5 == 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 703, 18} true;
  $p6 := $load.ref($M.1, $p0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 703, 11} true;
  $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 703, 16} true;
  $M.1 := $store.ref($M.1, $p7, $p6);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 704, 11} true;
  $M.1 := $store.ref($M.1, $p0, $p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 705, 1} true;
  return;
}
const l2_insert: ref;
axiom (l2_insert == $sub.ref(0, 19619));
procedure  l2_insert($p0: ref)
{
  var $p1: ref8;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 690, 23} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 690, 23} true;
  call $p1 := zalloc_or_die(16);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 690, 23} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 691, 5} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 692, 26} true;
  $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 692, 9} true;
  call l3_insert($p3);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 692, 9} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 693, 12} true;
  call $i4 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 692, 9} true;
  $i5 := $ne.i32($i4, 0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 692, 9} true;
  assume {:branchcond $i5} true;
  goto $bb3, $bb4;
$bb3:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 692, 9} true;
  assume ($i5 == 1);
  goto $bb1;
$bb4:
  assume !(($i5 == 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 694, 18} true;
  $p6 := $load.ref($M.1, $p0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 694, 11} true;
  $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 694, 16} true;
  $M.1 := $store.ref($M.1, $p7, $p6);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 695, 11} true;
  $M.1 := $store.ref($M.1, $p0, $p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 696, 1} true;
  return;
}
const l3_insert: ref;
axiom (l3_insert == $sub.ref(0, 20651));
procedure  l3_insert($p0: ref)
{
  var $p1: ref8;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 681, 23} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 681, 23} true;
  call $p1 := zalloc_or_die(16);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 681, 23} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 682, 5} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 683, 26} true;
  $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 683, 9} true;
  call l4_insert($p3);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 683, 9} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 684, 12} true;
  call $i4 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 683, 9} true;
  $i5 := $ne.i32($i4, 0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 683, 9} true;
  assume {:branchcond $i5} true;
  goto $bb3, $bb4;
$bb3:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 683, 9} true;
  assume ($i5 == 1);
  goto $bb1;
$bb4:
  assume !(($i5 == 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 685, 18} true;
  $p6 := $load.ref($M.1, $p0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 685, 11} true;
  $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 685, 16} true;
  $M.1 := $store.ref($M.1, $p7, $p6);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 686, 11} true;
  $M.1 := $store.ref($M.1, $p0, $p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 687, 1} true;
  return;
}
const l4_insert: ref;
axiom (l4_insert == $sub.ref(0, 21683));
procedure  l4_insert($p0: ref)
{
  var $p1: ref8;
  var $p2: ref;
  var $p3: ref8;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 674, 23} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 674, 23} true;
  call $p1 := zalloc_or_die(16);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 674, 23} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 675, 18} true;
  call $p3 := zalloc_or_die(119);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 675, 18} true;
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 675, 11} true;
  $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 675, 16} true;
  $M.1 := $store.ref($M.1, $p5, $p3);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 676, 18} true;
  $p6 := $load.ref($M.1, $p0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 676, 11} true;
  $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 676, 16} true;
  $M.1 := $store.ref($M.1, $p7, $p6);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 677, 11} true;
  $M.1 := $store.ref($M.1, $p0, $p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 678, 1} true;
  return;
}
const calloc_model: ref;
axiom (calloc_model == $sub.ref(0, 22715));
procedure  calloc_model($i0: i32, $i1: i32)
  returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref8;
  var $i4: i32;
  var $p5: ref8;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 641, 30} true;
  call {:cexpr "calloc_model:arg:nmemb"} boogie_si_record_i32($i0);
  call {:cexpr "calloc_model:arg:size"} boogie_si_record_i32($i1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 641, 30} true;
  $i2 := $mul.i32($i0, $i1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 641, 17} true;
  call $p3 := malloc($i2);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 642, 33} true;
  $i4 := $mul.i32($i0, $i1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 642, 12} true;
  call $p5 := memset($p3, 0, $i4);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0234-1.i", 642, 5} true;
  $r := $p5;
  return;
}
const abort: ref;
axiom (abort == $sub.ref(0, 23747));
procedure  abort();
const malloc: ref;
axiom (malloc == $sub.ref(0, 24779));
procedure  malloc($i0: i32)
  returns ($r: ref)
{
  call $r := $malloc($zext.i32.i64($i0));
}
const memset: ref;
axiom (memset == $sub.ref(0, 25811));
procedure  memset($p0: ref, $i1: i32, $i2: i32)
  returns ($r: ref);
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 26843));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 27875));
procedure  __SMACK_static_init()
{
$bb0:
  $M.0 := $store.ref($M.0, main.list, $0.ref);
  return;
}
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
