// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/smack ../testcases/svcomp/memsafety/test-0235-1.c -ll ../testcases/svcomp/memsafety/test-0235-1_IR.ll --bpl ../testcases/svcomp/memsafety/test-0235-1.bpl -t --sh-mem-leak --add-line-info

const {:global_variable} {:pointer_to_size 64} main.list: ref;
axiom (main.list == $sub.ref(0, 1032));
const main: ref;
axiom (main == $sub.ref(0, 2064));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 185, 5} true;
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 185, 5} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 186, 9} true;
  call l0_insert(main.list);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 186, 9} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 187, 12} true;
  call $i0 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 186, 9} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 186, 9} true;
  assume {:branchcond $i1} true;
  goto $bb3, $bb4;
$bb3:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 186, 9} true;
  assume ($i1 == 1);
  goto $bb1;
$bb4:
  assume !(($i1 == 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 189, 16} true;
  $p2 := $load.ref($M.0, main.list);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 189, 5} true;
  call l0_destroy($p2, 4);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 190, 16} true;
  $p3 := $load.ref($M.0, main.list);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 190, 5} true;
  call l0_destroy($p3, 3);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 191, 16} true;
  $p4 := $load.ref($M.0, main.list);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 191, 5} true;
  call l0_destroy($p4, 2);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 192, 16} true;
  $p5 := $load.ref($M.0, main.list);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 192, 5} true;
  call l0_destroy($p5, 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 193, 16} true;
  $p6 := $load.ref($M.0, main.list);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 193, 5} true;
  call l0_destroy($p6, 0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 195, 14} true;
  $p7 := $load.ref($M.0, main.list);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 195, 13} true;
  $i8 := $ne.ref($p7, $0.ref);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 195, 13} true;
  $i9 := $xor.i1($i8, 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 195, 12} true;
  $i10 := $xor.i1($i9, 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 195, 12} true;
  $i11 := $zext.i1.i32($i10);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 195, 5} true;
  $r := $i11;
  return;
}
const l0_insert: ref;
axiom (l0_insert == $sub.ref(0, 3096));
procedure  l0_insert($p0: ref)
{
  var $p1: ref8;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 96, 23} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 96, 23} true;
  call $p1 := zalloc_or_die(16);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 96, 23} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 98, 5} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 99, 26} true;
  $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 99, 9} true;
  call l1_insert($p3);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 99, 9} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 100, 12} true;
  call $i4 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 99, 9} true;
  $i5 := $ne.i32($i4, 0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 99, 9} true;
  assume {:branchcond $i5} true;
  goto $bb3, $bb4;
$bb3:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 99, 9} true;
  assume ($i5 == 1);
  goto $bb1;
$bb4:
  assume !(($i5 == 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 102, 18} true;
  $p6 := $load.ref($M.0, $p0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 102, 11} true;
  $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 102, 16} true;
  $M.1 := $store.ref($M.1, $p7, $p6);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 103, 11} true;
  $M.0 := $store.ref($M.0, $p0, $p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 104, 1} true;
  return;
}
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0, 4128));
procedure  __VERIFIER_nondet_int()
  returns ($r: i32);
const l0_destroy: ref;
axiom (l0_destroy == $sub.ref(0, 5160));
procedure  l0_destroy($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $p9: ref8;
  var $i10: i1;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 168, 5} true;
  call {:cexpr "l0_destroy:arg:level"} boogie_si_record_i32($i1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 168, 5} true;
  $p2 := $p0;
  goto $bb1;
$bb1:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 169, 15} true;
  $i3 := $slt.i32(0, $i1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 169, 13} true;
  assume {:branchcond $i3} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i3 == 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 170, 30} true;
  $p4 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 170, 30} true;
  $p5 := $load.ref($M.1, $p4);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 170, 13} true;
  call l1_destroy($p5, $i1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 170, 13} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 169, 13} true;
  assume !(($i3 == 1));
  goto $bb4;
$bb4:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 172, 33} true;
  $p6 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 172, 33} true;
  $p7 := $load.ref($M.1, $p6);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 173, 15} true;
  $i8 := $eq.i32(0, $i1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 173, 13} true;
  assume {:branchcond $i8} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i8 == 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 174, 18} true;
  $p9 := $bitcast.ref.ref($p2);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 174, 13} true;
  call free_($p9);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 174, 13} true;
  goto $bb7;
$bb6:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 173, 13} true;
  assume !(($i8 == 1));
  goto $bb7;
$bb7:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 177, 5} true;
  goto $bb8;
$bb8:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 177, 5} true;
  $i10 := $ne.ref($p7, $0.ref);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 177, 5} true;
  assume {:branchcond $i10} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i10 == 1);
  $p2 := $p7;
  goto $bb1;
$bb10:
  assume !(($i10 == 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 179, 1} true;
  return;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 6192));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const l1_destroy: ref;
axiom (l1_destroy == $sub.ref(0, 7224));
procedure  l1_destroy($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $p9: ref8;
  var $i10: i1;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 153, 5} true;
  call {:cexpr "l1_destroy:arg:level"} boogie_si_record_i32($i1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 153, 5} true;
  $p2 := $p0;
  goto $bb1;
$bb1:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 154, 15} true;
  $i3 := $slt.i32(1, $i1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 154, 13} true;
  assume {:branchcond $i3} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i3 == 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 155, 30} true;
  $p4 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 155, 30} true;
  $p5 := $load.ref($M.1, $p4);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 155, 13} true;
  call l2_destroy($p5, $i1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 155, 13} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 154, 13} true;
  assume !(($i3 == 1));
  goto $bb4;
$bb4:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 157, 33} true;
  $p6 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 157, 33} true;
  $p7 := $load.ref($M.1, $p6);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 158, 15} true;
  $i8 := $eq.i32(1, $i1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 158, 13} true;
  assume {:branchcond $i8} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i8 == 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 159, 18} true;
  $p9 := $bitcast.ref.ref($p2);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 159, 13} true;
  call free_($p9);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 159, 13} true;
  goto $bb7;
$bb6:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 158, 13} true;
  assume !(($i8 == 1));
  goto $bb7;
$bb7:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 162, 5} true;
  goto $bb8;
$bb8:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 162, 5} true;
  $i10 := $ne.ref($p7, $0.ref);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 162, 5} true;
  assume {:branchcond $i10} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i10 == 1);
  $p2 := $p7;
  goto $bb1;
$bb10:
  assume !(($i10 == 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 164, 1} true;
  return;
}
const free_: ref;
axiom (free_ == $sub.ref(0, 8256));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const l2_destroy: ref;
axiom (l2_destroy == $sub.ref(0, 9288));
procedure  l2_destroy($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $p9: ref8;
  var $i10: i1;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 138, 5} true;
  call {:cexpr "l2_destroy:arg:level"} boogie_si_record_i32($i1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 138, 5} true;
  $p2 := $p0;
  goto $bb1;
$bb1:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 139, 15} true;
  $i3 := $slt.i32(2, $i1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 139, 13} true;
  assume {:branchcond $i3} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i3 == 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 140, 30} true;
  $p4 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 140, 30} true;
  $p5 := $load.ref($M.1, $p4);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 140, 13} true;
  call l3_destroy($p5, $i1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 140, 13} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 139, 13} true;
  assume !(($i3 == 1));
  goto $bb4;
$bb4:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 142, 33} true;
  $p6 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 142, 33} true;
  $p7 := $load.ref($M.1, $p6);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 143, 15} true;
  $i8 := $eq.i32(2, $i1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 143, 13} true;
  assume {:branchcond $i8} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i8 == 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 144, 18} true;
  $p9 := $bitcast.ref.ref($p2);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 144, 13} true;
  call free_($p9);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 144, 13} true;
  goto $bb7;
$bb6:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 143, 13} true;
  assume !(($i8 == 1));
  goto $bb7;
$bb7:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 147, 5} true;
  goto $bb8;
$bb8:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 147, 5} true;
  $i10 := $ne.ref($p7, $0.ref);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 147, 5} true;
  assume {:branchcond $i10} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i10 == 1);
  $p2 := $p7;
  goto $bb1;
$bb10:
  assume !(($i10 == 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 149, 1} true;
  return;
}
const l3_destroy: ref;
axiom (l3_destroy == $sub.ref(0, 10320));
procedure  l3_destroy($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $p9: ref8;
  var $i10: i1;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 123, 5} true;
  call {:cexpr "l3_destroy:arg:level"} boogie_si_record_i32($i1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 123, 5} true;
  $p2 := $p0;
  goto $bb1;
$bb1:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 124, 15} true;
  $i3 := $slt.i32(3, $i1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 124, 13} true;
  assume {:branchcond $i3} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i3 == 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 125, 30} true;
  $p4 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 125, 30} true;
  $p5 := $load.ref($M.1, $p4);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 125, 13} true;
  call l4_destroy($p5, $i1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 125, 13} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 124, 13} true;
  assume !(($i3 == 1));
  goto $bb4;
$bb4:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 127, 33} true;
  $p6 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 127, 33} true;
  $p7 := $load.ref($M.1, $p6);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 128, 15} true;
  $i8 := $eq.i32(3, $i1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 128, 13} true;
  assume {:branchcond $i8} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i8 == 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 129, 18} true;
  $p9 := $bitcast.ref.ref($p2);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 129, 13} true;
  call free_($p9);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 129, 13} true;
  goto $bb7;
$bb6:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 128, 13} true;
  assume !(($i8 == 1));
  goto $bb7;
$bb7:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 132, 5} true;
  goto $bb8;
$bb8:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 132, 5} true;
  $i10 := $ne.ref($p7, $0.ref);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 132, 5} true;
  assume {:branchcond $i10} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i10 == 1);
  $p2 := $p7;
  goto $bb1;
$bb10:
  assume !(($i10 == 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 134, 1} true;
  return;
}
const l4_destroy: ref;
axiom (l4_destroy == $sub.ref(0, 11352));
procedure  l4_destroy($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref8;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $p10: ref8;
  var $i11: i1;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 108, 5} true;
  call {:cexpr "l4_destroy:arg:level"} boogie_si_record_i32($i1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 108, 5} true;
  $p2 := $p0;
  goto $bb1;
$bb1:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 109, 15} true;
  $i3 := $eq.i32(5, $i1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 109, 13} true;
  assume {:branchcond $i3} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i3 == 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 110, 24} true;
  $p4 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 110, 24} true;
  $p5 := $load.ref($M.1, $p4);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 110, 18} true;
  $p6 := $bitcast.ref.ref($p5);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 110, 13} true;
  call free_($p6);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 110, 13} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 109, 13} true;
  assume !(($i3 == 1));
  goto $bb4;
$bb4:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 112, 33} true;
  $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 112, 33} true;
  $p8 := $load.ref($M.1, $p7);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 113, 15} true;
  $i9 := $eq.i32(4, $i1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 113, 13} true;
  assume {:branchcond $i9} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i9 == 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 114, 18} true;
  $p10 := $bitcast.ref.ref($p2);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 114, 13} true;
  call free_($p10);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 114, 13} true;
  goto $bb7;
$bb6:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 113, 13} true;
  assume !(($i9 == 1));
  goto $bb7;
$bb7:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 117, 5} true;
  goto $bb8;
$bb8:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 117, 5} true;
  $i11 := $ne.ref($p8, $0.ref);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 117, 5} true;
  assume {:branchcond $i11} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i11 == 1);
  $p2 := $p8;
  goto $bb1;
$bb10:
  assume !(($i11 == 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 119, 1} true;
  return;
}
const zalloc_or_die: ref;
axiom (zalloc_or_die == $sub.ref(0, 12384));
procedure  zalloc_or_die($i0: i32)
  returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref8;
  var $i3: i1;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 42, 34} true;
  call {:cexpr "zalloc_or_die:arg:size"} boogie_si_record_i32($i0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 42, 34} true;
  $i1 := $zext.i32.i64($i0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 42, 17} true;
  call $p2 := calloc_model(1, $i1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 43, 9} true;
  $i3 := $ne.ref($p2, $0.ref);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 43, 9} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 44, 9} true;
  $r := $p2;
  return;
$bb2:
  assume !(($i3 == 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 46, 5} true;
  call abort();
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 46, 5} true;
  assume false;
}
const l1_insert: ref;
axiom (l1_insert == $sub.ref(0, 13416));
procedure  l1_insert($p0: ref)
{
  var $p1: ref8;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 84, 23} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 84, 23} true;
  call $p1 := zalloc_or_die(16);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 84, 23} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 86, 5} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 87, 26} true;
  $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 87, 9} true;
  call l2_insert($p3);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 87, 9} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 88, 12} true;
  call $i4 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 87, 9} true;
  $i5 := $ne.i32($i4, 0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 87, 9} true;
  assume {:branchcond $i5} true;
  goto $bb3, $bb4;
$bb3:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 87, 9} true;
  assume ($i5 == 1);
  goto $bb1;
$bb4:
  assume !(($i5 == 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 90, 18} true;
  $p6 := $load.ref($M.1, $p0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 90, 11} true;
  $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 90, 16} true;
  $M.1 := $store.ref($M.1, $p7, $p6);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 91, 11} true;
  $M.1 := $store.ref($M.1, $p0, $p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 92, 1} true;
  return;
}
const l2_insert: ref;
axiom (l2_insert == $sub.ref(0, 14448));
procedure  l2_insert($p0: ref)
{
  var $p1: ref8;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 72, 23} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 72, 23} true;
  call $p1 := zalloc_or_die(16);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 72, 23} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 74, 5} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 75, 26} true;
  $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 75, 9} true;
  call l3_insert($p3);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 75, 9} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 76, 12} true;
  call $i4 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 75, 9} true;
  $i5 := $ne.i32($i4, 0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 75, 9} true;
  assume {:branchcond $i5} true;
  goto $bb3, $bb4;
$bb3:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 75, 9} true;
  assume ($i5 == 1);
  goto $bb1;
$bb4:
  assume !(($i5 == 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 78, 18} true;
  $p6 := $load.ref($M.1, $p0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 78, 11} true;
  $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 78, 16} true;
  $M.1 := $store.ref($M.1, $p7, $p6);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 79, 11} true;
  $M.1 := $store.ref($M.1, $p0, $p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 80, 1} true;
  return;
}
const l3_insert: ref;
axiom (l3_insert == $sub.ref(0, 15480));
procedure  l3_insert($p0: ref)
{
  var $p1: ref8;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 60, 23} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 60, 23} true;
  call $p1 := zalloc_or_die(16);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 60, 23} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 62, 5} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 63, 26} true;
  $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 63, 9} true;
  call l4_insert($p3);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 63, 9} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 64, 12} true;
  call $i4 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 63, 9} true;
  $i5 := $ne.i32($i4, 0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 63, 9} true;
  assume {:branchcond $i5} true;
  goto $bb3, $bb4;
$bb3:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 63, 9} true;
  assume ($i5 == 1);
  goto $bb1;
$bb4:
  assume !(($i5 == 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 66, 18} true;
  $p6 := $load.ref($M.1, $p0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 66, 11} true;
  $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 66, 16} true;
  $M.1 := $store.ref($M.1, $p7, $p6);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 67, 11} true;
  $M.1 := $store.ref($M.1, $p0, $p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 68, 1} true;
  return;
}
const l4_insert: ref;
axiom (l4_insert == $sub.ref(0, 16512));
procedure  l4_insert($p0: ref)
{
  var $p1: ref8;
  var $p2: ref;
  var $p3: ref8;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 51, 23} true;
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 51, 23} true;
  call $p1 := zalloc_or_die(16);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 51, 23} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 52, 18} true;
  call $p3 := zalloc_or_die(119);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 52, 18} true;
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 52, 11} true;
  $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 52, 16} true;
  $M.1 := $store.ref($M.1, $p5, $p3);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 54, 18} true;
  $p6 := $load.ref($M.1, $p0);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 54, 11} true;
  $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 54, 16} true;
  $M.1 := $store.ref($M.1, $p7, $p6);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 55, 11} true;
  $M.1 := $store.ref($M.1, $p0, $p1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 56, 1} true;
  return;
}
const calloc_model: ref;
axiom (calloc_model == $sub.ref(0, 17544));
procedure  calloc_model($i0: i64, $i1: i64)
  returns ($r: ref)
{
  var $i2: i64;
  var $p3: ref8;
  var $i4: i64;
$bb0:
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 9, 30} true;
  call {:cexpr "calloc_model:arg:nmemb"} boogie_si_record_i64($i0);
  call {:cexpr "calloc_model:arg:size"} boogie_si_record_i64($i1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 9, 30} true;
  $i2 := $mul.i64($i0, $i1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 9, 17} true;
  call $p3 := malloc($i2);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 10, 33} true;
  $i4 := $mul.i64($i0, $i1);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 10, 12} true;
  call $M.1 := $memset.i8($M.1, $p3, 0, $i4, false);
  assume {:sourceloc "../testcases/svcomp/memsafety/test-0235-1.c", 10, 5} true;
  $r := $p3;
  return;
}
const abort: ref;
axiom (abort == $sub.ref(0, 18576));
procedure  abort();
const malloc: ref;
axiom (malloc == $sub.ref(0, 19608));
procedure  malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $malloc($i0);
}
const llvm.memset.p0i8.i64: ref;
axiom (llvm.memset.p0i8.i64 == $sub.ref(0, 20640));
procedure  llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i1);
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 21672));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 22704));
procedure  __SMACK_static_init()
{
$bb0:
  $M.0 := $store.ref($M.0, main.list, $0.ref);
  return;
}
procedure  $memset.i8(M: [ref] i8, dst: ref, val: i8, len: ref, isvolatile: bool) returns (M.ret: [ref] i8)
{
  assume (forall x: ref :: $sle.ref.bool(dst,x) && $slt.ref.bool(x,$add.ref(dst,len)) ==> M.ret[x] == val);
  assume (forall x: ref :: $slt.ref.bool(x,dst) ==> M.ret[x] == M[x]);
  assume (forall x: ref :: $sle.ref.bool($add.ref(dst,len),x) ==> M.ret[x] == M[x]);
}

procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_i64(x: i64);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
