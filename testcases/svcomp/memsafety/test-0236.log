SMACK program verifier version 2.6.3
Running clang -c -emit-llvm -O0 -g -gcolumn-info -Xclang -disable-O0-optnone -I/usr/local/share/smack/include -DMEMORY_MODEL_NO_REUSE_IMPLS -o /home/clexma/Desktop/Disk_D/Tools/SMACK/SmackBasedPrj/testcases/benchmark/test-0236-r1bjxxks.bc ../svcomp/memsafety//test-0236.c
Running llvm-link -o /home/clexma/Desktop/Disk_D/Tools/SMACK/SmackBasedPrj/testcases/benchmark/a-gy5sgw6p.bc /home/clexma/Desktop/Disk_D/Tools/SMACK/SmackBasedPrj/testcases/benchmark/test-0236-r1bjxxks.bc
Running llvm-link -o /home/clexma/Desktop/Disk_D/Tools/SMACK/SmackBasedPrj/testcases/benchmark/b-x5y9v2xv.bc /home/clexma/Desktop/Disk_D/Tools/SMACK/SmackBasedPrj/testcases/benchmark/a-gy5sgw6p.bc
Running llvm2bpl /home/clexma/Desktop/Disk_D/Tools/SMACK/SmackBasedPrj/testcases/benchmark/b-x5y9v2xv.bc -bpl ../svcomp/memsafety//test-0236.bpl -warn-type unsound -sea-dsa=ci -source-loc-syms -entry-points main -ll ../svcomp/memsafety//test-0236_IR.ll -mem-mod-impls -llvm-assumes=none -sh-mem-leak
[regions] for: @main.list = internal global %struct.L0* null, align 8, !dbg !0
   at instruction:   store %struct.L0* null, %struct.L0** @main.list
   in function: __SMACK_static_init
 [regions]   using region: <Node:%struct.L0*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %10 = getelementptr inbounds %struct.L0, %struct.L0* %3, i32 0, i32 0, !dbg !70, !verifier.code !60
   in function: l0_insert
 [regions]   using region: <Node:%struct.L0**>[0,8]{LA}
    found overlap at index 0: <Node:%struct.L0*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for: %struct.L0** %0
   at instruction:   store %struct.L0** %0, %struct.L0*** %10, align 8, !dbg !71, !verifier.code !60
   in function: l0_insert
 [regions]   using region: <Node:%struct.L0*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %12 = getelementptr inbounds %struct.L0, %struct.L0* %3, i32 0, i32 1, !dbg !73, !verifier.code !60
   in function: l0_insert
 [regions]   using region: <Node:%struct.L0*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for: %struct.L0** %0
   at instruction:   store %struct.L0** %0, %struct.L0*** %10, align 8, !dbg !71, !verifier.code !60
   in function: l0_insert
 [regions]   using region: <Node:%struct.L0*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %3 = getelementptr inbounds %struct.L0, %struct.L0* %.0, i32 0, i32 2, !dbg !62, !verifier.code !60
   in function: l0_destroy
 [regions]   using region: <Node:%struct.L1*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %5 = getelementptr inbounds %struct.L0, %struct.L0* %.0, i32 0, i32 1, !dbg !65, !verifier.code !60
   in function: l0_destroy
 [regions]   using region: <Node:%struct.L0*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %3 = getelementptr inbounds %struct.L1, %struct.L1* %.0, i32 0, i32 0, !dbg !62, !verifier.code !60
   in function: l1_destroy
 [regions]   using region: <Node:%struct.L2*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %5 = getelementptr inbounds %struct.L1, %struct.L1* %.0, i32 0, i32 1, !dbg !65, !verifier.code !60
   in function: l1_destroy
 [regions]   using region: <Node:%struct.L1*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %3 = getelementptr inbounds %struct.L2, %struct.L2* %.0, i32 0, i32 2, !dbg !62, !verifier.code !60
   in function: l2_destroy
 [regions]   using region: <Node:%struct.L3*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %5 = getelementptr inbounds %struct.L2, %struct.L2* %.0, i32 0, i32 1, !dbg !65, !verifier.code !60
   in function: l2_destroy
 [regions]   using region: <Node:%struct.L2*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %3 = getelementptr inbounds %struct.L3, %struct.L3* %.0, i32 0, i32 0, !dbg !62, !verifier.code !60
   in function: l3_destroy
 [regions]   using region: <Node:%struct.L4*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %5 = getelementptr inbounds %struct.L3, %struct.L3* %.0, i32 0, i32 1, !dbg !65, !verifier.code !60
   in function: l3_destroy
 [regions]   using region: <Node:%struct.L3*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %3 = getelementptr inbounds %struct.L4, %struct.L4* %.0, i32 0, i32 2, !dbg !62, !verifier.code !60
   in function: l4_destroy
 [regions]   using region: <Node:%struct.L5*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %6 = getelementptr inbounds %struct.L4, %struct.L4* %.0, i32 0, i32 1, !dbg !66, !verifier.code !60
   in function: l4_destroy
 [regions]   using region: <Node:%struct.L4*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %10 = getelementptr inbounds %struct.L1, %struct.L1* %3, i32 0, i32 2, !dbg !70, !verifier.code !60
   in function: l1_insert
 [regions]   using region: <Node:%struct.L1**>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for: %struct.L1** %0
   at instruction:   store %struct.L1** %0, %struct.L1*** %10, align 8, !dbg !71, !verifier.code !60
   in function: l1_insert
 [regions]   using region: <Node:%struct.L1*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %12 = getelementptr inbounds %struct.L1, %struct.L1* %3, i32 0, i32 1, !dbg !73, !verifier.code !60
   in function: l1_insert
 [regions]   using region: <Node:%struct.L1*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for: %struct.L1** %0
   at instruction:   store %struct.L1** %0, %struct.L1*** %10, align 8, !dbg !71, !verifier.code !60
   in function: l1_insert
 [regions]   using region: <Node:%struct.L1*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %10 = getelementptr inbounds %struct.L2, %struct.L2* %3, i32 0, i32 0, !dbg !70, !verifier.code !60
   in function: l2_insert
 [regions]   using region: <Node:%struct.L2**>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for: %struct.L2** %0
   at instruction:   store %struct.L2** %0, %struct.L2*** %10, align 8, !dbg !71, !verifier.code !60
   in function: l2_insert
 [regions]   using region: <Node:%struct.L2*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %12 = getelementptr inbounds %struct.L2, %struct.L2* %3, i32 0, i32 1, !dbg !73, !verifier.code !60
   in function: l2_insert
 [regions]   using region: <Node:%struct.L2*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for: %struct.L2** %0
   at instruction:   store %struct.L2** %0, %struct.L2*** %10, align 8, !dbg !71, !verifier.code !60
   in function: l2_insert
 [regions]   using region: <Node:%struct.L2*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %10 = getelementptr inbounds %struct.L3, %struct.L3* %3, i32 0, i32 2, !dbg !70, !verifier.code !60
   in function: l3_insert
 [regions]   using region: <Node:%struct.L3**>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for: %struct.L3** %0
   at instruction:   store %struct.L3** %0, %struct.L3*** %10, align 8, !dbg !71, !verifier.code !60
   in function: l3_insert
 [regions]   using region: <Node:%struct.L3*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %12 = getelementptr inbounds %struct.L3, %struct.L3* %3, i32 0, i32 1, !dbg !73, !verifier.code !60
   in function: l3_insert
 [regions]   using region: <Node:%struct.L3*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for: %struct.L3** %0
   at instruction:   store %struct.L3** %0, %struct.L3*** %10, align 8, !dbg !71, !verifier.code !60
   in function: l3_insert
 [regions]   using region: <Node:%struct.L3*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %6 = getelementptr inbounds %struct.L4, %struct.L4* %3, i32 0, i32 2, !dbg !64, !verifier.code !60
   in function: l4_insert
 [regions]   using region: <Node:%struct.L5*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %8 = getelementptr inbounds %struct.L4, %struct.L4* %3, i32 0, i32 2, !dbg !67, !verifier.code !60
   in function: l4_insert
 [regions]   using region: <Node:%struct.L5*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %10 = bitcast %struct.L5* %9 to i8**, !dbg !68, !verifier.code !60
   in function: l4_insert
 [regions]   using region: <Node:i8*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %11 = getelementptr inbounds %struct.L4, %struct.L4* %3, i32 0, i32 0, !dbg !70, !verifier.code !60
   in function: l4_insert
 [regions]   using region: <Node:%struct.L4**>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for: %struct.L4** %0
   at instruction:   store %struct.L4** %0, %struct.L4*** %11, align 8, !dbg !71, !verifier.code !60
   in function: l4_insert
 [regions]   using region: <Node:%struct.L4*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %13 = getelementptr inbounds %struct.L4, %struct.L4* %3, i32 0, i32 1, !dbg !73, !verifier.code !60
   in function: l4_insert
 [regions]   using region: <Node:%struct.L4*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for: %struct.L4** %0
   at instruction:   store %struct.L4** %0, %struct.L4*** %11, align 8, !dbg !71, !verifier.code !60
   in function: l4_insert
 [regions]   using region: <Node:%struct.L4*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %4 = call noalias i8* @malloc(i64 %3) #6, !dbg !66, !verifier.code !63 with length 4294967295
   in function: calloc_model
 [regions]   using region: <Node:i8>[0,4294967295]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 [regions] for: @main.list = internal global %struct.L0* null, align 8, !dbg !0
   at instruction:   store %struct.L0* null, %struct.L0** @main.list
   in function: __SMACK_static_init
 [regions]   using region: <Node:%struct.L0*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 We are now translating the program to boogie...
 Analyzing globals...
 -------INSERT: Global Variables main.list
 Analyzing functions...
 Analyzing function: main
 -------INSERT: Global Variables main
 Analyzing function body: main
 Generating body for main
 visitBasicBlock
 visitBranch
 visitBasicBlock
 visitCall
 smackrep call
 visitBranch
 visitBasicBlock
 visitCall
 smackrep call
 visitCmp
 visitBranch
 visitBasicBlock
 visitLoad
 [regions] for: @main.list = internal global %struct.L0* null, align 8, !dbg !0
   at instruction:   store %struct.L0* null, %struct.L0** @main.list
   in function: __SMACK_static_init
 [regions]   using region: <Node:%struct.L0*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitCall
 smackrep call
 visitReturn
 
 insert initial SH to main
 Finished analyzing function: main
 
 Analyzing function: l0_insert
 -------INSERT: Global Variables l0_insert
 Analyzing function body: l0_insert
 Generating body for l0_insert
 visitBasicBlock
 visitDbgValue
 visitCall
 smackrep call
 visitCast
 visitCast not vector
 visitDbgValue
 visitBranch
 visitBasicBlock
 visitGetElementPtr
 visitCall
 smackrep call
 visitBranch
 visitBasicBlock
 visitCall
 smackrep call
 visitCmp
 visitBranch
 visitBasicBlock
 visitGetElementPtr
 visitStore
 [regions] for:   %10 = getelementptr inbounds %struct.L0, %struct.L0* %3, i32 0, i32 0, !dbg !70, !verifier.code !60
   in function: l0_insert
 [regions]   using region: <Node:%struct.L0**>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %10 = getelementptr inbounds %struct.L0, %struct.L0* %3, i32 0, i32 0, !dbg !70, !verifier.code !60
   in function: l0_insert
 [regions]   using region: <Node:%struct.L0**>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitLoad
 [regions] for: %struct.L0** %0
   at instruction:   store %struct.L0** %0, %struct.L0*** %10, align 8, !dbg !71, !verifier.code !60
   in function: l0_insert
 [regions]   using region: <Node:%struct.L0*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitGetElementPtr
 visitStore
 [regions] for:   %12 = getelementptr inbounds %struct.L0, %struct.L0* %3, i32 0, i32 1, !dbg !73, !verifier.code !60
   in function: l0_insert
 [regions]   using region: <Node:%struct.L0*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %12 = getelementptr inbounds %struct.L0, %struct.L0* %3, i32 0, i32 1, !dbg !73, !verifier.code !60
   in function: l0_insert
 [regions]   using region: <Node:%struct.L0*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitStore
 [regions] for: %struct.L0** %0
   at instruction:   store %struct.L0** %0, %struct.L0*** %10, align 8, !dbg !71, !verifier.code !60
   in function: l0_insert
 [regions]   using region: <Node:%struct.L0*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 [regions] for: %struct.L0** %0
   at instruction:   store %struct.L0** %0, %struct.L0*** %10, align 8, !dbg !71, !verifier.code !60
   in function: l0_insert
 [regions]   using region: <Node:%struct.L0*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitReturn
 
 Finished analyzing function: l0_insert
 
 Analyzing function: __VERIFIER_nondet_int
 -------INSERT: Global Variables __VERIFIER_nondet_int
 Analyzing function: l0_destroy
 -------INSERT: Global Variables l0_destroy
 Analyzing function body: l0_destroy
 Generating body for l0_destroy
 visitBasicBlock
 visitDbgValue
 visitBranch
 visitBasicBlock
 visitPHINode
 visitDbgValue
 visitGetElementPtr
 visitLoad
 [regions] for:   %3 = getelementptr inbounds %struct.L0, %struct.L0* %.0, i32 0, i32 2, !dbg !62, !verifier.code !60
   in function: l0_destroy
 [regions]   using region: <Node:%struct.L1*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitCall
 smackrep call
 visitGetElementPtr
 visitLoad
 [regions] for:   %5 = getelementptr inbounds %struct.L0, %struct.L0* %.0, i32 0, i32 1, !dbg !65, !verifier.code !60
   in function: l0_destroy
 [regions]   using region: <Node:%struct.L0*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitDbgValue
 visitCast
 visitCast not vector
 visitCall
 smackrep call
 visitDbgValue
 visitBranch
 visitBasicBlock
 visitCmp
 visitBranch
 visitBasicBlock
 visitReturn
 visitBasicBlock
 visitBranch
 
 Finished analyzing function: l0_destroy
 
 Analyzing function: llvm.dbg.declare
 -------INSERT: Global Variables llvm.dbg.declare
 Analyzing function: l1_destroy
 -------INSERT: Global Variables l1_destroy
 Analyzing function body: l1_destroy
 Generating body for l1_destroy
 visitBasicBlock
 visitDbgValue
 visitBranch
 visitBasicBlock
 visitPHINode
 visitDbgValue
 visitGetElementPtr
 visitLoad
 [regions] for:   %3 = getelementptr inbounds %struct.L1, %struct.L1* %.0, i32 0, i32 0, !dbg !62, !verifier.code !60
   in function: l1_destroy
 [regions]   using region: <Node:%struct.L2*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitCall
 smackrep call
 visitGetElementPtr
 visitLoad
 [regions] for:   %5 = getelementptr inbounds %struct.L1, %struct.L1* %.0, i32 0, i32 1, !dbg !65, !verifier.code !60
   in function: l1_destroy
 [regions]   using region: <Node:%struct.L1*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitDbgValue
 visitCast
 visitCast not vector
 visitCall
 smackrep call
 visitDbgValue
 visitBranch
 visitBasicBlock
 visitCmp
 visitBranch
 visitBasicBlock
 visitReturn
 visitBasicBlock
 visitBranch
 
 Finished analyzing function: l1_destroy
 
 Analyzing function: free_
 -------INSERT: Global Variables free_
 Analyzing function: l2_destroy
 -------INSERT: Global Variables l2_destroy
 Analyzing function body: l2_destroy
 Generating body for l2_destroy
 visitBasicBlock
 visitDbgValue
 visitBranch
 visitBasicBlock
 visitPHINode
 visitDbgValue
 visitGetElementPtr
 visitLoad
 [regions] for:   %3 = getelementptr inbounds %struct.L2, %struct.L2* %.0, i32 0, i32 2, !dbg !62, !verifier.code !60
   in function: l2_destroy
 [regions]   using region: <Node:%struct.L3*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitCall
 smackrep call
 visitGetElementPtr
 visitLoad
 [regions] for:   %5 = getelementptr inbounds %struct.L2, %struct.L2* %.0, i32 0, i32 1, !dbg !65, !verifier.code !60
   in function: l2_destroy
 [regions]   using region: <Node:%struct.L2*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitDbgValue
 visitCast
 visitCast not vector
 visitCall
 smackrep call
 visitDbgValue
 visitBranch
 visitBasicBlock
 visitCmp
 visitBranch
 visitBasicBlock
 visitReturn
 visitBasicBlock
 visitBranch
 
 Finished analyzing function: l2_destroy
 
 Analyzing function: l3_destroy
 -------INSERT: Global Variables l3_destroy
 Analyzing function body: l3_destroy
 Generating body for l3_destroy
 visitBasicBlock
 visitDbgValue
 visitBranch
 visitBasicBlock
 visitPHINode
 visitDbgValue
 visitGetElementPtr
 visitLoad
 [regions] for:   %3 = getelementptr inbounds %struct.L3, %struct.L3* %.0, i32 0, i32 0, !dbg !62, !verifier.code !60
   in function: l3_destroy
 [regions]   using region: <Node:%struct.L4*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitCall
 smackrep call
 visitGetElementPtr
 visitLoad
 [regions] for:   %5 = getelementptr inbounds %struct.L3, %struct.L3* %.0, i32 0, i32 1, !dbg !65, !verifier.code !60
   in function: l3_destroy
 [regions]   using region: <Node:%struct.L3*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitDbgValue
 visitCast
 visitCast not vector
 visitCall
 smackrep call
 visitDbgValue
 visitBranch
 visitBasicBlock
 visitCmp
 visitBranch
 visitBasicBlock
 visitReturn
 visitBasicBlock
 visitBranch
 
 Finished analyzing function: l3_destroy
 
 Analyzing function: l4_destroy
 -------INSERT: Global Variables l4_destroy
 Analyzing function body: l4_destroy
 Generating body for l4_destroy
 visitBasicBlock
 visitDbgValue
 visitBranch
 visitBasicBlock
 visitPHINode
 visitDbgValue
 visitGetElementPtr
 visitLoad
 [regions] for:   %3 = getelementptr inbounds %struct.L4, %struct.L4* %.0, i32 0, i32 2, !dbg !62, !verifier.code !60
   in function: l4_destroy
 [regions]   using region: <Node:%struct.L5*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitCast
 visitCast not vector
 visitCall
 smackrep call
 visitGetElementPtr
 visitLoad
 [regions] for:   %6 = getelementptr inbounds %struct.L4, %struct.L4* %.0, i32 0, i32 1, !dbg !66, !verifier.code !60
   in function: l4_destroy
 [regions]   using region: <Node:%struct.L4*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitDbgValue
 visitCast
 visitCast not vector
 visitCall
 smackrep call
 visitDbgValue
 visitBranch
 visitBasicBlock
 visitCmp
 visitBranch
 visitBasicBlock
 visitReturn
 visitBasicBlock
 visitBranch
 
 Finished analyzing function: l4_destroy
 
 Analyzing function: zalloc_or_die
 -------INSERT: Global Variables zalloc_or_die
 Analyzing function body: zalloc_or_die
 Generating body for zalloc_or_die
 visitBasicBlock
 visitDbgValue
 visitCast
 visitCast not vector
 visitCall
 smackrep call
 visitDbgValue
 visitCmp
 visitBranch
 visitBasicBlock
 visitReturn
 visitBasicBlock
 visitCall
 smackrep call
 visitUnreachable
 
 Finished analyzing function: zalloc_or_die
 
 Analyzing function: l1_insert
 -------INSERT: Global Variables l1_insert
 Analyzing function body: l1_insert
 Generating body for l1_insert
 visitBasicBlock
 visitDbgValue
 visitCall
 smackrep call
 visitCast
 visitCast not vector
 visitDbgValue
 visitBranch
 visitBasicBlock
 visitGetElementPtr
 visitCall
 smackrep call
 visitBranch
 visitBasicBlock
 visitCall
 smackrep call
 visitCmp
 visitBranch
 visitBasicBlock
 visitGetElementPtr
 visitStore
 [regions] for:   %10 = getelementptr inbounds %struct.L1, %struct.L1* %3, i32 0, i32 2, !dbg !70, !verifier.code !60
   in function: l1_insert
 [regions]   using region: <Node:%struct.L1**>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %10 = getelementptr inbounds %struct.L1, %struct.L1* %3, i32 0, i32 2, !dbg !70, !verifier.code !60
   in function: l1_insert
 [regions]   using region: <Node:%struct.L1**>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitLoad
 [regions] for: %struct.L1** %0
   at instruction:   store %struct.L1** %0, %struct.L1*** %10, align 8, !dbg !71, !verifier.code !60
   in function: l1_insert
 [regions]   using region: <Node:%struct.L1*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitGetElementPtr
 visitStore
 [regions] for:   %12 = getelementptr inbounds %struct.L1, %struct.L1* %3, i32 0, i32 1, !dbg !73, !verifier.code !60
   in function: l1_insert
 [regions]   using region: <Node:%struct.L1*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %12 = getelementptr inbounds %struct.L1, %struct.L1* %3, i32 0, i32 1, !dbg !73, !verifier.code !60
   in function: l1_insert
 [regions]   using region: <Node:%struct.L1*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitStore
 [regions] for: %struct.L1** %0
   at instruction:   store %struct.L1** %0, %struct.L1*** %10, align 8, !dbg !71, !verifier.code !60
   in function: l1_insert
 [regions]   using region: <Node:%struct.L1*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 [regions] for: %struct.L1** %0
   at instruction:   store %struct.L1** %0, %struct.L1*** %10, align 8, !dbg !71, !verifier.code !60
   in function: l1_insert
 [regions]   using region: <Node:%struct.L1*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitReturn
 
 Finished analyzing function: l1_insert
 
 Analyzing function: l2_insert
 -------INSERT: Global Variables l2_insert
 Analyzing function body: l2_insert
 Generating body for l2_insert
 visitBasicBlock
 visitDbgValue
 visitCall
 smackrep call
 visitCast
 visitCast not vector
 visitDbgValue
 visitBranch
 visitBasicBlock
 visitGetElementPtr
 visitCall
 smackrep call
 visitBranch
 visitBasicBlock
 visitCall
 smackrep call
 visitCmp
 visitBranch
 visitBasicBlock
 visitGetElementPtr
 visitStore
 [regions] for:   %10 = getelementptr inbounds %struct.L2, %struct.L2* %3, i32 0, i32 0, !dbg !70, !verifier.code !60
   in function: l2_insert
 [regions]   using region: <Node:%struct.L2**>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %10 = getelementptr inbounds %struct.L2, %struct.L2* %3, i32 0, i32 0, !dbg !70, !verifier.code !60
   in function: l2_insert
 [regions]   using region: <Node:%struct.L2**>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitLoad
 [regions] for: %struct.L2** %0
   at instruction:   store %struct.L2** %0, %struct.L2*** %10, align 8, !dbg !71, !verifier.code !60
   in function: l2_insert
 [regions]   using region: <Node:%struct.L2*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitGetElementPtr
 visitStore
 [regions] for:   %12 = getelementptr inbounds %struct.L2, %struct.L2* %3, i32 0, i32 1, !dbg !73, !verifier.code !60
   in function: l2_insert
 [regions]   using region: <Node:%struct.L2*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %12 = getelementptr inbounds %struct.L2, %struct.L2* %3, i32 0, i32 1, !dbg !73, !verifier.code !60
   in function: l2_insert
 [regions]   using region: <Node:%struct.L2*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitStore
 [regions] for: %struct.L2** %0
   at instruction:   store %struct.L2** %0, %struct.L2*** %10, align 8, !dbg !71, !verifier.code !60
   in function: l2_insert
 [regions]   using region: <Node:%struct.L2*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 [regions] for: %struct.L2** %0
   at instruction:   store %struct.L2** %0, %struct.L2*** %10, align 8, !dbg !71, !verifier.code !60
   in function: l2_insert
 [regions]   using region: <Node:%struct.L2*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitReturn
 
 Finished analyzing function: l2_insert
 
 Analyzing function: l3_insert
 -------INSERT: Global Variables l3_insert
 Analyzing function body: l3_insert
 Generating body for l3_insert
 visitBasicBlock
 visitDbgValue
 visitCall
 smackrep call
 visitCast
 visitCast not vector
 visitDbgValue
 visitBranch
 visitBasicBlock
 visitGetElementPtr
 visitCall
 smackrep call
 visitBranch
 visitBasicBlock
 visitCall
 smackrep call
 visitCmp
 visitBranch
 visitBasicBlock
 visitGetElementPtr
 visitStore
 [regions] for:   %10 = getelementptr inbounds %struct.L3, %struct.L3* %3, i32 0, i32 2, !dbg !70, !verifier.code !60
   in function: l3_insert
 [regions]   using region: <Node:%struct.L3**>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %10 = getelementptr inbounds %struct.L3, %struct.L3* %3, i32 0, i32 2, !dbg !70, !verifier.code !60
   in function: l3_insert
 [regions]   using region: <Node:%struct.L3**>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitLoad
 [regions] for: %struct.L3** %0
   at instruction:   store %struct.L3** %0, %struct.L3*** %10, align 8, !dbg !71, !verifier.code !60
   in function: l3_insert
 [regions]   using region: <Node:%struct.L3*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitGetElementPtr
 visitStore
 [regions] for:   %12 = getelementptr inbounds %struct.L3, %struct.L3* %3, i32 0, i32 1, !dbg !73, !verifier.code !60
   in function: l3_insert
 [regions]   using region: <Node:%struct.L3*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %12 = getelementptr inbounds %struct.L3, %struct.L3* %3, i32 0, i32 1, !dbg !73, !verifier.code !60
   in function: l3_insert
 [regions]   using region: <Node:%struct.L3*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitStore
 [regions] for: %struct.L3** %0
   at instruction:   store %struct.L3** %0, %struct.L3*** %10, align 8, !dbg !71, !verifier.code !60
   in function: l3_insert
 [regions]   using region: <Node:%struct.L3*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 [regions] for: %struct.L3** %0
   at instruction:   store %struct.L3** %0, %struct.L3*** %10, align 8, !dbg !71, !verifier.code !60
   in function: l3_insert
 [regions]   using region: <Node:%struct.L3*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitReturn
 
 Finished analyzing function: l3_insert
 
 Analyzing function: l4_insert
 -------INSERT: Global Variables l4_insert
 Analyzing function body: l4_insert
 Generating body for l4_insert
 visitBasicBlock
 visitDbgValue
 visitCall
 smackrep call
 visitCast
 visitCast not vector
 visitDbgValue
 visitCall
 smackrep call
 visitCast
 visitCast not vector
 visitGetElementPtr
 visitStore
 [regions] for:   %6 = getelementptr inbounds %struct.L4, %struct.L4* %3, i32 0, i32 2, !dbg !64, !verifier.code !60
   in function: l4_insert
 [regions]   using region: <Node:%struct.L5*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %6 = getelementptr inbounds %struct.L4, %struct.L4* %3, i32 0, i32 2, !dbg !64, !verifier.code !60
   in function: l4_insert
 [regions]   using region: <Node:%struct.L5*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitCast
 visitCast not vector
 visitGetElementPtr
 visitLoad
 [regions] for:   %8 = getelementptr inbounds %struct.L4, %struct.L4* %3, i32 0, i32 2, !dbg !67, !verifier.code !60
   in function: l4_insert
 [regions]   using region: <Node:%struct.L5*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitCast
 visitCast not vector
 visitStore
 [regions] for:   %10 = bitcast %struct.L5* %9 to i8**, !dbg !68, !verifier.code !60
   in function: l4_insert
 [regions]   using region: <Node:i8*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %10 = bitcast %struct.L5* %9 to i8**, !dbg !68, !verifier.code !60
   in function: l4_insert
 [regions]   using region: <Node:i8*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitGetElementPtr
 visitStore
 [regions] for:   %11 = getelementptr inbounds %struct.L4, %struct.L4* %3, i32 0, i32 0, !dbg !70, !verifier.code !60
   in function: l4_insert
 [regions]   using region: <Node:%struct.L4**>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %11 = getelementptr inbounds %struct.L4, %struct.L4* %3, i32 0, i32 0, !dbg !70, !verifier.code !60
   in function: l4_insert
 [regions]   using region: <Node:%struct.L4**>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitLoad
 [regions] for: %struct.L4** %0
   at instruction:   store %struct.L4** %0, %struct.L4*** %11, align 8, !dbg !71, !verifier.code !60
   in function: l4_insert
 [regions]   using region: <Node:%struct.L4*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitGetElementPtr
 visitStore
 [regions] for:   %13 = getelementptr inbounds %struct.L4, %struct.L4* %3, i32 0, i32 1, !dbg !73, !verifier.code !60
   in function: l4_insert
 [regions]   using region: <Node:%struct.L4*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %13 = getelementptr inbounds %struct.L4, %struct.L4* %3, i32 0, i32 1, !dbg !73, !verifier.code !60
   in function: l4_insert
 [regions]   using region: <Node:%struct.L4*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitStore
 [regions] for: %struct.L4** %0
   at instruction:   store %struct.L4** %0, %struct.L4*** %11, align 8, !dbg !71, !verifier.code !60
   in function: l4_insert
 [regions]   using region: <Node:%struct.L4*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 [regions] for: %struct.L4** %0
   at instruction:   store %struct.L4** %0, %struct.L4*** %11, align 8, !dbg !71, !verifier.code !60
   in function: l4_insert
 [regions]   using region: <Node:%struct.L4*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitReturn
 
 Finished analyzing function: l4_insert
 
 Analyzing function: calloc_model
 -------INSERT: Global Variables calloc_model
 Analyzing function body: calloc_model
 Generating body for calloc_model
 visitBasicBlock
 visitDbgValue
 visitDbgValue
 visitBinary
 visitCall
 smackrep call
 visitDbgValue
 visitBinary
 visitMemSet
 [regions] for:   %4 = call noalias i8* @malloc(i64 %3) #6, !dbg !66, !verifier.code !63 with length 4294967295
   in function: calloc_model
 [regions]   using region: <Node:i8>[0,4294967295]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitReturn
 
 Finished analyzing function: calloc_model
 
 Analyzing function: abort
 -------INSERT: Global Variables abort
 Analyzing function: malloc
 -------INSERT: Global Variables malloc
 Analyzing function: llvm.memset.p0i8.i64
 -------INSERT: Global Variables llvm.memset.p0i8.i64
 Analyzing function: llvm.dbg.value
 -------INSERT: Global Variables llvm.dbg.value
 Analyzing function: __SMACK_static_init
 -------INSERT: Global Variables __SMACK_static_init
 Analyzing function body: __SMACK_static_init
 Generating body for __SMACK_static_init
 visitBasicBlock
 visitStore
 [regions] for: @main.list = internal global %struct.L0* null, align 8, !dbg !0
   at instruction:   store %struct.L0* null, %struct.L0** @main.list
   in function: __SMACK_static_init
 [regions]   using region: <Node:%struct.L0*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 [regions] for: @main.list = internal global %struct.L0* null, align 8, !dbg !0
   at instruction:   store %struct.L0* null, %struct.L0** @main.list
   in function: __SMACK_static_init
 [regions]   using region: <Node:%struct.L0*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitReturn
 
 Finished analyzing function: __SMACK_static_init
 
 Start Analyzing Prelude: main
 
 Start Analyzing Prelude: l0_insert
 
 Start Analyzing Prelude: __VERIFIER_nondet_int
 
 Start Analyzing Prelude: l0_destroy
 
 Start Analyzing Prelude: llvm.dbg.declare
 
 Start Analyzing Prelude: l1_destroy
 
 Start Analyzing Prelude: free_
 
 Start Analyzing Prelude: l2_destroy
 
 Start Analyzing Prelude: l3_destroy
 
 Start Analyzing Prelude: l4_destroy
 
 Start Analyzing Prelude: zalloc_or_die
 
 Start Analyzing Prelude: l1_insert
 
 Start Analyzing Prelude: l2_insert
 
 Start Analyzing Prelude: l3_insert
 
 Start Analyzing Prelude: l4_insert
 
 Start Analyzing Prelude: calloc_model
 
 Start Analyzing Prelude: abort
 
 Start Analyzing Prelude: malloc
 
 Start Analyzing Prelude: llvm.memset.p0i8.i64
 
 Start Analyzing Prelude: llvm.dbg.value
 
 Start Analyzing Prelude: __SMACK_static_init
 
 Start Analyzing Prelude: boogie_si_record_i32
 
 Start Analyzing Prelude: boogie_si_record_i64
 
 Start Analyzing Prelude: boogie_si_record_ref
 
 Start Analyzing Prelude: $initialize
 
 -----------------START MEMSAFE ANALYSIS---------------
 Begin verifying
 Adding procedure: main
 Empty block name founded in proc main
 Empty block name founded in proc main
 Empty block name founded in proc main
 Empty block name founded in proc main
 Empty block name founded in proc main
 Adding procedure: l0_insert
 Empty block name founded in proc l0_insert
 Empty block name founded in proc l0_insert
 Empty block name founded in proc l0_insert
 Empty block name founded in proc l0_insert
 Empty block name founded in proc l0_insert
 Adding procedure: __VERIFIER_nondet_int
 Empty blocks of proc __VERIFIER_nondet_int
 Adding procedure: l0_destroy
 Empty block name founded in proc l0_destroy
 Empty block name founded in proc l0_destroy
 Empty block name founded in proc l0_destroy
 Empty block name founded in proc l0_destroy
 Empty block name founded in proc l0_destroy
 Adding procedure: llvm.dbg.declare
 Empty blocks of proc llvm.dbg.declare
 Adding procedure: l1_destroy
 Empty block name founded in proc l1_destroy
 Empty block name founded in proc l1_destroy
 Empty block name founded in proc l1_destroy
 Empty block name founded in proc l1_destroy
 Empty block name founded in proc l1_destroy
 Adding procedure: free_
 Empty block name founded in proc free_
 Adding procedure: l2_destroy
 Empty block name founded in proc l2_destroy
 Empty block name founded in proc l2_destroy
 Empty block name founded in proc l2_destroy
 Empty block name founded in proc l2_destroy
 Empty block name founded in proc l2_destroy
 Adding procedure: l3_destroy
 Empty block name founded in proc l3_destroy
 Empty block name founded in proc l3_destroy
 Empty block name founded in proc l3_destroy
 Empty block name founded in proc l3_destroy
 Empty block name founded in proc l3_destroy
 Adding procedure: l4_destroy
 Empty block name founded in proc l4_destroy
 Empty block name founded in proc l4_destroy
 Empty block name founded in proc l4_destroy
 Empty block name founded in proc l4_destroy
 Empty block name founded in proc l4_destroy
 Adding procedure: zalloc_or_die
 Empty block name founded in proc zalloc_or_die
 Empty block name founded in proc zalloc_or_die
 Empty block name founded in proc zalloc_or_die
 Adding procedure: l1_insert
 Empty block name founded in proc l1_insert
 Empty block name founded in proc l1_insert
 Empty block name founded in proc l1_insert
 Empty block name founded in proc l1_insert
 Empty block name founded in proc l1_insert
 Adding procedure: l2_insert
 Empty block name founded in proc l2_insert
 Empty block name founded in proc l2_insert
 Empty block name founded in proc l2_insert
 Empty block name founded in proc l2_insert
 Empty block name founded in proc l2_insert
 Adding procedure: l3_insert
 Empty block name founded in proc l3_insert
 Empty block name founded in proc l3_insert
 Empty block name founded in proc l3_insert
 Empty block name founded in proc l3_insert
 Empty block name founded in proc l3_insert
 Adding procedure: l4_insert
 Empty block name founded in proc l4_insert
 Adding procedure: calloc_model
 Empty block name founded in proc calloc_model
 Adding procedure: abort
 Empty blocks of proc abort
 Adding procedure: malloc
 Empty block name founded in proc malloc
 Adding procedure: llvm.memset.p0i8.i64
 Empty blocks of proc llvm.memset.p0i8.i64
 Adding procedure: llvm.dbg.value
 Empty blocks of proc llvm.dbg.value
 Adding procedure: __SMACK_static_init
 Empty block name founded in proc __SMACK_static_init
 Adding procedure: boogie_si_record_i32
 Empty blocks of proc boogie_si_record_i32
 Adding procedure: boogie_si_record_i64
 Empty blocks of proc boogie_si_record_i64
 Adding procedure: boogie_si_record_ref
 Empty blocks of proc boogie_si_record_ref
 Adding procedure: $initialize
 Empty block name founded in proc $initialize
 inlining procedure: main
 $bb0_main_0 1 0
 New stmts! 
 call {:cexpr "smack:entry:main"} boogie_si_record_ref(main_main0);
 goto $bb1_main_0;
 
 $bb1_main_0 2 1
 New stmts! 
 
 New stmts! 
 goto $bb2_main_0;
 
 call l0_insert(main.list_main0);
 inlining procedure: l0_insert
 $bb0_l0_insert_0 2 1
 New stmts! 
 
 New stmts! 
 $p2_l0_insert0 := $bitcast.ref.ref($p1_l0_insert0);
 goto $bb1_l0_insert_0;
 
 call $p1_l0_insert0 := zalloc_or_die(24);
 inlining procedure: zalloc_or_die
 $bb0_zalloc_or_die_0 2 1
 New stmts! 
 call {:cexpr "zalloc_or_die:arg:size"} boogie_si_record_i32($i0_zalloc_or_die0);
 $i1_zalloc_or_die0 := $zext.i32.i64($i0_zalloc_or_die0);
 
 New stmts! 
 $i3_zalloc_or_die0 := $ne.ref($p2_zalloc_or_die0, $0.ref_zalloc_or_die0);
 assume true;
 goto $bb1_zalloc_or_die_0, $bb2_zalloc_or_die_0;
 
 call $p2_zalloc_or_die0 := calloc_model(1, $i1_zalloc_or_die0);
 
 Inlining procedure: calloc_model 0
 arguments: 
 	1 $i1_zalloc_or_die0 
 parameter: 
 	$i0_calloc_model0 $i1_calloc_model0 
 processing return block $bb0_calloc_model_0
 return param of 'call $p2_zalloc_or_die0 := calloc_model(1, $i1_zalloc_or_die0);': 
 	[$r_calloc_model0, ref32]
 return to: 
 	$p2_zalloc_or_die0
 Add assign statement: $p2_zalloc_or_die0 := $r_calloc_model0;
 Add goto relation: $bb4_zalloc_or_die_0 -> $bb3_zalloc_or_die_0
 Return block: $bb0_calloc_model_0:
   call {:cexpr "calloc_model:arg:nmemb"} boogie_si_record_i64($i0_calloc_model0);
   call {:cexpr "calloc_model:arg:size"} boogie_si_record_i64($i1_calloc_model0);
   $i2_calloc_model0 := $mul.i64($i0_calloc_model0, $i1_calloc_model0);
   call $p3_calloc_model0 := malloc($i2_calloc_model0);
   $i4_calloc_model0 := $mul.i64($i0_calloc_model0, $i1_calloc_model0);
   call $M.0_calloc_model0 := $memset.i8($M.0, $p3_calloc_model0, 0, $i4_calloc_model0, false);
   $r_calloc_model0 := $p3_calloc_model0;
   goto $bb4_zalloc_or_die_0;
 Return process block: $bb4_zalloc_or_die_0:
   $p2_zalloc_or_die0 := $r_calloc_model0;
   goto $bb3_zalloc_or_die_0;
 	add statement: $i0_calloc_model0 := 1;
 	add statement: $i1_calloc_model0 := $i1_zalloc_or_die0;
 Current block: $bb0_zalloc_or_die_0:
   call {:cexpr "zalloc_or_die:arg:size"} boogie_si_record_i32($i0_zalloc_or_die0);
   $i1_zalloc_or_die0 := $zext.i32.i64($i0_zalloc_or_die0);
   goto $bb5_zalloc_or_die_0;
 Pass block: $bb5_zalloc_or_die_0:
   $i0_calloc_model0 := 1;
   $i1_calloc_model0 := $i1_zalloc_or_die0;
   goto $bb0_calloc_model_0;
 $bb2_zalloc_or_die_0 1 0
 New stmts! 
 assume !(($i3_zalloc_or_die0 == 1));
 call abort();
 assume false;
 
 
 Inlining procedure: zalloc_or_die 0
 arguments: 
 	24 
 parameter: 
 	$i0_zalloc_or_die0 
 processing return block $bb1_zalloc_or_die_0
 return param of 'call $p1_l0_insert0 := zalloc_or_die(24);': 
 	[$r_zalloc_or_die0, ref32]
 return to: 
 	$p1_l0_insert0
 Add assign statement: $p1_l0_insert0 := $r_zalloc_or_die0;
 Add goto relation: $bb6_l0_insert_0 -> $bb5_l0_insert_0
 Return block: $bb1_zalloc_or_die_0:
   assume ($i3_zalloc_or_die0 == 1);
   $r_zalloc_or_die0 := $p2_zalloc_or_die0;
   goto $bb6_l0_insert_0;
 Return process block: $bb6_l0_insert_0:
   $p1_l0_insert0 := $r_zalloc_or_die0;
   goto $bb5_l0_insert_0;
 	add statement: $i0_zalloc_or_die0 := 24;
 Current block: $bb0_l0_insert_0:
   goto $bb7_l0_insert_0;
 Pass block: $bb7_l0_insert_0:
   $i0_zalloc_or_die0 := 24;
   goto $bb0_zalloc_or_die_0;
 $bb1_l0_insert_0 2 1
 New stmts! 
 $p3_l0_insert0 := $add.ref($add.ref($p2_l0_insert0, $mul.ref(0, 24)), $mul.ref(16, 1));
 
 New stmts! 
 goto $bb2_l0_insert_0;
 
 call l1_insert($p3_l0_insert0);
 inlining procedure: l1_insert
 $bb0_l1_insert_0 2 1
 New stmts! 
 
 New stmts! 
 $p2_l1_insert0 := $bitcast.ref.ref($p1_l1_insert0);
 goto $bb1_l1_insert_0;
 
 call $p1_l1_insert0 := zalloc_or_die(24);
 
 Inlining procedure: zalloc_or_die 1
 arguments: 
 	24 
 parameter: 
 	$i0_zalloc_or_die1 
 processing return block $bb1_zalloc_or_die_1
 return param of 'call $p1_l1_insert0 := zalloc_or_die(24);': 
 	[$r_zalloc_or_die1, ref32]
 return to: 
 	$p1_l1_insert0
 Add assign statement: $p1_l1_insert0 := $r_zalloc_or_die1;
 Add goto relation: $bb6_l1_insert_0 -> $bb5_l1_insert_0
 Return block: $bb1_zalloc_or_die_1:
   assume ($i3_zalloc_or_die1 == 1);
   $r_zalloc_or_die1 := $p2_zalloc_or_die1;
   goto $bb6_l1_insert_0;
 Return process block: $bb6_l1_insert_0:
   $p1_l1_insert0 := $r_zalloc_or_die1;
   goto $bb5_l1_insert_0;
 	add statement: $i0_zalloc_or_die1 := 24;
 Current block: $bb0_l1_insert_0:
   goto $bb7_l1_insert_0;
 Pass block: $bb7_l1_insert_0:
   $i0_zalloc_or_die1 := 24;
   goto $bb0_zalloc_or_die_1;
 $bb1_l1_insert_0 2 1
 New stmts! 
 $p3_l1_insert0 := $add.ref($add.ref($p2_l1_insert0, $mul.ref(0, 24)), $mul.ref(0, 1));
 
 New stmts! 
 goto $bb2_l1_insert_0;
 
 call l2_insert($p3_l1_insert0);
 
 Inlining procedure: l2_insert 0
 arguments: 
 	$p3_l1_insert0 
 parameter: 
 	$p0_l2_insert0 
 processing return block $bb4_l2_insert_0
 return param of 'call l2_insert($p3_l1_insert0);': 
 	return to: 
 	Add goto relation: $bb9_l1_insert_0 -> $bb8_l1_insert_0
 Return block: $bb4_l2_insert_0:
   assume !(($i5_l2_insert0 == 1));
   $p6_l2_insert0 := $add.ref($add.ref($p2_l2_insert0, $mul.ref(0, 24)), $mul.ref(0, 1));
   $M.0 := $store.ref($M.0, $p6_l2_insert0, $p0_l2_insert0);
   $p7_l2_insert0 := $load.ref($M.0, $p0_l2_insert0);
   $p8_l2_insert0 := $add.ref($add.ref($p2_l2_insert0, $mul.ref(0, 24)), $mul.ref(8, 1));
   $M.0 := $store.ref($M.0, $p8_l2_insert0, $p7_l2_insert0);
   $M.0 := $store.ref($M.0, $p0_l2_insert0, $p1_l2_insert0);
   goto $bb9_l1_insert_0;
 Return process block: $bb9_l1_insert_0:
   goto $bb8_l1_insert_0;
 	add statement: $p0_l2_insert0 := $p3_l1_insert0;
 Current block: $bb1_l1_insert_0:
   $p3_l1_insert0 := $add.ref($add.ref($p2_l1_insert0, $mul.ref(0, 24)), $mul.ref(0, 1));
   goto $bb10_l1_insert_0;
 Pass block: $bb10_l1_insert_0:
   $p0_l2_insert0 := $p3_l1_insert0;
   goto $bb0_l2_insert_0;
 $bb2_l1_insert_0 1 0
 New stmts! 
 call $i4_l1_insert0 := __VERIFIER_nondet_int();
 call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4_l1_insert0);
 $i5_l1_insert0 := $ne.i32($i4_l1_insert0, 0);
 assume true;
 goto $bb3_l1_insert_0, $bb4_l1_insert_0;
 
 
 Inlining procedure: l1_insert 0
 arguments: 
 	$p3_l0_insert0 
 parameter: 
 	$p0_l1_insert0 
 processing return block $bb4_l1_insert_0
 return param of 'call l1_insert($p3_l0_insert0);': 
 	return to: 
 	Add goto relation: $bb9_l0_insert_0 -> $bb8_l0_insert_0
 Return block: $bb4_l1_insert_0:
   assume !(($i5_l1_insert0 == 1));
   $p6_l1_insert0 := $add.ref($add.ref($p2_l1_insert0, $mul.ref(0, 24)), $mul.ref(16, 1));
   $M.0 := $store.ref($M.0, $p6_l1_insert0, $p0_l1_insert0);
   $p7_l1_insert0 := $load.ref($M.0, $p0_l1_insert0);
   $p8_l1_insert0 := $add.ref($add.ref($p2_l1_insert0, $mul.ref(0, 24)), $mul.ref(8, 1));
   $M.0 := $store.ref($M.0, $p8_l1_insert0, $p7_l1_insert0);
   $M.0 := $store.ref($M.0, $p0_l1_insert0, $p1_l1_insert0);
   goto $bb9_l0_insert_0;
 Return process block: $bb9_l0_insert_0:
   goto $bb8_l0_insert_0;
 	add statement: $p0_l1_insert0 := $p3_l0_insert0;
 Current block: $bb1_l0_insert_0:
   $p3_l0_insert0 := $add.ref($add.ref($p2_l0_insert0, $mul.ref(0, 24)), $mul.ref(16, 1));
   goto $bb10_l0_insert_0;
 Pass block: $bb10_l0_insert_0:
   $p0_l1_insert0 := $p3_l0_insert0;
   goto $bb0_l1_insert_0;
 $bb2_l0_insert_0 1 0
 New stmts! 
 call $i4_l0_insert0 := __VERIFIER_nondet_int();
 call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4_l0_insert0);
 $i5_l0_insert0 := $ne.i32($i4_l0_insert0, 0);
 assume true;
 goto $bb3_l0_insert_0, $bb4_l0_insert_0;
 
 
 Inlining procedure: l0_insert 0
 arguments: 
 	main.list_main0 
 parameter: 
 	$p0_l0_insert0 
 processing return block $bb4_l0_insert_0
 return param of 'call l0_insert(main.list_main0);': 
 	return to: 
 	Add goto relation: $bb6_main_0 -> $bb5_main_0
 Return block: $bb4_l0_insert_0:
   assume !(($i5_l0_insert0 == 1));
   $p6_l0_insert0 := $add.ref($add.ref($p2_l0_insert0, $mul.ref(0, 24)), $mul.ref(0, 1));
   $M.0 := $store.ref($M.0, $p6_l0_insert0, $p0_l0_insert0);
   $p7_l0_insert0 := $load.ref($M.0, $p0_l0_insert0);
   $p8_l0_insert0 := $add.ref($add.ref($p2_l0_insert0, $mul.ref(0, 24)), $mul.ref(8, 1));
   $M.0 := $store.ref($M.0, $p8_l0_insert0, $p7_l0_insert0);
   $M.0 := $store.ref($M.0, $p0_l0_insert0, $p1_l0_insert0);
   goto $bb6_main_0;
 Return process block: $bb6_main_0:
   goto $bb5_main_0;
 	add statement: $p0_l0_insert0 := main.list_main0;
 Current block: $bb1_main_0:
   goto $bb7_main_0;
 Pass block: $bb7_main_0:
   $p0_l0_insert0 := main.list_main0;
   goto $bb0_l0_insert_0;
 $bb2_main_0 1 0
 New stmts! 
 call $i0_main0 := __VERIFIER_nondet_int();
 call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0_main0);
 $i1_main0 := $ne.i32($i0_main0, 0);
 assume true;
 goto $bb3_main_0, $bb4_main_0;
 
 $bb4_main_0 2 1
 New stmts! 
 assume !(($i1_main0 == 1));
 $p2_main0 := $load.ref($M.0, main.list_main0);
 
 New stmts! 
 $r_main0 := 0;
 return;
 
 call l0_destroy($p2_main0);
 inlining procedure: l0_destroy
 $bb1_l0_destroy_0 2 1
 New stmts! 
 $p2_l0_destroy0 := $add.ref($add.ref($p1_l0_destroy0, $mul.ref(0, 24)), $mul.ref(16, 1));
 $p3_l0_destroy0 := $load.ref($M.0, $p2_l0_destroy0);
 
 New stmts! 
 $p4_l0_destroy0 := $add.ref($add.ref($p1_l0_destroy0, $mul.ref(0, 24)), $mul.ref(8, 1));
 $p5_l0_destroy0 := $load.ref($M.0, $p4_l0_destroy0);
 $p6_l0_destroy0 := $bitcast.ref.ref($p1_l0_destroy0);
 call free_($p6_l0_destroy0);
 goto $bb2_l0_destroy_0;
 
 call l1_destroy($p3_l0_destroy0);
 inlining procedure: l1_destroy
 $bb1_l1_destroy_0 2 1
 New stmts! 
 $p2_l1_destroy0 := $add.ref($add.ref($p1_l1_destroy0, $mul.ref(0, 24)), $mul.ref(0, 1));
 $p3_l1_destroy0 := $load.ref($M.0, $p2_l1_destroy0);
 
 New stmts! 
 $p4_l1_destroy0 := $add.ref($add.ref($p1_l1_destroy0, $mul.ref(0, 24)), $mul.ref(8, 1));
 $p5_l1_destroy0 := $load.ref($M.0, $p4_l1_destroy0);
 $p6_l1_destroy0 := $bitcast.ref.ref($p1_l1_destroy0);
 call free_($p6_l1_destroy0);
 goto $bb2_l1_destroy_0;
 
 call l2_destroy($p3_l1_destroy0);
 
 Inlining procedure: l2_destroy 0
 arguments: 
 	$p3_l1_destroy0 
 parameter: 
 	$p0_l2_destroy0 
 processing return block $bb4_l2_destroy_0
 return param of 'call l2_destroy($p3_l1_destroy0);': 
 	return to: 
 	Add goto relation: $bb6_l1_destroy_0 -> $bb5_l1_destroy_0
 Return block: $bb4_l2_destroy_0:
   assume !(($i7_l2_destroy0 == 1));
   goto $bb6_l1_destroy_0;
 Return process block: $bb6_l1_destroy_0:
   goto $bb5_l1_destroy_0;
 	add statement: $p0_l2_destroy0 := $p3_l1_destroy0;
 Current block: $bb1_l1_destroy_0:
   $p2_l1_destroy0 := $add.ref($add.ref($p1_l1_destroy0, $mul.ref(0, 24)), $mul.ref(0, 1));
   $p3_l1_destroy0 := $load.ref($M.0, $p2_l1_destroy0);
   goto $bb7_l1_destroy_0;
 Pass block: $bb7_l1_destroy_0:
   $p0_l2_destroy0 := $p3_l1_destroy0;
   goto $bb0_l2_destroy_0;
 
 Inlining procedure: l1_destroy 0
 arguments: 
 	$p3_l0_destroy0 
 parameter: 
 	$p0_l1_destroy0 
 processing return block $bb4_l1_destroy_0
 return param of 'call l1_destroy($p3_l0_destroy0);': 
 	return to: 
 	Add goto relation: $bb6_l0_destroy_0 -> $bb5_l0_destroy_0
 Return block: $bb4_l1_destroy_0:
   assume !(($i7_l1_destroy0 == 1));
   goto $bb6_l0_destroy_0;
 Return process block: $bb6_l0_destroy_0:
   goto $bb5_l0_destroy_0;
 	add statement: $p0_l1_destroy0 := $p3_l0_destroy0;
 Current block: $bb1_l0_destroy_0:
   $p2_l0_destroy0 := $add.ref($add.ref($p1_l0_destroy0, $mul.ref(0, 24)), $mul.ref(16, 1));
   $p3_l0_destroy0 := $load.ref($M.0, $p2_l0_destroy0);
   goto $bb7_l0_destroy_0;
 Pass block: $bb7_l0_destroy_0:
   $p0_l1_destroy0 := $p3_l0_destroy0;
   goto $bb0_l1_destroy_0;
 
 Inlining procedure: l0_destroy 0
 arguments: 
 	$p2_main0 
 parameter: 
 	$p0_l0_destroy0 
 processing return block $bb4_l0_destroy_0
 return param of 'call l0_destroy($p2_main0);': 
 	return to: 
 	Add goto relation: $bb9_main_0 -> $bb8_main_0
 Return block: $bb4_l0_destroy_0:
   assume !(($i7_l0_destroy0 == 1));
   goto $bb9_main_0;
 Return process block: $bb9_main_0:
   goto $bb8_main_0;
 	add statement: $p0_l0_destroy0 := $p2_main0;
 Current block: $bb4_main_0:
   assume !(($i1_main0 == 1));
   $p2_main0 := $load.ref($M.0, main.list_main0);
   goto $bb10_main_0;
 Pass block: $bb10_main_0:
   $p0_l0_destroy0 := $p2_main0;
   goto $bb0_l0_destroy_0;
 Splitting return block
 =====================CENTER NEW===================
 procedure main()
   returns ($r_main0: i32)
 {
   var $i0_main0: i32;
   var $i1_main0: i1;
   var $p2_main0: ref;
   var $r_main0: i32;
   var $p0_l0_insert0: ref32;
   var $p1_l0_insert0: ref8;
   var $p2_l0_insert0: ref;
   var $p3_l0_insert0: ref;
   var $i4_l0_insert0: i32;
   var $i5_l0_insert0: i1;
   var $p6_l0_insert0: ref;
   var $p7_l0_insert0: ref;
   var $p8_l0_insert0: ref;
   var $i0_zalloc_or_die0: i32;
   var $i1_zalloc_or_die0: i64;
   var $p2_zalloc_or_die0: ref8;
   var $i3_zalloc_or_die0: i1;
   var $r_zalloc_or_die0: ref32;
   var $i0_calloc_model0: i64;
   var $i1_calloc_model0: i64;
   var $i2_calloc_model0: i64;
   var $p3_calloc_model0: ref8;
   var $i4_calloc_model0: i64;
   var $r_calloc_model0: ref32;
   var $p0_l1_insert0: ref32;
   var $p1_l1_insert0: ref8;
   var $p2_l1_insert0: ref;
   var $p3_l1_insert0: ref;
   var $i4_l1_insert0: i32;
   var $i5_l1_insert0: i1;
   var $p6_l1_insert0: ref;
   var $p7_l1_insert0: ref;
   var $p8_l1_insert0: ref;
   var $i0_zalloc_or_die1: i32;
   var $i1_zalloc_or_die1: i64;
   var $p2_zalloc_or_die1: ref8;
   var $i3_zalloc_or_die1: i1;
   var $r_zalloc_or_die1: ref32;
   var $p0_l2_insert0: ref32;
   var $p1_l2_insert0: ref8;
   var $p2_l2_insert0: ref;
   var $p3_l2_insert0: ref;
   var $i4_l2_insert0: i32;
   var $i5_l2_insert0: i1;
   var $p6_l2_insert0: ref;
   var $p7_l2_insert0: ref;
   var $p8_l2_insert0: ref;
   var $p0_l0_destroy0: ref32;
   var $p1_l0_destroy0: ref;
   var $p2_l0_destroy0: ref;
   var $p3_l0_destroy0: ref;
   var $p4_l0_destroy0: ref;
   var $p5_l0_destroy0: ref;
   var $p6_l0_destroy0: ref8;
   var $i7_l0_destroy0: i1;
   var $p0_l1_destroy0: ref32;
   var $p1_l1_destroy0: ref;
   var $p2_l1_destroy0: ref;
   var $p3_l1_destroy0: ref;
   var $p4_l1_destroy0: ref;
   var $p5_l1_destroy0: ref;
   var $p6_l1_destroy0: ref8;
   var $i7_l1_destroy0: i1;
   var $p0_l2_destroy0: ref32;
   var $p1_l2_destroy0: ref;
   var $p2_l2_destroy0: ref;
   var $p3_l2_destroy0: ref;
   var $p4_l2_destroy0: ref;
   var $p5_l2_destroy0: ref;
   var $p6_l2_destroy0: ref8;
   var $i7_l2_destroy0: i1;
 $bb0_main_0:
   call {:cexpr "smack:entry:main"} boogie_si_record_ref(main_main0);
   goto $bb1_main_0;
 $bb1_main_0:
   goto $bb7_main_0;
 $bb2_main_0:
   call $i0_main0 := __VERIFIER_nondet_int();
   call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0_main0);
   $i1_main0 := $ne.i32($i0_main0, 0);
   assume true;
   goto $bb3_main_0, $bb4_main_0;
 $bb3_main_0:
   assume ($i1_main0 == 1);
   goto $bb1_main_0;
 $bb4_main_0:
   assume !(($i1_main0 == 1));
   $p2_main0 := $load.ref($M.0, main.list_main0);
   goto $bb10_main_0;
 $bb6_main_0:
   goto $bb5_main_0;
 $bb7_main_0:
   $p0_l0_insert0 := main.list_main0;
   goto $bb0_l0_insert_0;
 $bb5_main_0:
   goto $bb2_main_0;
 $bb9_main_0:
   goto $bb8_main_0;
 $bb10_main_0:
   $p0_l0_destroy0 := $p2_main0;
   goto $bb0_l0_destroy_0;
 $bb8_main_0:
   $r_main0 := 0;
   return;
 $bb0_l0_insert_0:
   goto $bb7_l0_insert_0;
 $bb1_l0_insert_0:
   $p3_l0_insert0 := $add.ref($add.ref($p2_l0_insert0, $mul.ref(0, 24)), $mul.ref(16, 1));
   goto $bb10_l0_insert_0;
 $bb2_l0_insert_0:
   call $i4_l0_insert0 := __VERIFIER_nondet_int();
   call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4_l0_insert0);
   $i5_l0_insert0 := $ne.i32($i4_l0_insert0, 0);
   assume true;
   goto $bb3_l0_insert_0, $bb4_l0_insert_0;
 $bb3_l0_insert_0:
   assume ($i5_l0_insert0 == 1);
   goto $bb1_l0_insert_0;
 $bb4_l0_insert_0:
   assume !(($i5_l0_insert0 == 1));
   $p6_l0_insert0 := $add.ref($add.ref($p2_l0_insert0, $mul.ref(0, 24)), $mul.ref(0, 1));
   $M.0 := $store.ref($M.0, $p6_l0_insert0, $p0_l0_insert0);
   $p7_l0_insert0 := $load.ref($M.0, $p0_l0_insert0);
   $p8_l0_insert0 := $add.ref($add.ref($p2_l0_insert0, $mul.ref(0, 24)), $mul.ref(8, 1));
   $M.0 := $store.ref($M.0, $p8_l0_insert0, $p7_l0_insert0);
   $M.0 := $store.ref($M.0, $p0_l0_insert0, $p1_l0_insert0);
   goto $bb6_main_0;
 $bb6_l0_insert_0:
   $p1_l0_insert0 := $r_zalloc_or_die0;
   goto $bb5_l0_insert_0;
 $bb7_l0_insert_0:
   $i0_zalloc_or_die0 := 24;
   goto $bb0_zalloc_or_die_0;
 $bb5_l0_insert_0:
   $p2_l0_insert0 := $bitcast.ref.ref($p1_l0_insert0);
   goto $bb1_l0_insert_0;
 $bb9_l0_insert_0:
   goto $bb8_l0_insert_0;
 $bb10_l0_insert_0:
   $p0_l1_insert0 := $p3_l0_insert0;
   goto $bb0_l1_insert_0;
 $bb8_l0_insert_0:
   goto $bb2_l0_insert_0;
 $bb0_zalloc_or_die_0:
   call {:cexpr "zalloc_or_die:arg:size"} boogie_si_record_i32($i0_zalloc_or_die0);
   $i1_zalloc_or_die0 := $zext.i32.i64($i0_zalloc_or_die0);
   goto $bb5_zalloc_or_die_0;
 $bb1_zalloc_or_die_0:
   assume ($i3_zalloc_or_die0 == 1);
   $r_zalloc_or_die0 := $p2_zalloc_or_die0;
   goto $bb6_l0_insert_0;
 $bb2_zalloc_or_die_0:
   assume !(($i3_zalloc_or_die0 == 1));
   call abort();
   assume false;
 $bb4_zalloc_or_die_0:
   $p2_zalloc_or_die0 := $r_calloc_model0;
   goto $bb3_zalloc_or_die_0;
 $bb5_zalloc_or_die_0:
   $i0_calloc_model0 := 1;
   $i1_calloc_model0 := $i1_zalloc_or_die0;
   goto $bb0_calloc_model_0;
 $bb3_zalloc_or_die_0:
   $i3_zalloc_or_die0 := $ne.ref($p2_zalloc_or_die0, $0.ref_zalloc_or_die0);
   assume true;
   goto $bb1_zalloc_or_die_0, $bb2_zalloc_or_die_0;
 $bb0_calloc_model_0:
   call {:cexpr "calloc_model:arg:nmemb"} boogie_si_record_i64($i0_calloc_model0);
   call {:cexpr "calloc_model:arg:size"} boogie_si_record_i64($i1_calloc_model0);
   $i2_calloc_model0 := $mul.i64($i0_calloc_model0, $i1_calloc_model0);
   call $p3_calloc_model0 := malloc($i2_calloc_model0);
   $i4_calloc_model0 := $mul.i64($i0_calloc_model0, $i1_calloc_model0);
   call $M.0_calloc_model0 := $memset.i8($M.0, $p3_calloc_model0, 0, $i4_calloc_model0, false);
   $r_calloc_model0 := $p3_calloc_model0;
   goto $bb4_zalloc_or_die_0;
 $bb0_l1_insert_0:
   goto $bb7_l1_insert_0;
 $bb1_l1_insert_0:
   $p3_l1_insert0 := $add.ref($add.ref($p2_l1_insert0, $mul.ref(0, 24)), $mul.ref(0, 1));
   goto $bb10_l1_insert_0;
 $bb2_l1_insert_0:
   call $i4_l1_insert0 := __VERIFIER_nondet_int();
   call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4_l1_insert0);
   $i5_l1_insert0 := $ne.i32($i4_l1_insert0, 0);
   assume true;
   goto $bb3_l1_insert_0, $bb4_l1_insert_0;
 $bb3_l1_insert_0:
   assume ($i5_l1_insert0 == 1);
   goto $bb1_l1_insert_0;
 $bb4_l1_insert_0:
   assume !(($i5_l1_insert0 == 1));
   $p6_l1_insert0 := $add.ref($add.ref($p2_l1_insert0, $mul.ref(0, 24)), $mul.ref(16, 1));
   $M.0 := $store.ref($M.0, $p6_l1_insert0, $p0_l1_insert0);
   $p7_l1_insert0 := $load.ref($M.0, $p0_l1_insert0);
   $p8_l1_insert0 := $add.ref($add.ref($p2_l1_insert0, $mul.ref(0, 24)), $mul.ref(8, 1));
   $M.0 := $store.ref($M.0, $p8_l1_insert0, $p7_l1_insert0);
   $M.0 := $store.ref($M.0, $p0_l1_insert0, $p1_l1_insert0);
   goto $bb9_l0_insert_0;
 $bb6_l1_insert_0:
   $p1_l1_insert0 := $r_zalloc_or_die1;
   goto $bb5_l1_insert_0;
 $bb7_l1_insert_0:
   $i0_zalloc_or_die1 := 24;
   goto $bb0_zalloc_or_die_1;
 $bb5_l1_insert_0:
   $p2_l1_insert0 := $bitcast.ref.ref($p1_l1_insert0);
   goto $bb1_l1_insert_0;
 $bb9_l1_insert_0:
   goto $bb8_l1_insert_0;
 $bb10_l1_insert_0:
   $p0_l2_insert0 := $p3_l1_insert0;
   goto $bb0_l2_insert_0;
 $bb8_l1_insert_0:
   goto $bb2_l1_insert_0;
 $bb0_zalloc_or_die_1:
   call {:cexpr "zalloc_or_die:arg:size"} boogie_si_record_i32($i0_zalloc_or_die1);
   $i1_zalloc_or_die1 := $zext.i32.i64($i0_zalloc_or_die1);
   call $p2_zalloc_or_die1 := calloc_model(1, $i1_zalloc_or_die1);
   $i3_zalloc_or_die1 := $ne.ref($p2_zalloc_or_die1, $0.ref_zalloc_or_die1);
   assume true;
   goto $bb1_zalloc_or_die_1, $bb2_zalloc_or_die_1;
 $bb1_zalloc_or_die_1:
   assume ($i3_zalloc_or_die1 == 1);
   $r_zalloc_or_die1 := $p2_zalloc_or_die1;
   goto $bb6_l1_insert_0;
 $bb2_zalloc_or_die_1:
   assume !(($i3_zalloc_or_die1 == 1));
   call abort();
   assume false;
 $bb0_l2_insert_0:
   call $p1_l2_insert0 := zalloc_or_die(24);
   $p2_l2_insert0 := $bitcast.ref.ref($p1_l2_insert0);
   goto $bb1_l2_insert_0;
 $bb1_l2_insert_0:
   $p3_l2_insert0 := $add.ref($add.ref($p2_l2_insert0, $mul.ref(0, 24)), $mul.ref(16, 1));
   call l3_insert($p3_l2_insert0);
   goto $bb2_l2_insert_0;
 $bb2_l2_insert_0:
   call $i4_l2_insert0 := __VERIFIER_nondet_int();
   call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4_l2_insert0);
   $i5_l2_insert0 := $ne.i32($i4_l2_insert0, 0);
   assume true;
   goto $bb3_l2_insert_0, $bb4_l2_insert_0;
 $bb3_l2_insert_0:
   assume ($i5_l2_insert0 == 1);
   goto $bb1_l2_insert_0;
 $bb4_l2_insert_0:
   assume !(($i5_l2_insert0 == 1));
   $p6_l2_insert0 := $add.ref($add.ref($p2_l2_insert0, $mul.ref(0, 24)), $mul.ref(0, 1));
   $M.0 := $store.ref($M.0, $p6_l2_insert0, $p0_l2_insert0);
   $p7_l2_insert0 := $load.ref($M.0, $p0_l2_insert0);
   $p8_l2_insert0 := $add.ref($add.ref($p2_l2_insert0, $mul.ref(0, 24)), $mul.ref(8, 1));
   $M.0 := $store.ref($M.0, $p8_l2_insert0, $p7_l2_insert0);
   $M.0 := $store.ref($M.0, $p0_l2_insert0, $p1_l2_insert0);
   goto $bb9_l1_insert_0;
 $bb0_l0_destroy_0:
   $p1_l0_destroy0 := $p0_l0_destroy0;
   goto $bb1_l0_destroy_0;
 $bb1_l0_destroy_0:
   $p2_l0_destroy0 := $add.ref($add.ref($p1_l0_destroy0, $mul.ref(0, 24)), $mul.ref(16, 1));
   $p3_l0_destroy0 := $load.ref($M.0, $p2_l0_destroy0);
   goto $bb7_l0_destroy_0;
 $bb2_l0_destroy_0:
   $i7_l0_destroy0 := $ne.ref($p5_l0_destroy0, $0.ref_l0_destroy0);
   assume true;
   goto $bb3_l0_destroy_0, $bb4_l0_destroy_0;
 $bb3_l0_destroy_0:
   assume ($i7_l0_destroy0 == 1);
   $p1_l0_destroy0 := $p5_l0_destroy0;
   goto $bb1_l0_destroy_0;
 $bb4_l0_destroy_0:
   assume !(($i7_l0_destroy0 == 1));
   goto $bb9_main_0;
 $bb6_l0_destroy_0:
   goto $bb5_l0_destroy_0;
 $bb7_l0_destroy_0:
   $p0_l1_destroy0 := $p3_l0_destroy0;
   goto $bb0_l1_destroy_0;
 $bb5_l0_destroy_0:
   $p4_l0_destroy0 := $add.ref($add.ref($p1_l0_destroy0, $mul.ref(0, 24)), $mul.ref(8, 1));
   $p5_l0_destroy0 := $load.ref($M.0, $p4_l0_destroy0);
   $p6_l0_destroy0 := $bitcast.ref.ref($p1_l0_destroy0);
   call free_($p6_l0_destroy0);
   goto $bb2_l0_destroy_0;
 $bb0_l1_destroy_0:
   $p1_l1_destroy0 := $p0_l1_destroy0;
   goto $bb1_l1_destroy_0;
 $bb1_l1_destroy_0:
   $p2_l1_destroy0 := $add.ref($add.ref($p1_l1_destroy0, $mul.ref(0, 24)), $mul.ref(0, 1));
   $p3_l1_destroy0 := $load.ref($M.0, $p2_l1_destroy0);
   goto $bb7_l1_destroy_0;
 $bb2_l1_destroy_0:
   $i7_l1_destroy0 := $ne.ref($p5_l1_destroy0, $0.ref_l1_destroy0);
   assume true;
   goto $bb3_l1_destroy_0, $bb4_l1_destroy_0;
 $bb3_l1_destroy_0:
   assume ($i7_l1_destroy0 == 1);
   $p1_l1_destroy0 := $p5_l1_destroy0;
   goto $bb1_l1_destroy_0;
 $bb4_l1_destroy_0:
   assume !(($i7_l1_destroy0 == 1));
   goto $bb6_l0_destroy_0;
 $bb6_l1_destroy_0:
   goto $bb5_l1_destroy_0;
 $bb7_l1_destroy_0:
   $p0_l2_destroy0 := $p3_l1_destroy0;
   goto $bb0_l2_destroy_0;
 $bb5_l1_destroy_0:
   $p4_l1_destroy0 := $add.ref($add.ref($p1_l1_destroy0, $mul.ref(0, 24)), $mul.ref(8, 1));
   $p5_l1_destroy0 := $load.ref($M.0, $p4_l1_destroy0);
   $p6_l1_destroy0 := $bitcast.ref.ref($p1_l1_destroy0);
   call free_($p6_l1_destroy0);
   goto $bb2_l1_destroy_0;
 $bb0_l2_destroy_0:
   $p1_l2_destroy0 := $p0_l2_destroy0;
   goto $bb1_l2_destroy_0;
 $bb1_l2_destroy_0:
   $p2_l2_destroy0 := $add.ref($add.ref($p1_l2_destroy0, $mul.ref(0, 24)), $mul.ref(16, 1));
   $p3_l2_destroy0 := $load.ref($M.0, $p2_l2_destroy0);
   call l3_destroy($p3_l2_destroy0);
   $p4_l2_destroy0 := $add.ref($add.ref($p1_l2_destroy0, $mul.ref(0, 24)), $mul.ref(8, 1));
   $p5_l2_destroy0 := $load.ref($M.0, $p4_l2_destroy0);
   $p6_l2_destroy0 := $bitcast.ref.ref($p1_l2_destroy0);
   call free_($p6_l2_destroy0);
   goto $bb2_l2_destroy_0;
 $bb2_l2_destroy_0:
   $i7_l2_destroy0 := $ne.ref($p5_l2_destroy0, $0.ref_l2_destroy0);
   assume true;
   goto $bb3_l2_destroy_0, $bb4_l2_destroy_0;
 $bb3_l2_destroy_0:
   assume ($i7_l2_destroy0 == 1);
   $p1_l2_destroy0 := $p5_l2_destroy0;
   goto $bb1_l2_destroy_0;
 $bb4_l2_destroy_0:
   assume !(($i7_l2_destroy0 == 1));
   goto $bb6_l1_destroy_0;
 }
 =====================CENTER NEW===================
 from bb: $bb0_main_0 to bb: $bb1_main_0 
 from bb: $bb1_main_0 to bb: $bb7_main_0 
 from bb: $bb2_main_0 to bb: $bb3_main_0 $bb4_main_0 
 from bb: $bb3_main_0 to bb: $bb1_main_0 
 from bb: $bb4_main_0 to bb: $bb10_main_0 
 from bb: $bb6_main_0 to bb: $bb5_main_0 
 from bb: $bb7_main_0 to bb: $bb0_l0_insert_0 
 from bb: $bb5_main_0 to bb: $bb2_main_0 
 from bb: $bb9_main_0 to bb: $bb8_main_0 
 from bb: $bb10_main_0 to bb: $bb0_l0_destroy_0 
 from bb: $bb0_l0_insert_0 to bb: $bb7_l0_insert_0 
 from bb: $bb1_l0_insert_0 to bb: $bb10_l0_insert_0 
 from bb: $bb2_l0_insert_0 to bb: $bb3_l0_insert_0 $bb4_l0_insert_0 
 from bb: $bb3_l0_insert_0 to bb: $bb1_l0_insert_0 
 from bb: $bb4_l0_insert_0 to bb: $bb6_main_0 
 from bb: $bb6_l0_insert_0 to bb: $bb5_l0_insert_0 
 from bb: $bb7_l0_insert_0 to bb: $bb0_zalloc_or_die_0 
 from bb: $bb5_l0_insert_0 to bb: $bb1_l0_insert_0 
 from bb: $bb9_l0_insert_0 to bb: $bb8_l0_insert_0 
 from bb: $bb10_l0_insert_0 to bb: $bb0_l1_insert_0 
 from bb: $bb8_l0_insert_0 to bb: $bb2_l0_insert_0 
 from bb: $bb0_zalloc_or_die_0 to bb: $bb5_zalloc_or_die_0 
 from bb: $bb1_zalloc_or_die_0 to bb: $bb6_l0_insert_0 
 from bb: $bb4_zalloc_or_die_0 to bb: $bb3_zalloc_or_die_0 
 from bb: $bb5_zalloc_or_die_0 to bb: $bb0_calloc_model_0 
 from bb: $bb3_zalloc_or_die_0 to bb: $bb1_zalloc_or_die_0 $bb2_zalloc_or_die_0 
 from bb: $bb0_calloc_model_0 to bb: $bb4_zalloc_or_die_0 
 from bb: $bb0_l1_insert_0 to bb: $bb7_l1_insert_0 
 from bb: $bb1_l1_insert_0 to bb: $bb10_l1_insert_0 
 from bb: $bb2_l1_insert_0 to bb: $bb3_l1_insert_0 $bb4_l1_insert_0 
 from bb: $bb3_l1_insert_0 to bb: $bb1_l1_insert_0 
 from bb: $bb4_l1_insert_0 to bb: $bb9_l0_insert_0 
 from bb: $bb6_l1_insert_0 to bb: $bb5_l1_insert_0 
 from bb: $bb7_l1_insert_0 to bb: $bb0_zalloc_or_die_1 
 from bb: $bb5_l1_insert_0 to bb: $bb1_l1_insert_0 
 from bb: $bb9_l1_insert_0 to bb: $bb8_l1_insert_0 
 from bb: $bb10_l1_insert_0 to bb: $bb0_l2_insert_0 
 from bb: $bb8_l1_insert_0 to bb: $bb2_l1_insert_0 
 from bb: $bb0_zalloc_or_die_1 to bb: $bb1_zalloc_or_die_1 $bb2_zalloc_or_die_1 
 from bb: $bb1_zalloc_or_die_1 to bb: $bb6_l1_insert_0 
 from bb: $bb0_l2_insert_0 to bb: $bb1_l2_insert_0 
 from bb: $bb1_l2_insert_0 to bb: $bb2_l2_insert_0 
 from bb: $bb2_l2_insert_0 to bb: $bb3_l2_insert_0 $bb4_l2_insert_0 
 from bb: $bb3_l2_insert_0 to bb: $bb1_l2_insert_0 
 from bb: $bb4_l2_insert_0 to bb: $bb9_l1_insert_0 
 from bb: $bb0_l0_destroy_0 to bb: $bb1_l0_destroy_0 
 from bb: $bb1_l0_destroy_0 to bb: $bb7_l0_destroy_0 
 from bb: $bb2_l0_destroy_0 to bb: $bb3_l0_destroy_0 $bb4_l0_destroy_0 
 from bb: $bb3_l0_destroy_0 to bb: $bb1_l0_destroy_0 
 from bb: $bb4_l0_destroy_0 to bb: $bb9_main_0 
 from bb: $bb6_l0_destroy_0 to bb: $bb5_l0_destroy_0 
 from bb: $bb7_l0_destroy_0 to bb: $bb0_l1_destroy_0 
 from bb: $bb5_l0_destroy_0 to bb: $bb2_l0_destroy_0 
 from bb: $bb0_l1_destroy_0 to bb: $bb1_l1_destroy_0 
 from bb: $bb1_l1_destroy_0 to bb: $bb7_l1_destroy_0 
 from bb: $bb2_l1_destroy_0 to bb: $bb3_l1_destroy_0 $bb4_l1_destroy_0 
 from bb: $bb3_l1_destroy_0 to bb: $bb1_l1_destroy_0 
 from bb: $bb4_l1_destroy_0 to bb: $bb6_l0_destroy_0 
 from bb: $bb6_l1_destroy_0 to bb: $bb5_l1_destroy_0 
 from bb: $bb7_l1_destroy_0 to bb: $bb0_l2_destroy_0 
 from bb: $bb5_l1_destroy_0 to bb: $bb2_l1_destroy_0 
 from bb: $bb0_l2_destroy_0 to bb: $bb1_l2_destroy_0 
 from bb: $bb1_l2_destroy_0 to bb: $bb2_l2_destroy_0 
 from bb: $bb2_l2_destroy_0 to bb: $bb3_l2_destroy_0 $bb4_l2_destroy_0 
 from bb: $bb3_l2_destroy_0 to bb: $bb1_l2_destroy_0 
 from bb: $bb4_l2_destroy_0 to bb: $bb6_l1_destroy_0 
 In $bb8_main_0
 [0mpop: $bb8_main_0
 [0mpop finished
 [0mIn $bb9_main_0
 [0mpop: $bb9_main_0
 [0mpop finished
 [0mIn $bb4_l0_destroy_0
 [0mpop: $bb4_l0_destroy_0
 [0mpop finished
 [0mIn $bb1_l0_destroy_0
 [0mpop: $bb3_l0_destroy_0
 [0mpop: $bb2_l0_destroy_0
 [0mpop: $bb5_l0_destroy_0
 [0mpop: $bb6_l0_destroy_0
 [0mpop: $bb4_l1_destroy_0
 [0mpop: $bb3_l1_destroy_0
 [0mpop: $bb2_l1_destroy_0
 [0mpop: $bb5_l1_destroy_0
 [0mpop: $bb6_l1_destroy_0
 [0mpop: $bb4_l2_destroy_0
 [0mpop: $bb3_l2_destroy_0
 [0mpop: $bb2_l2_destroy_0
 [0mpop: $bb1_l2_destroy_0
 [0mpop: $bb0_l2_destroy_0
 [0mpop: $bb7_l1_destroy_0
 [0mpop: $bb1_l1_destroy_0
 [0mpop: $bb0_l1_destroy_0
 [0mpop: $bb7_l0_destroy_0
 [0mpop: $bb1_l0_destroy_0
 [0mpop finished
 [0mIn $bb0_l0_destroy_0
 [0mpop: $bb0_l0_destroy_0
 [0mpop finished
 [0mIn $bb10_main_0
 [0mpop: $bb10_main_0
 [0mpop finished
 [0mIn $bb4_main_0
 [0mpop: $bb4_main_0
 [0mpop finished
 [0mIn $bb2_zalloc_or_die_1
 [0mpop: $bb2_zalloc_or_die_1
 [0mpop finished
 [0mIn $bb2_zalloc_or_die_0
 [0mpop: $bb2_zalloc_or_die_0
 [0mpop finished
 [0mIn $bb1_main_0
 [0mpop: $bb3_main_0
 [0mpop: $bb2_main_0
 [0mpop: $bb5_main_0
 [0mpop: $bb6_main_0
 [0mpop: $bb4_l0_insert_0
 [0mpop: $bb3_l0_insert_0
 [0mpop: $bb2_l0_insert_0
 [0mpop: $bb8_l0_insert_0
 [0mpop: $bb9_l0_insert_0
 [0mpop: $bb4_l1_insert_0
 [0mpop: $bb3_l1_insert_0
 [0mpop: $bb2_l1_insert_0
 [0mpop: $bb8_l1_insert_0
 [0mpop: $bb9_l1_insert_0
 [0mpop: $bb4_l2_insert_0
 [0mpop: $bb3_l2_insert_0
 [0mpop: $bb2_l2_insert_0
 [0mpop: $bb1_l2_insert_0
 [0mpop: $bb0_l2_insert_0
 [0mpop: $bb10_l1_insert_0
 [0mpop: $bb1_l1_insert_0
 [0mpop: $bb5_l1_insert_0
 [0mpop: $bb6_l1_insert_0
 [0mpop: $bb1_zalloc_or_die_1
 [0mpop: $bb0_zalloc_or_die_1
 [0mpop: $bb7_l1_insert_0
 [0mpop: $bb0_l1_insert_0
 [0mpop: $bb10_l0_insert_0
 [0mpop: $bb1_l0_insert_0
 [0mpop: $bb5_l0_insert_0
 [0mpop: $bb6_l0_insert_0
 [0mpop: $bb1_zalloc_or_die_0
 [0mpop: $bb3_zalloc_or_die_0
 [0mpop: $bb4_zalloc_or_die_0
 [0mpop: $bb0_calloc_model_0
 [0mpop: $bb5_zalloc_or_die_0
 [0mpop: $bb0_zalloc_or_die_0
 [0mpop: $bb7_l0_insert_0
 [0mpop: $bb0_l0_insert_0
 [0mpop: $bb7_main_0
 [0mpop: $bb1_main_0
 [0mpop finished
 [0mIn $bb0_main_0
 [0mpop: $bb0_main_0
 [0mpop finished
 [0mIn pro:$bb0_main_0 1 $bb1_main_0 
 In pro:$bb1_main_0 1 $bb7_main_0 
 In pro:$bb7_main_0 1 $bb0_l0_insert_0 
 In pro:$bb0_l0_insert_0 1 $bb7_l0_insert_0 
 In pro:$bb7_l0_insert_0 1 $bb0_zalloc_or_die_0 
 In pro:$bb0_zalloc_or_die_0 1 $bb5_zalloc_or_die_0 
 In pro:$bb5_zalloc_or_die_0 1 $bb0_calloc_model_0 
 In pro:$bb0_calloc_model_0 1 $bb4_zalloc_or_die_0 
 In pro:$bb4_zalloc_or_die_0 1 $bb3_zalloc_or_die_0 
 In pro:$bb3_zalloc_or_die_0 1 $bb1_zalloc_or_die_0 $bb2_zalloc_or_die_0 
 In pro:$bb1_zalloc_or_die_0 1 $bb6_l0_insert_0 
 In pro:$bb6_l0_insert_0 1 $bb5_l0_insert_0 
 In pro:$bb5_l0_insert_0 1 $bb1_l0_insert_0 
 In pro:$bb1_l0_insert_0 1 $bb10_l0_insert_0 
 In pro:$bb10_l0_insert_0 1 $bb0_l1_insert_0 
 In pro:$bb0_l1_insert_0 1 $bb7_l1_insert_0 
 In pro:$bb7_l1_insert_0 1 $bb0_zalloc_or_die_1 
 In pro:$bb0_zalloc_or_die_1 1 $bb1_zalloc_or_die_1 $bb2_zalloc_or_die_1 
 In pro:$bb1_zalloc_or_die_1 1 $bb6_l1_insert_0 
 In pro:$bb6_l1_insert_0 1 $bb5_l1_insert_0 
 In pro:$bb5_l1_insert_0 1 $bb1_l1_insert_0 
 In pro:$bb1_l1_insert_0 1 $bb10_l1_insert_0 
 In pro:$bb10_l1_insert_0 1 $bb0_l2_insert_0 
 In pro:$bb0_l2_insert_0 1 $bb1_l2_insert_0 
 In pro:$bb1_l2_insert_0 1 $bb2_l2_insert_0 
 In pro:$bb2_l2_insert_0 1 $bb3_l2_insert_0 $bb4_l2_insert_0 
 In pro:$bb3_l2_insert_0 1 $bb1_l2_insert_0 
 In pro:$bb1_l2_insert_0 2 $bb2_l2_insert_0 
 In pro:$bb2_l2_insert_0 2 $bb3_l2_insert_0 $bb4_l2_insert_0 
 In pro:$bb3_l2_insert_0 2 $bb1_l2_insert_0 
 In pro:$bb1_l2_insert_0 3 $bb2_l2_insert_0 
 In pro:$bb2_l2_insert_0 3 $bb3_l2_insert_0 $bb4_l2_insert_0 
 In pro:$bb3_l2_insert_0 3 $bb1_l2_insert_0 
 In pro:$bb4_l2_insert_0 1 $bb9_l1_insert_0 
 In pro:$bb9_l1_insert_0 1 $bb8_l1_insert_0 
 In pro:$bb8_l1_insert_0 1 $bb2_l1_insert_0 
 In pro:$bb2_l1_insert_0 1 $bb3_l1_insert_0 $bb4_l1_insert_0 
 In pro:$bb3_l1_insert_0 1 $bb1_l1_insert_0 
 In pro:$bb1_l1_insert_0 2 $bb10_l1_insert_0 
 In pro:$bb10_l1_insert_0 2 $bb0_l2_insert_0 
 In pro:$bb0_l2_insert_0 2 $bb1_l2_insert_0 
 In pro:$bb4_l1_insert_0 1 $bb9_l0_insert_0 
 In pro:$bb9_l0_insert_0 1 $bb8_l0_insert_0 
 In pro:$bb8_l0_insert_0 1 $bb2_l0_insert_0 
 In pro:$bb2_l0_insert_0 1 $bb3_l0_insert_0 $bb4_l0_insert_0 
 In pro:$bb3_l0_insert_0 1 $bb1_l0_insert_0 
 In pro:$bb1_l0_insert_0 2 $bb10_l0_insert_0 
 In pro:$bb10_l0_insert_0 2 $bb0_l1_insert_0 
 In pro:$bb0_l1_insert_0 2 $bb7_l1_insert_0 
 In pro:$bb7_l1_insert_0 2 $bb0_zalloc_or_die_1 
 In pro:$bb0_zalloc_or_die_1 2 $bb1_zalloc_or_die_1 $bb2_zalloc_or_die_1 
 In pro:$bb1_zalloc_or_die_1 2 $bb6_l1_insert_0 
 In pro:$bb6_l1_insert_0 2 $bb5_l1_insert_0 
 In pro:$bb5_l1_insert_0 2 $bb1_l1_insert_0 
 In pro:$bb1_l1_insert_0 2 $bb10_l1_insert_0 
 In pro:$bb10_l1_insert_0 2 $bb0_l2_insert_0 
 In pro:$bb4_l0_insert_0 1 $bb6_main_0 
 In pro:$bb6_main_0 1 $bb5_main_0 
 In pro:$bb5_main_0 1 $bb2_main_0 
 In pro:$bb2_main_0 1 $bb3_main_0 $bb4_main_0 
 In pro:$bb3_main_0 1 $bb1_main_0 
 In pro:$bb1_main_0 2 $bb7_main_0 
 In pro:$bb7_main_0 2 $bb0_l0_insert_0 
 In pro:$bb0_l0_insert_0 2 $bb7_l0_insert_0 
 In pro:$bb7_l0_insert_0 2 $bb0_zalloc_or_die_0 
 In pro:$bb0_zalloc_or_die_0 2 $bb5_zalloc_or_die_0 
 In pro:$bb5_zalloc_or_die_0 2 $bb0_calloc_model_0 
 In pro:$bb4_main_0 1 $bb10_main_0 
 In pro:$bb10_main_0 1 $bb0_l0_destroy_0 
 In pro:$bb0_l0_destroy_0 1 $bb1_l0_destroy_0 
 In pro:$bb1_l0_destroy_0 1 $bb7_l0_destroy_0 
 In pro:$bb7_l0_destroy_0 1 $bb0_l1_destroy_0 
 In pro:$bb0_l1_destroy_0 1 $bb1_l1_destroy_0 
 In pro:$bb1_l1_destroy_0 1 $bb7_l1_destroy_0 
 In pro:$bb4_l2_insert_0 1 $bb9_l1_insert_0 
 In pro:$bb9_l1_insert_0 1 $bb8_l1_insert_0 
 In pro:$bb8_l1_insert_0 1 $bb2_l1_insert_0 
 In pro:$bb2_l1_insert_0 1 $bb3_l1_insert_0 $bb4_l1_insert_0 
 In pro:$bb3_l1_insert_0 1 $bb1_l1_insert_0 
 In pro:$bb1_l1_insert_0 2 $bb10_l1_insert_0 
 In pro:$bb10_l1_insert_0 2 $bb0_l2_insert_0 
 In pro:$bb0_l2_insert_0 2 $bb1_l2_insert_0 
 In pro:$bb1_l2_insert_0 3 $bb2_l2_insert_0 
 In pro:$bb2_l2_insert_0 3 $bb3_l2_insert_0 $bb4_l2_insert_0 
 In pro:$bb3_l2_insert_0 2 $bb1_l2_insert_0 
 In pro:$bb4_l2_insert_0 2 $bb9_l1_insert_0 
 In pro:$bb9_l1_insert_0 2 $bb8_l1_insert_0 
 In pro:$bb8_l1_insert_0 2 $bb2_l1_insert_0 
 In pro:$bb2_l1_insert_0 2 $bb3_l1_insert_0 $bb4_l1_insert_0 
 In pro:$bb3_l1_insert_0 2 $bb1_l1_insert_0 
 In pro:$bb1_l1_insert_0 3 $bb10_l1_insert_0 
 In pro:$bb10_l1_insert_0 3 $bb0_l2_insert_0 
 In pro:$bb0_l2_insert_0 3 $bb1_l2_insert_0 
 In pro:$bb4_l1_insert_0 1 $bb9_l0_insert_0 
 In pro:$bb9_l0_insert_0 1 $bb8_l0_insert_0 
 In pro:$bb8_l0_insert_0 1 $bb2_l0_insert_0 
 In pro:$bb2_l0_insert_0 1 $bb3_l0_insert_0 $bb4_l0_insert_0 
 In pro:$bb3_l0_insert_0 1 $bb1_l0_insert_0 
 In pro:$bb1_l0_insert_0 2 $bb10_l0_insert_0 
 In pro:$bb10_l0_insert_0 2 $bb0_l1_insert_0 
 In pro:$bb0_l1_insert_0 2 $bb7_l1_insert_0 
 In pro:$bb4_l0_insert_0 1 $bb6_main_0 
 In pro:$bb6_main_0 1 $bb5_main_0 
 In pro:$bb5_main_0 1 $bb2_main_0 
 In pro:$bb2_main_0 1 $bb3_main_0 $bb4_main_0 
 In pro:$bb4_l1_insert_0 1 $bb9_l0_insert_0 
 In pro:$bb9_l0_insert_0 1 $bb8_l0_insert_0 
 In pro:$bb8_l0_insert_0 1 $bb2_l0_insert_0 
 In pro:$bb2_l0_insert_0 1 $bb3_l0_insert_0 $bb4_l0_insert_0 
 In pro:$bb3_l0_insert_0 1 $bb1_l0_insert_0 
 In pro:$bb1_l0_insert_0 2 $bb10_l0_insert_0 
 In pro:$bb10_l0_insert_0 2 $bb0_l1_insert_0 
 In pro:$bb0_l1_insert_0 2 $bb7_l1_insert_0 
 In pro:$bb7_l1_insert_0 2 $bb0_zalloc_or_die_1 
 In pro:$bb0_zalloc_or_die_1 2 $bb1_zalloc_or_die_1 $bb2_zalloc_or_die_1 
 In pro:$bb1_zalloc_or_die_1 2 $bb6_l1_insert_0 
 In pro:$bb6_l1_insert_0 2 $bb5_l1_insert_0 
 In pro:$bb5_l1_insert_0 2 $bb1_l1_insert_0 
 In pro:$bb1_l1_insert_0 2 $bb10_l1_insert_0 
 In pro:$bb10_l1_insert_0 2 $bb0_l2_insert_0 
 In pro:$bb0_l2_insert_0 2 $bb1_l2_insert_0 
 In pro:$bb1_l2_insert_0 3 $bb2_l2_insert_0 
 In pro:$bb2_l2_insert_0 3 $bb3_l2_insert_0 $bb4_l2_insert_0 
 In pro:$bb4_l0_insert_0 1 $bb6_main_0 
 In pro:$bb6_main_0 1 $bb5_main_0 
 In pro:$bb5_main_0 1 $bb2_main_0 
 In pro:$bb2_main_0 1 $bb3_main_0 $bb4_main_0 
 In pro:$bb3_main_0 1 $bb1_main_0 
 In pro:$bb1_main_0 2 $bb7_main_0 
 In pro:$bb7_main_0 2 $bb0_l0_insert_0 
 In pro:$bb0_l0_insert_0 2 $bb7_l0_insert_0 
 In pro:$bb7_l0_insert_0 2 $bb0_zalloc_or_die_0 
 In pro:$bb0_zalloc_or_die_0 2 $bb5_zalloc_or_die_0 
 In pro:$bb5_zalloc_or_die_0 2 $bb0_calloc_model_0 
 In pro:$bb0_calloc_model_0 2 $bb4_zalloc_or_die_0 
 In pro:$bb4_zalloc_or_die_0 2 $bb3_zalloc_or_die_0 
 In pro:$bb3_zalloc_or_die_0 2 $bb1_zalloc_or_die_0 $bb2_zalloc_or_die_0 
 In pro:$bb4_main_0 1 $bb10_main_0 
 In pro:$bb10_main_0 1 $bb0_l0_destroy_0 
 In pro:$bb0_l0_destroy_0 1 $bb1_l0_destroy_0 
 In pro:$bb1_l0_destroy_0 1 $bb7_l0_destroy_0 
 In pro:$bb7_l0_destroy_0 1 $bb0_l1_destroy_0 
 In pro:$bb0_l1_destroy_0 1 $bb1_l1_destroy_0 
 In pro:$bb1_l1_destroy_0 1 $bb7_l1_destroy_0 
 In pro:$bb7_l1_destroy_0 1 $bb0_l2_destroy_0 
 In pro:$bb0_l2_destroy_0 1 $bb1_l2_destroy_0 
 In pro:$bb1_l2_destroy_0 1 $bb2_l2_destroy_0 
 In pro:$bb4_l2_insert_0 1 $bb9_l1_insert_0 
 In pro:$bb9_l1_insert_0 1 $bb8_l1_insert_0 
 In pro:$bb8_l1_insert_0 1 $bb2_l1_insert_0 
 In pro:$bb2_l1_insert_0 1 $bb3_l1_insert_0 $bb4_l1_insert_0 
 In pro:$bb3_l1_insert_0 1 $bb1_l1_insert_0 
 In pro:$bb1_l1_insert_0 2 $bb10_l1_insert_0 
 In pro:$bb10_l1_insert_0 2 $bb0_l2_insert_0 
 In pro:$bb0_l2_insert_0 2 $bb1_l2_insert_0 
 In pro:$bb1_l2_insert_0 2 $bb2_l2_insert_0 
 In pro:$bb2_l2_insert_0 2 $bb3_l2_insert_0 $bb4_l2_insert_0 
 In pro:$bb3_l2_insert_0 1 $bb1_l2_insert_0 
 In pro:$bb1_l2_insert_0 3 $bb2_l2_insert_0 
 In pro:$bb2_l2_insert_0 3 $bb3_l2_insert_0 $bb4_l2_insert_0 
 In pro:$bb3_l2_insert_0 2 $bb1_l2_insert_0 
 In pro:$bb4_l2_insert_0 2 $bb9_l1_insert_0 
 In pro:$bb9_l1_insert_0 2 $bb8_l1_insert_0 
 In pro:$bb8_l1_insert_0 2 $bb2_l1_insert_0 
 In pro:$bb2_l1_insert_0 2 $bb3_l1_insert_0 $bb4_l1_insert_0 
 In pro:$bb3_l1_insert_0 2 $bb1_l1_insert_0 
 In pro:$bb1_l1_insert_0 3 $bb10_l1_insert_0 
 In pro:$bb10_l1_insert_0 3 $bb0_l2_insert_0 
 In pro:$bb0_l2_insert_0 3 $bb1_l2_insert_0 
 In pro:$bb4_l1_insert_0 1 $bb9_l0_insert_0 
 In pro:$bb9_l0_insert_0 1 $bb8_l0_insert_0 
 In pro:$bb8_l0_insert_0 1 $bb2_l0_insert_0 
 In pro:$bb2_l0_insert_0 1 $bb3_l0_insert_0 $bb4_l0_insert_0 
 In pro:$bb3_l0_insert_0 1 $bb1_l0_insert_0 
 In pro:$bb1_l0_insert_0 2 $bb10_l0_insert_0 
 In pro:$bb10_l0_insert_0 2 $bb0_l1_insert_0 
 In pro:$bb0_l1_insert_0 2 $bb7_l1_insert_0 
 In pro:$bb4_l0_insert_0 1 $bb6_main_0 
 In pro:$bb6_main_0 1 $bb5_main_0 
 In pro:$bb5_main_0 1 $bb2_main_0 
 In pro:$bb2_main_0 1 $bb3_main_0 $bb4_main_0 
 In pro:$bb4_l2_insert_0 2 $bb9_l1_insert_0 
 In pro:$bb9_l1_insert_0 2 $bb8_l1_insert_0 
 In pro:$bb8_l1_insert_0 2 $bb2_l1_insert_0 
 In pro:$bb2_l1_insert_0 2 $bb3_l1_insert_0 $bb4_l1_insert_0 
 In pro:$bb3_l1_insert_0 2 $bb1_l1_insert_0 
 In pro:$bb1_l1_insert_0 3 $bb10_l1_insert_0 
 In pro:$bb10_l1_insert_0 3 $bb0_l2_insert_0 
 In pro:$bb0_l2_insert_0 3 $bb1_l2_insert_0 
 In pro:$bb1_l2_insert_0 3 $bb2_l2_insert_0 
 In pro:$bb2_l2_insert_0 3 $bb3_l2_insert_0 $bb4_l2_insert_0 
 In pro:$bb3_l2_insert_0 1 $bb1_l2_insert_0 
 In pro:$bb4_l2_insert_0 3 $bb9_l1_insert_0 
 In pro:$bb9_l1_insert_0 3 $bb8_l1_insert_0 
 In pro:$bb8_l1_insert_0 3 $bb2_l1_insert_0 
 In pro:$bb2_l1_insert_0 3 $bb3_l1_insert_0 $bb4_l1_insert_0 
 In pro:$bb3_l1_insert_0 3 $bb1_l1_insert_0 
 In pro:$bb4_l1_insert_0 1 $bb9_l0_insert_0 
 In pro:$bb4_l1_insert_0 1 $bb9_l0_insert_0 
 In pro:$bb9_l0_insert_0 1 $bb8_l0_insert_0 
 In pro:$bb8_l0_insert_0 1 $bb2_l0_insert_0 
 In pro:$bb2_l0_insert_0 1 $bb3_l0_insert_0 $bb4_l0_insert_0 
 In pro:$bb3_l0_insert_0 1 $bb1_l0_insert_0 
 In pro:$bb1_l0_insert_0 2 $bb10_l0_insert_0 
 In pro:$bb10_l0_insert_0 2 $bb0_l1_insert_0 
 In pro:$bb0_l1_insert_0 2 $bb7_l1_insert_0 
 In pro:$bb7_l1_insert_0 2 $bb0_zalloc_or_die_1 
 In pro:$bb0_zalloc_or_die_1 2 $bb1_zalloc_or_die_1 $bb2_zalloc_or_die_1 
 In pro:$bb1_zalloc_or_die_1 2 $bb6_l1_insert_0 
 In pro:$bb4_l0_insert_0 1 $bb6_main_0 
 In pro:$bb6_main_0 1 $bb5_main_0 
 In pro:$bb5_main_0 1 $bb2_main_0 
 In pro:$bb2_main_0 1 $bb3_main_0 $bb4_main_0 
 In pro:$bb3_main_0 1 $bb1_main_0 
 In pro:$bb1_main_0 2 $bb7_main_0 
 In pro:$bb7_main_0 2 $bb0_l0_insert_0 
 In pro:$bb4_main_0 1 $bb10_main_0 
 In pro:$bb10_main_0 1 $bb0_l0_destroy_0 
 In pro:$bb0_l0_destroy_0 1 $bb1_l0_destroy_0 
 In pro:$bb4_l1_insert_0 1 $bb9_l0_insert_0 
 In pro:$bb9_l0_insert_0 1 $bb8_l0_insert_0 
 In pro:$bb8_l0_insert_0 1 $bb2_l0_insert_0 
 In pro:$bb2_l0_insert_0 1 $bb3_l0_insert_0 $bb4_l0_insert_0 
 In pro:$bb3_l0_insert_0 1 $bb1_l0_insert_0 
 In pro:$bb1_l0_insert_0 2 $bb10_l0_insert_0 
 In pro:$bb10_l0_insert_0 2 $bb0_l1_insert_0 
 In pro:$bb0_l1_insert_0 2 $bb7_l1_insert_0 
 In pro:$bb7_l1_insert_0 2 $bb0_zalloc_or_die_1 
 In pro:$bb0_zalloc_or_die_1 2 $bb1_zalloc_or_die_1 $bb2_zalloc_or_die_1 
 In pro:$bb1_zalloc_or_die_1 2 $bb6_l1_insert_0 
 In pro:$bb6_l1_insert_0 2 $bb5_l1_insert_0 
 In pro:$bb5_l1_insert_0 2 $bb1_l1_insert_0 
 In pro:$bb1_l1_insert_0 2 $bb10_l1_insert_0 
 In pro:$bb10_l1_insert_0 2 $bb0_l2_insert_0 
 In pro:$bb0_l2_insert_0 2 $bb1_l2_insert_0 
 In pro:$bb1_l2_insert_0 2 $bb2_l2_insert_0 
 In pro:$bb2_l2_insert_0 2 $bb3_l2_insert_0 $bb4_l2_insert_0 
 In pro:$bb3_l2_insert_0 1 $bb1_l2_insert_0 
 In pro:$bb1_l2_insert_0 3 $bb2_l2_insert_0 
 In pro:$bb2_l2_insert_0 3 $bb3_l2_insert_0 $bb4_l2_insert_0 
 In pro:$bb4_l2_insert_0 2 $bb9_l1_insert_0 
 In pro:$bb9_l1_insert_0 2 $bb8_l1_insert_0 
 In pro:$bb8_l1_insert_0 2 $bb2_l1_insert_0 
 In pro:$bb4_l0_insert_0 1 $bb6_main_0 
 In pro:$bb6_main_0 1 $bb5_main_0 
 In pro:$bb5_main_0 1 $bb2_main_0 
 In pro:$bb2_main_0 1 $bb3_main_0 $bb4_main_0 
 In pro:$bb3_main_0 1 $bb1_main_0 
 In pro:$bb1_main_0 2 $bb7_main_0 
 In pro:$bb7_main_0 2 $bb0_l0_insert_0 
 In pro:$bb0_l0_insert_0 2 $bb7_l0_insert_0 
 In pro:$bb7_l0_insert_0 2 $bb0_zalloc_or_die_0 
 In pro:$bb0_zalloc_or_die_0 2 $bb5_zalloc_or_die_0 
 In pro:$bb5_zalloc_or_die_0 2 $bb0_calloc_model_0 
 In pro:$bb0_calloc_model_0 2 $bb4_zalloc_or_die_0 
 In pro:$bb4_zalloc_or_die_0 2 $bb3_zalloc_or_die_0 
 In pro:$bb3_zalloc_or_die_0 2 $bb1_zalloc_or_die_0 $bb2_zalloc_or_die_0 
 In pro:$bb1_zalloc_or_die_0 2 $bb6_l0_insert_0 
 In pro:$bb6_l0_insert_0 2 $bb5_l0_insert_0 
 In pro:$bb5_l0_insert_0 2 $bb1_l0_insert_0 
 In pro:$bb4_main_0 1 $bb10_main_0 
 In pro:$bb10_main_0 1 $bb0_l0_destroy_0 
 In pro:$bb0_l0_destroy_0 1 $bb1_l0_destroy_0 
 In pro:$bb1_l0_destroy_0 1 $bb7_l0_destroy_0 
 In pro:$bb7_l0_destroy_0 1 $bb0_l1_destroy_0 
 In pro:$bb0_l1_destroy_0 1 $bb1_l1_destroy_0 
 In pro:$bb1_l1_destroy_0 1 $bb7_l1_destroy_0 
 In pro:$bb7_l1_destroy_0 1 $bb0_l2_destroy_0 
 In pro:$bb0_l2_destroy_0 1 $bb1_l2_destroy_0 
 In pro:$bb1_l2_destroy_0 1 $bb2_l2_destroy_0 
 In pro:$bb2_l2_destroy_0 1 $bb3_l2_destroy_0 $bb4_l2_destroy_0 
 In pro:$bb3_l2_destroy_0 1 $bb1_l2_destroy_0 
 In pro:$bb1_l2_destroy_0 2 $bb2_l2_destroy_0 
 In pro:$bb4_l2_destroy_0 1 $bb6_l1_destroy_0 
 In pro:$bb6_l1_destroy_0 1 $bb5_l1_destroy_0 
 =========== DO SYMBOLIC EXECUTION FOR ONE PATH
 [32mDebug VarEquiv: 
 [0m[32mKey: $Null| Var: $Null
 [0m[32mDebug BlkLinkName: 
 [0m[32mKey: $Null| Var: $Null
 [0m[32mDebug Offset:
 [0m[32mKey: $Null| Var: 0
 [0m[32mDebug IntVal: 
 [0m[32mKey: $Null| Val: 0
 [0m[34mINFO: executing for stmt: 
 [0mcall {:cexpr "smack:entry:main"} boogie_si_record_ref(main_main0);[34m
 [0m[34mINFO: stmt kind CALL
 [0m[34mINFO: UNsolved proc call: boogie_si_record_ref
 [0m[32mDebug VarEquiv: 
 [0m[32mKey: $Null| Var: $Null
 [0m[32mDebug BlkLinkName: 
 [0m[32mKey: $Null| Var: $Null
 [0m[32mDebug Offset:
 [0m[32mKey: $Null| Var: 0
 [0m[32mDebug IntVal: 
 [0m[32mKey: $Null| Val: 0
 [0m[34mINFO: executing for stmt: 
 [0mgoto $bb1_main_0;[34m
 [0m[34mINFO: stmt kind 5
 [0m[32mDebug VarEquiv: 
 [0m[32mKey: $Null| Var: $Null
 [0m[32mDebug BlkLinkName: 
 [0m[32mKey: $Null| Var: $Null
 [0m[32mDebug Offset:
 [0m[32mKey: $Null| Var: 0
 [0m[32mDebug IntVal: 
 [0m[32mKey: $Null| Val: 0
 [0m[34mINFO: executing for stmt: 
 [0mgoto $bb7_main_0;[34m
 [0m[34mINFO: stmt kind 5
 [0m[32mDebug VarEquiv: 
 [0m[32mKey: $Null| Var: $Null
 [0m[32mDebug BlkLinkName: 
 [0m[32mKey: $Null| Var: $Null
 [0m[32mDebug Offset:
 [0m[32mKey: $Null| Var: 0
 [0m[32mDebug IntVal: 
 [0m[32mKey: $Null| Val: 0
 [0m[34mINFO: executing for stmt: 
 [0m$p0_l0_insert0 := main.list_main0;[34m
 [0m[34mINFO: stmt kind ASSIGN
 [0m[34mINFO: ASSIGN RHS is not a funcExprmain.list_main0 $p0_l0_insert0
 [0m[34mINFO: RHS is Var
 [0m[34mWARNING: This is not correct use, please check, getVar after useVar
  #0 0x00007f32318c44ff llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/lib/x86_64-linux-gnu/libLLVM-10.so.1+0x9814ff)
  #1 0x00007f32318c2782 llvm::sys::RunSignalHandlers() (/lib/x86_64-linux-gnu/libLLVM-10.so.1+0x97f782)
  #2 0x00007f32318c4ac5 (/lib/x86_64-linux-gnu/libLLVM-10.so.1+0x981ac5)
  #3 0x00007f322f6de210 (/lib/x86_64-linux-gnu/libc.so.6+0x46210)
  #4 0x00007f322fb3bc08 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (/lib/x86_64-linux-gnu/libstdc++.so.6+0x145c08)
  #5 0x00000000004d5b9d smack::VarExpr::name[abi:cxx11]() const /home/clexma/Desktop/Disk_D/Tools/SMACK/SmackBasedPrj/build/../include/smack/BoogieAst.h:492:43
  #6 0x000000000050bc80 smack::BlockExecutor::executeAssign(std::shared_ptr<smack::SymbolicHeapExpr>, smack::Stmt const*) /home/clexma/Desktop/Disk_D/Tools/SMACK/SmackBasedPrj/build/../lib/smack/BlockExecutor.cpp:262:45
  #7 0x0000000000516f10 smack::BlockExecutor::executeStmt(std::shared_ptr<smack::SymbolicHeapExpr>, smack::Stmt const*) /home/clexma/Desktop/Disk_D/Tools/SMACK/SmackBasedPrj/build/../lib/smack/BlockExecutor.cpp:1705:13
  #8 0x00000000005172bc smack::BlockExecutor::execute[abi:cxx11](std::shared_ptr<smack::ExecutionState>) /home/clexma/Desktop/Disk_D/Tools/SMACK/SmackBasedPrj/build/../lib/smack/BlockExecutor.cpp:1736:31
  #9 0x00000000004aa77e smack::MemSafeVerifier::runOnModule(llvm::Module&) /home/clexma/Desktop/Disk_D/Tools/SMACK/SmackBasedPrj/build/../lib/smack/MemSafeVerifier.cpp:76:69
 #10 0x00007f32319ca4a0 llvm::legacy::PassManagerImpl::run(llvm::Module&) (/lib/x86_64-linux-gnu/libLLVM-10.so.1+0xa874a0)
 #11 0x000000000042bf91 main /home/clexma/Desktop/Disk_D/Tools/SMACK/SmackBasedPrj/build/../tools/llvm2bpl/llvm2bpl.cpp:278:17
 #12 0x00007f322f6bf0b3 __libc_start_main /build/glibc-YbNSs7/glibc-2.31/csu/../csu/libc-start.c:342:3
 #13 0x000000000042a60e _start (/usr/local/bin/llvm2bpl+0x42a60e)
 Stack dump:
 0.	Program arguments: llvm2bpl /home/clexma/Desktop/Disk_D/Tools/SMACK/SmackBasedPrj/testcases/benchmark/b-x5y9v2xv.bc -bpl ../svcomp/memsafety//test-0236.bpl -warn-type unsound -sea-dsa=ci -source-loc-syms -entry-points main -ll ../svcomp/memsafety//test-0236_IR.ll -mem-mod-impls -llvm-assumes=none -sh-mem-leak 
 1.	Running pass 'MemSafeVerifier' on module '/home/clexma/Desktop/Disk_D/Tools/SMACK/SmackBasedPrj/testcases/benchmark/b-x5y9v2xv.bc'.
 SMACK program verifier version 2.6.3
Running clang -c -emit-llvm -O0 -g -gcolumn-info -Xclang -disable-O0-optnone -I/usr/local/share/smack/include -DMEMORY_MODEL_NO_REUSE_IMPLS -o /home/clexma/Desktop/Disk_D/Tools/SMACK/SmackBasedPrj/testcases/benchmark/test-0236-cgtim44o.bc ../svcomp/memsafety//test-0236.c
Running llvm-link -o /home/clexma/Desktop/Disk_D/Tools/SMACK/SmackBasedPrj/testcases/benchmark/a-z4zp7p42.bc /home/clexma/Desktop/Disk_D/Tools/SMACK/SmackBasedPrj/testcases/benchmark/test-0236-cgtim44o.bc
Running llvm-link -o /home/clexma/Desktop/Disk_D/Tools/SMACK/SmackBasedPrj/testcases/benchmark/b-vuesr052.bc /home/clexma/Desktop/Disk_D/Tools/SMACK/SmackBasedPrj/testcases/benchmark/a-z4zp7p42.bc
Running llvm2bpl /home/clexma/Desktop/Disk_D/Tools/SMACK/SmackBasedPrj/testcases/benchmark/b-vuesr052.bc -bpl ../svcomp/memsafety//test-0236.bpl -warn-type unsound -sea-dsa=ci -source-loc-syms -entry-points main -ll ../svcomp/memsafety//test-0236_IR.ll -mem-mod-impls -llvm-assumes=none -sh-mem-leak
[regions] for: @main.list = internal global %struct.L0* null, align 8, !dbg !0
   at instruction:   store %struct.L0* null, %struct.L0** @main.list
   in function: __SMACK_static_init
 [regions]   using region: <Node:%struct.L0*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %10 = getelementptr inbounds %struct.L0, %struct.L0* %3, i32 0, i32 0, !dbg !70, !verifier.code !60
   in function: l0_insert
 [regions]   using region: <Node:%struct.L0**>[0,8]{LA}
    found overlap at index 0: <Node:%struct.L0*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for: %struct.L0** %0
   at instruction:   store %struct.L0** %0, %struct.L0*** %10, align 8, !dbg !71, !verifier.code !60
   in function: l0_insert
 [regions]   using region: <Node:%struct.L0*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %12 = getelementptr inbounds %struct.L0, %struct.L0* %3, i32 0, i32 1, !dbg !73, !verifier.code !60
   in function: l0_insert
 [regions]   using region: <Node:%struct.L0*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for: %struct.L0** %0
   at instruction:   store %struct.L0** %0, %struct.L0*** %10, align 8, !dbg !71, !verifier.code !60
   in function: l0_insert
 [regions]   using region: <Node:%struct.L0*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %3 = getelementptr inbounds %struct.L0, %struct.L0* %.0, i32 0, i32 2, !dbg !62, !verifier.code !60
   in function: l0_destroy
 [regions]   using region: <Node:%struct.L1*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %5 = getelementptr inbounds %struct.L0, %struct.L0* %.0, i32 0, i32 1, !dbg !65, !verifier.code !60
   in function: l0_destroy
 [regions]   using region: <Node:%struct.L0*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %3 = getelementptr inbounds %struct.L1, %struct.L1* %.0, i32 0, i32 0, !dbg !62, !verifier.code !60
   in function: l1_destroy
 [regions]   using region: <Node:%struct.L2*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %5 = getelementptr inbounds %struct.L1, %struct.L1* %.0, i32 0, i32 1, !dbg !65, !verifier.code !60
   in function: l1_destroy
 [regions]   using region: <Node:%struct.L1*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %3 = getelementptr inbounds %struct.L2, %struct.L2* %.0, i32 0, i32 2, !dbg !62, !verifier.code !60
   in function: l2_destroy
 [regions]   using region: <Node:%struct.L3*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %5 = getelementptr inbounds %struct.L2, %struct.L2* %.0, i32 0, i32 1, !dbg !65, !verifier.code !60
   in function: l2_destroy
 [regions]   using region: <Node:%struct.L2*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %3 = getelementptr inbounds %struct.L3, %struct.L3* %.0, i32 0, i32 0, !dbg !62, !verifier.code !60
   in function: l3_destroy
 [regions]   using region: <Node:%struct.L4*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %5 = getelementptr inbounds %struct.L3, %struct.L3* %.0, i32 0, i32 1, !dbg !65, !verifier.code !60
   in function: l3_destroy
 [regions]   using region: <Node:%struct.L3*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %3 = getelementptr inbounds %struct.L4, %struct.L4* %.0, i32 0, i32 2, !dbg !62, !verifier.code !60
   in function: l4_destroy
 [regions]   using region: <Node:%struct.L5*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %6 = getelementptr inbounds %struct.L4, %struct.L4* %.0, i32 0, i32 1, !dbg !66, !verifier.code !60
   in function: l4_destroy
 [regions]   using region: <Node:%struct.L4*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %10 = getelementptr inbounds %struct.L1, %struct.L1* %3, i32 0, i32 2, !dbg !70, !verifier.code !60
   in function: l1_insert
 [regions]   using region: <Node:%struct.L1**>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for: %struct.L1** %0
   at instruction:   store %struct.L1** %0, %struct.L1*** %10, align 8, !dbg !71, !verifier.code !60
   in function: l1_insert
 [regions]   using region: <Node:%struct.L1*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %12 = getelementptr inbounds %struct.L1, %struct.L1* %3, i32 0, i32 1, !dbg !73, !verifier.code !60
   in function: l1_insert
 [regions]   using region: <Node:%struct.L1*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for: %struct.L1** %0
   at instruction:   store %struct.L1** %0, %struct.L1*** %10, align 8, !dbg !71, !verifier.code !60
   in function: l1_insert
 [regions]   using region: <Node:%struct.L1*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %10 = getelementptr inbounds %struct.L2, %struct.L2* %3, i32 0, i32 0, !dbg !70, !verifier.code !60
   in function: l2_insert
 [regions]   using region: <Node:%struct.L2**>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for: %struct.L2** %0
   at instruction:   store %struct.L2** %0, %struct.L2*** %10, align 8, !dbg !71, !verifier.code !60
   in function: l2_insert
 [regions]   using region: <Node:%struct.L2*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %12 = getelementptr inbounds %struct.L2, %struct.L2* %3, i32 0, i32 1, !dbg !73, !verifier.code !60
   in function: l2_insert
 [regions]   using region: <Node:%struct.L2*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for: %struct.L2** %0
   at instruction:   store %struct.L2** %0, %struct.L2*** %10, align 8, !dbg !71, !verifier.code !60
   in function: l2_insert
 [regions]   using region: <Node:%struct.L2*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %10 = getelementptr inbounds %struct.L3, %struct.L3* %3, i32 0, i32 2, !dbg !70, !verifier.code !60
   in function: l3_insert
 [regions]   using region: <Node:%struct.L3**>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for: %struct.L3** %0
   at instruction:   store %struct.L3** %0, %struct.L3*** %10, align 8, !dbg !71, !verifier.code !60
   in function: l3_insert
 [regions]   using region: <Node:%struct.L3*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %12 = getelementptr inbounds %struct.L3, %struct.L3* %3, i32 0, i32 1, !dbg !73, !verifier.code !60
   in function: l3_insert
 [regions]   using region: <Node:%struct.L3*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for: %struct.L3** %0
   at instruction:   store %struct.L3** %0, %struct.L3*** %10, align 8, !dbg !71, !verifier.code !60
   in function: l3_insert
 [regions]   using region: <Node:%struct.L3*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %6 = getelementptr inbounds %struct.L4, %struct.L4* %3, i32 0, i32 2, !dbg !64, !verifier.code !60
   in function: l4_insert
 [regions]   using region: <Node:%struct.L5*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %8 = getelementptr inbounds %struct.L4, %struct.L4* %3, i32 0, i32 2, !dbg !67, !verifier.code !60
   in function: l4_insert
 [regions]   using region: <Node:%struct.L5*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %10 = bitcast %struct.L5* %9 to i8**, !dbg !68, !verifier.code !60
   in function: l4_insert
 [regions]   using region: <Node:i8*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %11 = getelementptr inbounds %struct.L4, %struct.L4* %3, i32 0, i32 0, !dbg !70, !verifier.code !60
   in function: l4_insert
 [regions]   using region: <Node:%struct.L4**>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for: %struct.L4** %0
   at instruction:   store %struct.L4** %0, %struct.L4*** %11, align 8, !dbg !71, !verifier.code !60
   in function: l4_insert
 [regions]   using region: <Node:%struct.L4*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %13 = getelementptr inbounds %struct.L4, %struct.L4* %3, i32 0, i32 1, !dbg !73, !verifier.code !60
   in function: l4_insert
 [regions]   using region: <Node:%struct.L4*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for: %struct.L4** %0
   at instruction:   store %struct.L4** %0, %struct.L4*** %11, align 8, !dbg !71, !verifier.code !60
   in function: l4_insert
 [regions]   using region: <Node:%struct.L4*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,8]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %4 = call noalias i8* @malloc(i64 %3) #6, !dbg !66, !verifier.code !63 with length 4294967295
   in function: calloc_model
 [regions]   using region: <Node:i8>[0,4294967295]{LA}
    found overlap at index 0: <Node:*>[0,8]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 [regions] for: @main.list = internal global %struct.L0* null, align 8, !dbg !0
   at instruction:   store %struct.L0* null, %struct.L0** @main.list
   in function: __SMACK_static_init
 [regions]   using region: <Node:%struct.L0*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 We are now translating the program to boogie...
 Analyzing globals...
 -------INSERT: Global Variables main.list
 Analyzing functions...
 Analyzing function: main
 -------INSERT: Global Variables main
 Analyzing function body: main
 Generating body for main
 visitBasicBlock
 visitBranch
 visitBasicBlock
 visitCall
 smackrep call
 visitBranch
 visitBasicBlock
 visitCall
 smackrep call
 visitCmp
 visitBranch
 visitBasicBlock
 visitLoad
 [regions] for: @main.list = internal global %struct.L0* null, align 8, !dbg !0
   at instruction:   store %struct.L0* null, %struct.L0** @main.list
   in function: __SMACK_static_init
 [regions]   using region: <Node:%struct.L0*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitCall
 smackrep call
 visitReturn
 
 insert initial SH to main
 Finished analyzing function: main
 
 Analyzing function: l0_insert
 -------INSERT: Global Variables l0_insert
 Analyzing function body: l0_insert
 Generating body for l0_insert
 visitBasicBlock
 visitDbgValue
 visitCall
 smackrep call
 visitCast
 visitCast not vector
 visitDbgValue
 visitBranch
 visitBasicBlock
 visitGetElementPtr
 visitCall
 smackrep call
 visitBranch
 visitBasicBlock
 visitCall
 smackrep call
 visitCmp
 visitBranch
 visitBasicBlock
 visitGetElementPtr
 visitStore
 [regions] for:   %10 = getelementptr inbounds %struct.L0, %struct.L0* %3, i32 0, i32 0, !dbg !70, !verifier.code !60
   in function: l0_insert
 [regions]   using region: <Node:%struct.L0**>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %10 = getelementptr inbounds %struct.L0, %struct.L0* %3, i32 0, i32 0, !dbg !70, !verifier.code !60
   in function: l0_insert
 [regions]   using region: <Node:%struct.L0**>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitLoad
 [regions] for: %struct.L0** %0
   at instruction:   store %struct.L0** %0, %struct.L0*** %10, align 8, !dbg !71, !verifier.code !60
   in function: l0_insert
 [regions]   using region: <Node:%struct.L0*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitGetElementPtr
 visitStore
 [regions] for:   %12 = getelementptr inbounds %struct.L0, %struct.L0* %3, i32 0, i32 1, !dbg !73, !verifier.code !60
   in function: l0_insert
 [regions]   using region: <Node:%struct.L0*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %12 = getelementptr inbounds %struct.L0, %struct.L0* %3, i32 0, i32 1, !dbg !73, !verifier.code !60
   in function: l0_insert
 [regions]   using region: <Node:%struct.L0*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitStore
 [regions] for: %struct.L0** %0
   at instruction:   store %struct.L0** %0, %struct.L0*** %10, align 8, !dbg !71, !verifier.code !60
   in function: l0_insert
 [regions]   using region: <Node:%struct.L0*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 [regions] for: %struct.L0** %0
   at instruction:   store %struct.L0** %0, %struct.L0*** %10, align 8, !dbg !71, !verifier.code !60
   in function: l0_insert
 [regions]   using region: <Node:%struct.L0*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitReturn
 
 Finished analyzing function: l0_insert
 
 Analyzing function: __VERIFIER_nondet_int
 -------INSERT: Global Variables __VERIFIER_nondet_int
 Analyzing function: l0_destroy
 -------INSERT: Global Variables l0_destroy
 Analyzing function body: l0_destroy
 Generating body for l0_destroy
 visitBasicBlock
 visitDbgValue
 visitBranch
 visitBasicBlock
 visitPHINode
 visitDbgValue
 visitGetElementPtr
 visitLoad
 [regions] for:   %3 = getelementptr inbounds %struct.L0, %struct.L0* %.0, i32 0, i32 2, !dbg !62, !verifier.code !60
   in function: l0_destroy
 [regions]   using region: <Node:%struct.L1*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitCall
 smackrep call
 visitGetElementPtr
 visitLoad
 [regions] for:   %5 = getelementptr inbounds %struct.L0, %struct.L0* %.0, i32 0, i32 1, !dbg !65, !verifier.code !60
   in function: l0_destroy
 [regions]   using region: <Node:%struct.L0*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitDbgValue
 visitCast
 visitCast not vector
 visitCall
 smackrep call
 visitDbgValue
 visitBranch
 visitBasicBlock
 visitCmp
 visitBranch
 visitBasicBlock
 visitReturn
 visitBasicBlock
 visitBranch
 
 Finished analyzing function: l0_destroy
 
 Analyzing function: llvm.dbg.declare
 -------INSERT: Global Variables llvm.dbg.declare
 Analyzing function: l1_destroy
 -------INSERT: Global Variables l1_destroy
 Analyzing function body: l1_destroy
 Generating body for l1_destroy
 visitBasicBlock
 visitDbgValue
 visitBranch
 visitBasicBlock
 visitPHINode
 visitDbgValue
 visitGetElementPtr
 visitLoad
 [regions] for:   %3 = getelementptr inbounds %struct.L1, %struct.L1* %.0, i32 0, i32 0, !dbg !62, !verifier.code !60
   in function: l1_destroy
 [regions]   using region: <Node:%struct.L2*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitCall
 smackrep call
 visitGetElementPtr
 visitLoad
 [regions] for:   %5 = getelementptr inbounds %struct.L1, %struct.L1* %.0, i32 0, i32 1, !dbg !65, !verifier.code !60
   in function: l1_destroy
 [regions]   using region: <Node:%struct.L1*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitDbgValue
 visitCast
 visitCast not vector
 visitCall
 smackrep call
 visitDbgValue
 visitBranch
 visitBasicBlock
 visitCmp
 visitBranch
 visitBasicBlock
 visitReturn
 visitBasicBlock
 visitBranch
 
 Finished analyzing function: l1_destroy
 
 Analyzing function: free_
 -------INSERT: Global Variables free_
 Analyzing function: l2_destroy
 -------INSERT: Global Variables l2_destroy
 Analyzing function body: l2_destroy
 Generating body for l2_destroy
 visitBasicBlock
 visitDbgValue
 visitBranch
 visitBasicBlock
 visitPHINode
 visitDbgValue
 visitGetElementPtr
 visitLoad
 [regions] for:   %3 = getelementptr inbounds %struct.L2, %struct.L2* %.0, i32 0, i32 2, !dbg !62, !verifier.code !60
   in function: l2_destroy
 [regions]   using region: <Node:%struct.L3*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitCall
 smackrep call
 visitGetElementPtr
 visitLoad
 [regions] for:   %5 = getelementptr inbounds %struct.L2, %struct.L2* %.0, i32 0, i32 1, !dbg !65, !verifier.code !60
   in function: l2_destroy
 [regions]   using region: <Node:%struct.L2*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitDbgValue
 visitCast
 visitCast not vector
 visitCall
 smackrep call
 visitDbgValue
 visitBranch
 visitBasicBlock
 visitCmp
 visitBranch
 visitBasicBlock
 visitReturn
 visitBasicBlock
 visitBranch
 
 Finished analyzing function: l2_destroy
 
 Analyzing function: l3_destroy
 -------INSERT: Global Variables l3_destroy
 Analyzing function body: l3_destroy
 Generating body for l3_destroy
 visitBasicBlock
 visitDbgValue
 visitBranch
 visitBasicBlock
 visitPHINode
 visitDbgValue
 visitGetElementPtr
 visitLoad
 [regions] for:   %3 = getelementptr inbounds %struct.L3, %struct.L3* %.0, i32 0, i32 0, !dbg !62, !verifier.code !60
   in function: l3_destroy
 [regions]   using region: <Node:%struct.L4*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitCall
 smackrep call
 visitGetElementPtr
 visitLoad
 [regions] for:   %5 = getelementptr inbounds %struct.L3, %struct.L3* %.0, i32 0, i32 1, !dbg !65, !verifier.code !60
   in function: l3_destroy
 [regions]   using region: <Node:%struct.L3*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitDbgValue
 visitCast
 visitCast not vector
 visitCall
 smackrep call
 visitDbgValue
 visitBranch
 visitBasicBlock
 visitCmp
 visitBranch
 visitBasicBlock
 visitReturn
 visitBasicBlock
 visitBranch
 
 Finished analyzing function: l3_destroy
 
 Analyzing function: l4_destroy
 -------INSERT: Global Variables l4_destroy
 Analyzing function body: l4_destroy
 Generating body for l4_destroy
 visitBasicBlock
 visitDbgValue
 visitBranch
 visitBasicBlock
 visitPHINode
 visitDbgValue
 visitGetElementPtr
 visitLoad
 [regions] for:   %3 = getelementptr inbounds %struct.L4, %struct.L4* %.0, i32 0, i32 2, !dbg !62, !verifier.code !60
   in function: l4_destroy
 [regions]   using region: <Node:%struct.L5*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitCast
 visitCast not vector
 visitCall
 smackrep call
 visitGetElementPtr
 visitLoad
 [regions] for:   %6 = getelementptr inbounds %struct.L4, %struct.L4* %.0, i32 0, i32 1, !dbg !66, !verifier.code !60
   in function: l4_destroy
 [regions]   using region: <Node:%struct.L4*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitDbgValue
 visitCast
 visitCast not vector
 visitCall
 smackrep call
 visitDbgValue
 visitBranch
 visitBasicBlock
 visitCmp
 visitBranch
 visitBasicBlock
 visitReturn
 visitBasicBlock
 visitBranch
 
 Finished analyzing function: l4_destroy
 
 Analyzing function: zalloc_or_die
 -------INSERT: Global Variables zalloc_or_die
 Analyzing function body: zalloc_or_die
 Generating body for zalloc_or_die
 visitBasicBlock
 visitDbgValue
 visitCast
 visitCast not vector
 visitCall
 smackrep call
 visitDbgValue
 visitCmp
 visitBranch
 visitBasicBlock
 visitReturn
 visitBasicBlock
 visitCall
 smackrep call
 visitUnreachable
 
 Finished analyzing function: zalloc_or_die
 
 Analyzing function: l1_insert
 -------INSERT: Global Variables l1_insert
 Analyzing function body: l1_insert
 Generating body for l1_insert
 visitBasicBlock
 visitDbgValue
 visitCall
 smackrep call
 visitCast
 visitCast not vector
 visitDbgValue
 visitBranch
 visitBasicBlock
 visitGetElementPtr
 visitCall
 smackrep call
 visitBranch
 visitBasicBlock
 visitCall
 smackrep call
 visitCmp
 visitBranch
 visitBasicBlock
 visitGetElementPtr
 visitStore
 [regions] for:   %10 = getelementptr inbounds %struct.L1, %struct.L1* %3, i32 0, i32 2, !dbg !70, !verifier.code !60
   in function: l1_insert
 [regions]   using region: <Node:%struct.L1**>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %10 = getelementptr inbounds %struct.L1, %struct.L1* %3, i32 0, i32 2, !dbg !70, !verifier.code !60
   in function: l1_insert
 [regions]   using region: <Node:%struct.L1**>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitLoad
 [regions] for: %struct.L1** %0
   at instruction:   store %struct.L1** %0, %struct.L1*** %10, align 8, !dbg !71, !verifier.code !60
   in function: l1_insert
 [regions]   using region: <Node:%struct.L1*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitGetElementPtr
 visitStore
 [regions] for:   %12 = getelementptr inbounds %struct.L1, %struct.L1* %3, i32 0, i32 1, !dbg !73, !verifier.code !60
   in function: l1_insert
 [regions]   using region: <Node:%struct.L1*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %12 = getelementptr inbounds %struct.L1, %struct.L1* %3, i32 0, i32 1, !dbg !73, !verifier.code !60
   in function: l1_insert
 [regions]   using region: <Node:%struct.L1*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitStore
 [regions] for: %struct.L1** %0
   at instruction:   store %struct.L1** %0, %struct.L1*** %10, align 8, !dbg !71, !verifier.code !60
   in function: l1_insert
 [regions]   using region: <Node:%struct.L1*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 [regions] for: %struct.L1** %0
   at instruction:   store %struct.L1** %0, %struct.L1*** %10, align 8, !dbg !71, !verifier.code !60
   in function: l1_insert
 [regions]   using region: <Node:%struct.L1*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitReturn
 
 Finished analyzing function: l1_insert
 
 Analyzing function: l2_insert
 -------INSERT: Global Variables l2_insert
 Analyzing function body: l2_insert
 Generating body for l2_insert
 visitBasicBlock
 visitDbgValue
 visitCall
 smackrep call
 visitCast
 visitCast not vector
 visitDbgValue
 visitBranch
 visitBasicBlock
 visitGetElementPtr
 visitCall
 smackrep call
 visitBranch
 visitBasicBlock
 visitCall
 smackrep call
 visitCmp
 visitBranch
 visitBasicBlock
 visitGetElementPtr
 visitStore
 [regions] for:   %10 = getelementptr inbounds %struct.L2, %struct.L2* %3, i32 0, i32 0, !dbg !70, !verifier.code !60
   in function: l2_insert
 [regions]   using region: <Node:%struct.L2**>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %10 = getelementptr inbounds %struct.L2, %struct.L2* %3, i32 0, i32 0, !dbg !70, !verifier.code !60
   in function: l2_insert
 [regions]   using region: <Node:%struct.L2**>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitLoad
 [regions] for: %struct.L2** %0
   at instruction:   store %struct.L2** %0, %struct.L2*** %10, align 8, !dbg !71, !verifier.code !60
   in function: l2_insert
 [regions]   using region: <Node:%struct.L2*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitGetElementPtr
 visitStore
 [regions] for:   %12 = getelementptr inbounds %struct.L2, %struct.L2* %3, i32 0, i32 1, !dbg !73, !verifier.code !60
   in function: l2_insert
 [regions]   using region: <Node:%struct.L2*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %12 = getelementptr inbounds %struct.L2, %struct.L2* %3, i32 0, i32 1, !dbg !73, !verifier.code !60
   in function: l2_insert
 [regions]   using region: <Node:%struct.L2*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitStore
 [regions] for: %struct.L2** %0
   at instruction:   store %struct.L2** %0, %struct.L2*** %10, align 8, !dbg !71, !verifier.code !60
   in function: l2_insert
 [regions]   using region: <Node:%struct.L2*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 [regions] for: %struct.L2** %0
   at instruction:   store %struct.L2** %0, %struct.L2*** %10, align 8, !dbg !71, !verifier.code !60
   in function: l2_insert
 [regions]   using region: <Node:%struct.L2*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitReturn
 
 Finished analyzing function: l2_insert
 
 Analyzing function: l3_insert
 -------INSERT: Global Variables l3_insert
 Analyzing function body: l3_insert
 Generating body for l3_insert
 visitBasicBlock
 visitDbgValue
 visitCall
 smackrep call
 visitCast
 visitCast not vector
 visitDbgValue
 visitBranch
 visitBasicBlock
 visitGetElementPtr
 visitCall
 smackrep call
 visitBranch
 visitBasicBlock
 visitCall
 smackrep call
 visitCmp
 visitBranch
 visitBasicBlock
 visitGetElementPtr
 visitStore
 [regions] for:   %10 = getelementptr inbounds %struct.L3, %struct.L3* %3, i32 0, i32 2, !dbg !70, !verifier.code !60
   in function: l3_insert
 [regions]   using region: <Node:%struct.L3**>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %10 = getelementptr inbounds %struct.L3, %struct.L3* %3, i32 0, i32 2, !dbg !70, !verifier.code !60
   in function: l3_insert
 [regions]   using region: <Node:%struct.L3**>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitLoad
 [regions] for: %struct.L3** %0
   at instruction:   store %struct.L3** %0, %struct.L3*** %10, align 8, !dbg !71, !verifier.code !60
   in function: l3_insert
 [regions]   using region: <Node:%struct.L3*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitGetElementPtr
 visitStore
 [regions] for:   %12 = getelementptr inbounds %struct.L3, %struct.L3* %3, i32 0, i32 1, !dbg !73, !verifier.code !60
   in function: l3_insert
 [regions]   using region: <Node:%struct.L3*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %12 = getelementptr inbounds %struct.L3, %struct.L3* %3, i32 0, i32 1, !dbg !73, !verifier.code !60
   in function: l3_insert
 [regions]   using region: <Node:%struct.L3*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitStore
 [regions] for: %struct.L3** %0
   at instruction:   store %struct.L3** %0, %struct.L3*** %10, align 8, !dbg !71, !verifier.code !60
   in function: l3_insert
 [regions]   using region: <Node:%struct.L3*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 [regions] for: %struct.L3** %0
   at instruction:   store %struct.L3** %0, %struct.L3*** %10, align 8, !dbg !71, !verifier.code !60
   in function: l3_insert
 [regions]   using region: <Node:%struct.L3*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitReturn
 
 Finished analyzing function: l3_insert
 
 Analyzing function: l4_insert
 -------INSERT: Global Variables l4_insert
 Analyzing function body: l4_insert
 Generating body for l4_insert
 visitBasicBlock
 visitDbgValue
 visitCall
 smackrep call
 visitCast
 visitCast not vector
 visitDbgValue
 visitCall
 smackrep call
 visitCast
 visitCast not vector
 visitGetElementPtr
 visitStore
 [regions] for:   %6 = getelementptr inbounds %struct.L4, %struct.L4* %3, i32 0, i32 2, !dbg !64, !verifier.code !60
   in function: l4_insert
 [regions]   using region: <Node:%struct.L5*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %6 = getelementptr inbounds %struct.L4, %struct.L4* %3, i32 0, i32 2, !dbg !64, !verifier.code !60
   in function: l4_insert
 [regions]   using region: <Node:%struct.L5*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitCast
 visitCast not vector
 visitGetElementPtr
 visitLoad
 [regions] for:   %8 = getelementptr inbounds %struct.L4, %struct.L4* %3, i32 0, i32 2, !dbg !67, !verifier.code !60
   in function: l4_insert
 [regions]   using region: <Node:%struct.L5*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitCast
 visitCast not vector
 visitStore
 [regions] for:   %10 = bitcast %struct.L5* %9 to i8**, !dbg !68, !verifier.code !60
   in function: l4_insert
 [regions]   using region: <Node:i8*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %10 = bitcast %struct.L5* %9 to i8**, !dbg !68, !verifier.code !60
   in function: l4_insert
 [regions]   using region: <Node:i8*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitGetElementPtr
 visitStore
 [regions] for:   %11 = getelementptr inbounds %struct.L4, %struct.L4* %3, i32 0, i32 0, !dbg !70, !verifier.code !60
   in function: l4_insert
 [regions]   using region: <Node:%struct.L4**>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %11 = getelementptr inbounds %struct.L4, %struct.L4* %3, i32 0, i32 0, !dbg !70, !verifier.code !60
   in function: l4_insert
 [regions]   using region: <Node:%struct.L4**>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitLoad
 [regions] for: %struct.L4** %0
   at instruction:   store %struct.L4** %0, %struct.L4*** %11, align 8, !dbg !71, !verifier.code !60
   in function: l4_insert
 [regions]   using region: <Node:%struct.L4*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitGetElementPtr
 visitStore
 [regions] for:   %13 = getelementptr inbounds %struct.L4, %struct.L4* %3, i32 0, i32 1, !dbg !73, !verifier.code !60
   in function: l4_insert
 [regions]   using region: <Node:%struct.L4*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 [regions] for:   %13 = getelementptr inbounds %struct.L4, %struct.L4* %3, i32 0, i32 1, !dbg !73, !verifier.code !60
   in function: l4_insert
 [regions]   using region: <Node:%struct.L4*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitStore
 [regions] for: %struct.L4** %0
   at instruction:   store %struct.L4** %0, %struct.L4*** %11, align 8, !dbg !71, !verifier.code !60
   in function: l4_insert
 [regions]   using region: <Node:%struct.L4*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 [regions] for: %struct.L4** %0
   at instruction:   store %struct.L4** %0, %struct.L4*** %11, align 8, !dbg !71, !verifier.code !60
   in function: l4_insert
 [regions]   using region: <Node:%struct.L4*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitReturn
 
 Finished analyzing function: l4_insert
 
 Analyzing function: calloc_model
 -------INSERT: Global Variables calloc_model
 Analyzing function body: calloc_model
 Generating body for calloc_model
 visitBasicBlock
 visitDbgValue
 visitDbgValue
 visitBinary
 visitCall
 smackrep call
 visitDbgValue
 visitBinary
 visitMemSet
 [regions] for:   %4 = call noalias i8* @malloc(i64 %3) #6, !dbg !66, !verifier.code !63 with length 4294967295
   in function: calloc_model
 [regions]   using region: <Node:i8>[0,4294967295]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitReturn
 
 Finished analyzing function: calloc_model
 
 Analyzing function: abort
 -------INSERT: Global Variables abort
 Analyzing function: malloc
 -------INSERT: Global Variables malloc
 Analyzing function: llvm.memset.p0i8.i64
 -------INSERT: Global Variables llvm.memset.p0i8.i64
 Analyzing function: llvm.dbg.value
 -------INSERT: Global Variables llvm.dbg.value
 Analyzing function: __SMACK_static_init
 -------INSERT: Global Variables __SMACK_static_init
 Analyzing function body: __SMACK_static_init
 Generating body for __SMACK_static_init
 visitBasicBlock
 visitStore
 [regions] for: @main.list = internal global %struct.L0* null, align 8, !dbg !0
   at instruction:   store %struct.L0* null, %struct.L0** @main.list
   in function: __SMACK_static_init
 [regions]   using region: <Node:%struct.L0*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 [regions] for: @main.list = internal global %struct.L0* null, align 8, !dbg !0
   at instruction:   store %struct.L0* null, %struct.L0** @main.list
   in function: __SMACK_static_init
 [regions]   using region: <Node:%struct.L0*>[0,8]{LA}
    found overlap at index 0: <Node:*>[0,4294967295]{LA}
 [regions]   merged region: <Node:*>[0,4294967295]{LA}
 [regions]   returning index: 0
 
 visitReturn
 
 Finished analyzing function: __SMACK_static_init
 
 Start Analyzing Prelude: main
 
 Start Analyzing Prelude: l0_insert
 
 Start Analyzing Prelude: __VERIFIER_nondet_int
 
 Start Analyzing Prelude: l0_destroy
 
 Start Analyzing Prelude: llvm.dbg.declare
 
 Start Analyzing Prelude: l1_destroy
 
 Start Analyzing Prelude: free_
 
 Start Analyzing Prelude: l2_destroy
 
 Start Analyzing Prelude: l3_destroy
 
 Start Analyzing Prelude: l4_destroy
 
 Start Analyzing Prelude: zalloc_or_die
 
 Start Analyzing Prelude: l1_insert
 
 Start Analyzing Prelude: l2_insert
 
 Start Analyzing Prelude: l3_insert
 
 Start Analyzing Prelude: l4_insert
 
 Start Analyzing Prelude: calloc_model
 
 Start Analyzing Prelude: abort
 
 Start Analyzing Prelude: malloc
 
 Start Analyzing Prelude: llvm.memset.p0i8.i64
 
 Start Analyzing Prelude: llvm.dbg.value
 
 Start Analyzing Prelude: __SMACK_static_init
 
 Start Analyzing Prelude: boogie_si_record_i32
 
 Start Analyzing Prelude: boogie_si_record_i64
 
 Start Analyzing Prelude: boogie_si_record_ref
 
 Start Analyzing Prelude: $initialize
 
 -----------------START MEMSAFE ANALYSIS---------------
 Begin verifying
 Adding procedure: main
 Empty block name founded in proc main
 Empty block name founded in proc main
 Empty block name founded in proc main
 Empty block name founded in proc main
 Empty block name founded in proc main
 Adding procedure: l0_insert
 Empty block name founded in proc l0_insert
 Empty block name founded in proc l0_insert
 Empty block name founded in proc l0_insert
 Empty block name founded in proc l0_insert
 Empty block name founded in proc l0_insert
 Adding procedure: __VERIFIER_nondet_int
 Empty blocks of proc __VERIFIER_nondet_int
 Adding procedure: l0_destroy
 Empty block name founded in proc l0_destroy
 Empty block name founded in proc l0_destroy
 Empty block name founded in proc l0_destroy
 Empty block name founded in proc l0_destroy
 Empty block name founded in proc l0_destroy
 Adding procedure: llvm.dbg.declare
 Empty blocks of proc llvm.dbg.declare
 Adding procedure: l1_destroy
 Empty block name founded in proc l1_destroy
 Empty block name founded in proc l1_destroy
 Empty block name founded in proc l1_destroy
 Empty block name founded in proc l1_destroy
 Empty block name founded in proc l1_destroy
 Adding procedure: free_
 Empty block name founded in proc free_
 Adding procedure: l2_destroy
 Empty block name founded in proc l2_destroy
 Empty block name founded in proc l2_destroy
 Empty block name founded in proc l2_destroy
 Empty block name founded in proc l2_destroy
 Empty block name founded in proc l2_destroy
 Adding procedure: l3_destroy
 Empty block name founded in proc l3_destroy
 Empty block name founded in proc l3_destroy
 Empty block name founded in proc l3_destroy
 Empty block name founded in proc l3_destroy
 Empty block name founded in proc l3_destroy
 Adding procedure: l4_destroy
 Empty block name founded in proc l4_destroy
 Empty block name founded in proc l4_destroy
 Empty block name founded in proc l4_destroy
 Empty block name founded in proc l4_destroy
 Empty block name founded in proc l4_destroy
 Adding procedure: zalloc_or_die
 Empty block name founded in proc zalloc_or_die
 Empty block name founded in proc zalloc_or_die
 Empty block name founded in proc zalloc_or_die
 Adding procedure: l1_insert
 Empty block name founded in proc l1_insert
 Empty block name founded in proc l1_insert
 Empty block name founded in proc l1_insert
 Empty block name founded in proc l1_insert
 Empty block name founded in proc l1_insert
 Adding procedure: l2_insert
 Empty block name founded in proc l2_insert
 Empty block name founded in proc l2_insert
 Empty block name founded in proc l2_insert
 Empty block name founded in proc l2_insert
 Empty block name founded in proc l2_insert
 Adding procedure: l3_insert
 Empty block name founded in proc l3_insert
 Empty block name founded in proc l3_insert
 Empty block name founded in proc l3_insert
 Empty block name founded in proc l3_insert
 Empty block name founded in proc l3_insert
 Adding procedure: l4_insert
 Empty block name founded in proc l4_insert
 Adding procedure: calloc_model
 Empty block name founded in proc calloc_model
 Adding procedure: abort
 Empty blocks of proc abort
 Adding procedure: malloc
 Empty block name founded in proc malloc
 Adding procedure: llvm.memset.p0i8.i64
 Empty blocks of proc llvm.memset.p0i8.i64
 Adding procedure: llvm.dbg.value
 Empty blocks of proc llvm.dbg.value
 Adding procedure: __SMACK_static_init
 Empty block name founded in proc __SMACK_static_init
 Adding procedure: boogie_si_record_i32
 Empty blocks of proc boogie_si_record_i32
 Adding procedure: boogie_si_record_i64
 Empty blocks of proc boogie_si_record_i64
 Adding procedure: boogie_si_record_ref
 Empty blocks of proc boogie_si_record_ref
 Adding procedure: $initialize
 Empty block name founded in proc $initialize
 inlining procedure: main
 $bb0_main_0 1 0
 New stmts! 
 call {:cexpr "smack:entry:main"} boogie_si_record_ref(main_main0);
 goto $bb1_main_0;
 
 $bb1_main_0 2 1
 New stmts! 
 
 New stmts! 
 goto $bb2_main_0;
 
 call l0_insert(main.list_main0);
 inlining procedure: l0_insert
 $bb0_l0_insert_0 2 1
 New stmts! 
 
 New stmts! 
 $p2_l0_insert0 := $bitcast.ref.ref($p1_l0_insert0);
 goto $bb1_l0_insert_0;
 
 call $p1_l0_insert0 := zalloc_or_die(24);
 inlining procedure: zalloc_or_die
 $bb0_zalloc_or_die_0 2 1
 New stmts! 
 call {:cexpr "zalloc_or_die:arg:size"} boogie_si_record_i32($i0_zalloc_or_die0);
 $i1_zalloc_or_die0 := $zext.i32.i64($i0_zalloc_or_die0);
 
 New stmts! 
 $i3_zalloc_or_die0 := $ne.ref($p2_zalloc_or_die0, $0.ref_zalloc_or_die0);
 assume true;
 goto $bb1_zalloc_or_die_0, $bb2_zalloc_or_die_0;
 
 call $p2_zalloc_or_die0 := calloc_model(1, $i1_zalloc_or_die0);
 
 Inlining procedure: calloc_model 0
 arguments: 
 	1 $i1_zalloc_or_die0 
 parameter: 
 	$i0_calloc_model0 $i1_calloc_model0 
 processing return block $bb0_calloc_model_0
 return param of 'call $p2_zalloc_or_die0 := calloc_model(1, $i1_zalloc_or_die0);': 
 	[$r_calloc_model0, ref32]
 return to: 
 	$p2_zalloc_or_die0
 Add assign statement: $p2_zalloc_or_die0 := $r_calloc_model0;
 Add goto relation: $bb4_zalloc_or_die_0 -> $bb3_zalloc_or_die_0
 Return block: $bb0_calloc_model_0:
   call {:cexpr "calloc_model:arg:nmemb"} boogie_si_record_i64($i0_calloc_model0);
   call {:cexpr "calloc_model:arg:size"} boogie_si_record_i64($i1_calloc_model0);
   $i2_calloc_model0 := $mul.i64($i0_calloc_model0, $i1_calloc_model0);
   call $p3_calloc_model0 := malloc($i2_calloc_model0);
   $i4_calloc_model0 := $mul.i64($i0_calloc_model0, $i1_calloc_model0);
   call $M.0_calloc_model0 := $memset.i8($M.0, $p3_calloc_model0, 0, $i4_calloc_model0, false);
   $r_calloc_model0 := $p3_calloc_model0;
   goto $bb4_zalloc_or_die_0;
 Return process block: $bb4_zalloc_or_die_0:
   $p2_zalloc_or_die0 := $r_calloc_model0;
   goto $bb3_zalloc_or_die_0;
 	add statement: $i0_calloc_model0 := 1;
 	add statement: $i1_calloc_model0 := $i1_zalloc_or_die0;
 Current block: $bb0_zalloc_or_die_0:
   call {:cexpr "zalloc_or_die:arg:size"} boogie_si_record_i32($i0_zalloc_or_die0);
   $i1_zalloc_or_die0 := $zext.i32.i64($i0_zalloc_or_die0);
   goto $bb5_zalloc_or_die_0;
 Pass block: $bb5_zalloc_or_die_0:
   $i0_calloc_model0 := 1;
   $i1_calloc_model0 := $i1_zalloc_or_die0;
   goto $bb0_calloc_model_0;
 $bb2_zalloc_or_die_0 1 0
 New stmts! 
 assume !(($i3_zalloc_or_die0 == 1));
 call abort();
 assume false;
 
 
 Inlining procedure: zalloc_or_die 0
 arguments: 
 	24 
 parameter: 
 	$i0_zalloc_or_die0 
 processing return block $bb1_zalloc_or_die_0
 return param of 'call $p1_l0_insert0 := zalloc_or_die(24);': 
 	[$r_zalloc_or_die0, ref32]
 return to: 
 	$p1_l0_insert0
 Add assign statement: $p1_l0_insert0 := $r_zalloc_or_die0;
 Add goto relation: $bb6_l0_insert_0 -> $bb5_l0_insert_0
 Return block: $bb1_zalloc_or_die_0:
   assume ($i3_zalloc_or_die0 == 1);
   $r_zalloc_or_die0 := $p2_zalloc_or_die0;
   goto $bb6_l0_insert_0;
 Return process block: $bb6_l0_insert_0:
   $p1_l0_insert0 := $r_zalloc_or_die0;
   goto $bb5_l0_insert_0;
 	add statement: $i0_zalloc_or_die0 := 24;
 Current block: $bb0_l0_insert_0:
   goto $bb7_l0_insert_0;
 Pass block: $bb7_l0_insert_0:
   $i0_zalloc_or_die0 := 24;
   goto $bb0_zalloc_or_die_0;
 $bb1_l0_insert_0 2 1
 New stmts! 
 $p3_l0_insert0 := $add.ref($add.ref($p2_l0_insert0, $mul.ref(0, 24)), $mul.ref(16, 1));
 
 New stmts! 
 goto $bb2_l0_insert_0;
 
 call l1_insert($p3_l0_insert0);
 inlining procedure: l1_insert
 $bb0_l1_insert_0 2 1
 New stmts! 
 
 New stmts! 
 $p2_l1_insert0 := $bitcast.ref.ref($p1_l1_insert0);
 goto $bb1_l1_insert_0;
 
 call $p1_l1_insert0 := zalloc_or_die(24);
 
 Inlining procedure: zalloc_or_die 1
 arguments: 
 	24 
 parameter: 
 	$i0_zalloc_or_die1 
 processing return block $bb1_zalloc_or_die_1
 return param of 'call $p1_l1_insert0 := zalloc_or_die(24);': 
 	[$r_zalloc_or_die1, ref32]
 return to: 
 	$p1_l1_insert0
 Add assign statement: $p1_l1_insert0 := $r_zalloc_or_die1;
 Add goto relation: $bb6_l1_insert_0 -> $bb5_l1_insert_0
 Return block: $bb1_zalloc_or_die_1:
   assume ($i3_zalloc_or_die1 == 1);
   $r_zalloc_or_die1 := $p2_zalloc_or_die1;
   goto $bb6_l1_insert_0;
 Return process block: $bb6_l1_insert_0:
   $p1_l1_insert0 := $r_zalloc_or_die1;
   goto $bb5_l1_insert_0;
 	add statement: $i0_zalloc_or_die1 := 24;
 Current block: $bb0_l1_insert_0:
   goto $bb7_l1_insert_0;
 Pass block: $bb7_l1_insert_0:
   $i0_zalloc_or_die1 := 24;
   goto $bb0_zalloc_or_die_1;
 $bb1_l1_insert_0 2 1
 New stmts! 
 $p3_l1_insert0 := $add.ref($add.ref($p2_l1_insert0, $mul.ref(0, 24)), $mul.ref(0, 1));
 
 New stmts! 
 goto $bb2_l1_insert_0;
 
 call l2_insert($p3_l1_insert0);
 
 Inlining procedure: l2_insert 0
 arguments: 
 	$p3_l1_insert0 
 parameter: 
 	$p0_l2_insert0 
 processing return block $bb4_l2_insert_0
 return param of 'call l2_insert($p3_l1_insert0);': 
 	return to: 
 	Add goto relation: $bb9_l1_insert_0 -> $bb8_l1_insert_0
 Return block: $bb4_l2_insert_0:
   assume !(($i5_l2_insert0 == 1));
   $p6_l2_insert0 := $add.ref($add.ref($p2_l2_insert0, $mul.ref(0, 24)), $mul.ref(0, 1));
   $M.0 := $store.ref($M.0, $p6_l2_insert0, $p0_l2_insert0);
   $p7_l2_insert0 := $load.ref($M.0, $p0_l2_insert0);
   $p8_l2_insert0 := $add.ref($add.ref($p2_l2_insert0, $mul.ref(0, 24)), $mul.ref(8, 1));
   $M.0 := $store.ref($M.0, $p8_l2_insert0, $p7_l2_insert0);
   $M.0 := $store.ref($M.0, $p0_l2_insert0, $p1_l2_insert0);
   goto $bb9_l1_insert_0;
 Return process block: $bb9_l1_insert_0:
   goto $bb8_l1_insert_0;
 	add statement: $p0_l2_insert0 := $p3_l1_insert0;
 Current block: $bb1_l1_insert_0:
   $p3_l1_insert0 := $add.ref($add.ref($p2_l1_insert0, $mul.ref(0, 24)), $mul.ref(0, 1));
   goto $bb10_l1_insert_0;
 Pass block: $bb10_l1_insert_0:
   $p0_l2_insert0 := $p3_l1_insert0;
   goto $bb0_l2_insert_0;
 $bb2_l1_insert_0 1 0
 New stmts! 
 call $i4_l1_insert0 := __VERIFIER_nondet_int();
 call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4_l1_insert0);
 $i5_l1_insert0 := $ne.i32($i4_l1_insert0, 0);
 assume true;
 goto $bb3_l1_insert_0, $bb4_l1_insert_0;
 
 
 Inlining procedure: l1_insert 0
 arguments: 
 	$p3_l0_insert0 
 parameter: 
 	$p0_l1_insert0 
 processing return block $bb4_l1_insert_0
 return param of 'call l1_insert($p3_l0_insert0);': 
 	return to: 
 	Add goto relation: $bb9_l0_insert_0 -> $bb8_l0_insert_0
 Return block: $bb4_l1_insert_0:
   assume !(($i5_l1_insert0 == 1));
   $p6_l1_insert0 := $add.ref($add.ref($p2_l1_insert0, $mul.ref(0, 24)), $mul.ref(16, 1));
   $M.0 := $store.ref($M.0, $p6_l1_insert0, $p0_l1_insert0);
   $p7_l1_insert0 := $load.ref($M.0, $p0_l1_insert0);
   $p8_l1_insert0 := $add.ref($add.ref($p2_l1_insert0, $mul.ref(0, 24)), $mul.ref(8, 1));
   $M.0 := $store.ref($M.0, $p8_l1_insert0, $p7_l1_insert0);
   $M.0 := $store.ref($M.0, $p0_l1_insert0, $p1_l1_insert0);
   goto $bb9_l0_insert_0;
 Return process block: $bb9_l0_insert_0:
   goto $bb8_l0_insert_0;
 	add statement: $p0_l1_insert0 := $p3_l0_insert0;
 Current block: $bb1_l0_insert_0:
   $p3_l0_insert0 := $add.ref($add.ref($p2_l0_insert0, $mul.ref(0, 24)), $mul.ref(16, 1));
   goto $bb10_l0_insert_0;
 Pass block: $bb10_l0_insert_0:
   $p0_l1_insert0 := $p3_l0_insert0;
   goto $bb0_l1_insert_0;
 $bb2_l0_insert_0 1 0
 New stmts! 
 call $i4_l0_insert0 := __VERIFIER_nondet_int();
 call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4_l0_insert0);
 $i5_l0_insert0 := $ne.i32($i4_l0_insert0, 0);
 assume true;
 goto $bb3_l0_insert_0, $bb4_l0_insert_0;
 
 
 Inlining procedure: l0_insert 0
 arguments: 
 	main.list_main0 
 parameter: 
 	$p0_l0_insert0 
 processing return block $bb4_l0_insert_0
 return param of 'call l0_insert(main.list_main0);': 
 	return to: 
 	Add goto relation: $bb6_main_0 -> $bb5_main_0
 Return block: $bb4_l0_insert_0:
   assume !(($i5_l0_insert0 == 1));
   $p6_l0_insert0 := $add.ref($add.ref($p2_l0_insert0, $mul.ref(0, 24)), $mul.ref(0, 1));
   $M.0 := $store.ref($M.0, $p6_l0_insert0, $p0_l0_insert0);
   $p7_l0_insert0 := $load.ref($M.0, $p0_l0_insert0);
   $p8_l0_insert0 := $add.ref($add.ref($p2_l0_insert0, $mul.ref(0, 24)), $mul.ref(8, 1));
   $M.0 := $store.ref($M.0, $p8_l0_insert0, $p7_l0_insert0);
   $M.0 := $store.ref($M.0, $p0_l0_insert0, $p1_l0_insert0);
   goto $bb6_main_0;
 Return process block: $bb6_main_0:
   goto $bb5_main_0;
 	add statement: $p0_l0_insert0 := main.list_main0;
 Current block: $bb1_main_0:
   goto $bb7_main_0;
 Pass block: $bb7_main_0:
   $p0_l0_insert0 := main.list_main0;
   goto $bb0_l0_insert_0;
 $bb2_main_0 1 0
 New stmts! 
 call $i0_main0 := __VERIFIER_nondet_int();
 call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0_main0);
 $i1_main0 := $ne.i32($i0_main0, 0);
 assume true;
 goto $bb3_main_0, $bb4_main_0;
 
 $bb4_main_0 2 1
 New stmts! 
 assume !(($i1_main0 == 1));
 $p2_main0 := $load.ref($M.0, main.list_main0);
 
 New stmts! 
 $r_main0 := 0;
 return;
 
 call l0_destroy($p2_main0);
 inlining procedure: l0_destroy
 $bb1_l0_destroy_0 2 1
 New stmts! 
 $p2_l0_destroy0 := $add.ref($add.ref($p1_l0_destroy0, $mul.ref(0, 24)), $mul.ref(16, 1));
 $p3_l0_destroy0 := $load.ref($M.0, $p2_l0_destroy0);
 
 New stmts! 
 $p4_l0_destroy0 := $add.ref($add.ref($p1_l0_destroy0, $mul.ref(0, 24)), $mul.ref(8, 1));
 $p5_l0_destroy0 := $load.ref($M.0, $p4_l0_destroy0);
 $p6_l0_destroy0 := $bitcast.ref.ref($p1_l0_destroy0);
 call free_($p6_l0_destroy0);
 goto $bb2_l0_destroy_0;
 
 call l1_destroy($p3_l0_destroy0);
 inlining procedure: l1_destroy
 $bb1_l1_destroy_0 2 1
 New stmts! 
 $p2_l1_destroy0 := $add.ref($add.ref($p1_l1_destroy0, $mul.ref(0, 24)), $mul.ref(0, 1));
 $p3_l1_destroy0 := $load.ref($M.0, $p2_l1_destroy0);
 
 New stmts! 
 $p4_l1_destroy0 := $add.ref($add.ref($p1_l1_destroy0, $mul.ref(0, 24)), $mul.ref(8, 1));
 $p5_l1_destroy0 := $load.ref($M.0, $p4_l1_destroy0);
 $p6_l1_destroy0 := $bitcast.ref.ref($p1_l1_destroy0);
 call free_($p6_l1_destroy0);
 goto $bb2_l1_destroy_0;
 
 call l2_destroy($p3_l1_destroy0);
 
 Inlining procedure: l2_destroy 0
 arguments: 
 	$p3_l1_destroy0 
 parameter: 
 	$p0_l2_destroy0 
 processing return block $bb4_l2_destroy_0
 return param of 'call l2_destroy($p3_l1_destroy0);': 
 	return to: 
 	Add goto relation: $bb6_l1_destroy_0 -> $bb5_l1_destroy_0
 Return block: $bb4_l2_destroy_0:
   assume !(($i7_l2_destroy0 == 1));
   goto $bb6_l1_destroy_0;
 Return process block: $bb6_l1_destroy_0:
   goto $bb5_l1_destroy_0;
 	add statement: $p0_l2_destroy0 := $p3_l1_destroy0;
 Current block: $bb1_l1_destroy_0:
   $p2_l1_destroy0 := $add.ref($add.ref($p1_l1_destroy0, $mul.ref(0, 24)), $mul.ref(0, 1));
   $p3_l1_destroy0 := $load.ref($M.0, $p2_l1_destroy0);
   goto $bb7_l1_destroy_0;
 Pass block: $bb7_l1_destroy_0:
   $p0_l2_destroy0 := $p3_l1_destroy0;
   goto $bb0_l2_destroy_0;
 
 Inlining procedure: l1_destroy 0
 arguments: 
 	$p3_l0_destroy0 
 parameter: 
 	$p0_l1_destroy0 
 processing return block $bb4_l1_destroy_0
 return param of 'call l1_destroy($p3_l0_destroy0);': 
 	return to: 
 	Add goto relation: $bb6_l0_destroy_0 -> $bb5_l0_destroy_0
 Return block: $bb4_l1_destroy_0:
   assume !(($i7_l1_destroy0 == 1));
   goto $bb6_l0_destroy_0;
 Return process block: $bb6_l0_destroy_0:
   goto $bb5_l0_destroy_0;
 	add statement: $p0_l1_destroy0 := $p3_l0_destroy0;
 Current block: $bb1_l0_destroy_0:
   $p2_l0_destroy0 := $add.ref($add.ref($p1_l0_destroy0, $mul.ref(0, 24)), $mul.ref(16, 1));
   $p3_l0_destroy0 := $load.ref($M.0, $p2_l0_destroy0);
   goto $bb7_l0_destroy_0;
 Pass block: $bb7_l0_destroy_0:
   $p0_l1_destroy0 := $p3_l0_destroy0;
   goto $bb0_l1_destroy_0;
 
 Inlining procedure: l0_destroy 0
 arguments: 
 	$p2_main0 
 parameter: 
 	$p0_l0_destroy0 
 processing return block $bb4_l0_destroy_0
 return param of 'call l0_destroy($p2_main0);': 
 	return to: 
 	Add goto relation: $bb9_main_0 -> $bb8_main_0
 Return block: $bb4_l0_destroy_0:
   assume !(($i7_l0_destroy0 == 1));
   goto $bb9_main_0;
 Return process block: $bb9_main_0:
   goto $bb8_main_0;
 	add statement: $p0_l0_destroy0 := $p2_main0;
 Current block: $bb4_main_0:
   assume !(($i1_main0 == 1));
   $p2_main0 := $load.ref($M.0, main.list_main0);
   goto $bb10_main_0;
 Pass block: $bb10_main_0:
   $p0_l0_destroy0 := $p2_main0;
   goto $bb0_l0_destroy_0;
 Splitting return block
 =====================CENTER NEW===================
 procedure main()
   returns ($r_main0: i32)
 {
   var $i0_main0: i32;
   var $i1_main0: i1;
   var $p2_main0: ref;
   var $r_main0: i32;
   var $p0_l0_insert0: ref32;
   var $p1_l0_insert0: ref8;
   var $p2_l0_insert0: ref;
   var $p3_l0_insert0: ref;
   var $i4_l0_insert0: i32;
   var $i5_l0_insert0: i1;
   var $p6_l0_insert0: ref;
   var $p7_l0_insert0: ref;
   var $p8_l0_insert0: ref;
   var $i0_zalloc_or_die0: i32;
   var $i1_zalloc_or_die0: i64;
   var $p2_zalloc_or_die0: ref8;
   var $i3_zalloc_or_die0: i1;
   var $r_zalloc_or_die0: ref32;
   var $i0_calloc_model0: i64;
   var $i1_calloc_model0: i64;
   var $i2_calloc_model0: i64;
   var $p3_calloc_model0: ref8;
   var $i4_calloc_model0: i64;
   var $r_calloc_model0: ref32;
   var $p0_l1_insert0: ref32;
   var $p1_l1_insert0: ref8;
   var $p2_l1_insert0: ref;
   var $p3_l1_insert0: ref;
   var $i4_l1_insert0: i32;
   var $i5_l1_insert0: i1;
   var $p6_l1_insert0: ref;
   var $p7_l1_insert0: ref;
   var $p8_l1_insert0: ref;
   var $i0_zalloc_or_die1: i32;
   var $i1_zalloc_or_die1: i64;
   var $p2_zalloc_or_die1: ref8;
   var $i3_zalloc_or_die1: i1;
   var $r_zalloc_or_die1: ref32;
   var $p0_l2_insert0: ref32;
   var $p1_l2_insert0: ref8;
   var $p2_l2_insert0: ref;
   var $p3_l2_insert0: ref;
   var $i4_l2_insert0: i32;
   var $i5_l2_insert0: i1;
   var $p6_l2_insert0: ref;
   var $p7_l2_insert0: ref;
   var $p8_l2_insert0: ref;
   var $p0_l0_destroy0: ref32;
   var $p1_l0_destroy0: ref;
   var $p2_l0_destroy0: ref;
   var $p3_l0_destroy0: ref;
   var $p4_l0_destroy0: ref;
   var $p5_l0_destroy0: ref;
   var $p6_l0_destroy0: ref8;
   var $i7_l0_destroy0: i1;
   var $p0_l1_destroy0: ref32;
   var $p1_l1_destroy0: ref;
   var $p2_l1_destroy0: ref;
   var $p3_l1_destroy0: ref;
   var $p4_l1_destroy0: ref;
   var $p5_l1_destroy0: ref;
   var $p6_l1_destroy0: ref8;
   var $i7_l1_destroy0: i1;
   var $p0_l2_destroy0: ref32;
   var $p1_l2_destroy0: ref;
   var $p2_l2_destroy0: ref;
   var $p3_l2_destroy0: ref;
   var $p4_l2_destroy0: ref;
   var $p5_l2_destroy0: ref;
   var $p6_l2_destroy0: ref8;
   var $i7_l2_destroy0: i1;
 $bb0_main_0:
   call {:cexpr "smack:entry:main"} boogie_si_record_ref(main_main0);
   goto $bb1_main_0;
 $bb1_main_0:
   goto $bb7_main_0;
 $bb2_main_0:
   call $i0_main0 := __VERIFIER_nondet_int();
   call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0_main0);
   $i1_main0 := $ne.i32($i0_main0, 0);
   assume true;
   goto $bb3_main_0, $bb4_main_0;
 $bb3_main_0:
   assume ($i1_main0 == 1);
   goto $bb1_main_0;
 $bb4_main_0:
   assume !(($i1_main0 == 1));
   $p2_main0 := $load.ref($M.0, main.list_main0);
   goto $bb10_main_0;
 $bb6_main_0:
   goto $bb5_main_0;
 $bb7_main_0:
   $p0_l0_insert0 := main.list_main0;
   goto $bb0_l0_insert_0;
 $bb5_main_0:
   goto $bb2_main_0;
 $bb9_main_0:
   goto $bb8_main_0;
 $bb10_main_0:
   $p0_l0_destroy0 := $p2_main0;
   goto $bb0_l0_destroy_0;
 $bb8_main_0:
   $r_main0 := 0;
   return;
 $bb0_l0_insert_0:
   goto $bb7_l0_insert_0;
 $bb1_l0_insert_0:
   $p3_l0_insert0 := $add.ref($add.ref($p2_l0_insert0, $mul.ref(0, 24)), $mul.ref(16, 1));
   goto $bb10_l0_insert_0;
 $bb2_l0_insert_0:
   call $i4_l0_insert0 := __VERIFIER_nondet_int();
   call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4_l0_insert0);
   $i5_l0_insert0 := $ne.i32($i4_l0_insert0, 0);
   assume true;
   goto $bb3_l0_insert_0, $bb4_l0_insert_0;
 $bb3_l0_insert_0:
   assume ($i5_l0_insert0 == 1);
   goto $bb1_l0_insert_0;
 $bb4_l0_insert_0:
   assume !(($i5_l0_insert0 == 1));
   $p6_l0_insert0 := $add.ref($add.ref($p2_l0_insert0, $mul.ref(0, 24)), $mul.ref(0, 1));
   $M.0 := $store.ref($M.0, $p6_l0_insert0, $p0_l0_insert0);
   $p7_l0_insert0 := $load.ref($M.0, $p0_l0_insert0);
   $p8_l0_insert0 := $add.ref($add.ref($p2_l0_insert0, $mul.ref(0, 24)), $mul.ref(8, 1));
   $M.0 := $store.ref($M.0, $p8_l0_insert0, $p7_l0_insert0);
   $M.0 := $store.ref($M.0, $p0_l0_insert0, $p1_l0_insert0);
   goto $bb6_main_0;
 $bb6_l0_insert_0:
   $p1_l0_insert0 := $r_zalloc_or_die0;
   goto $bb5_l0_insert_0;
 $bb7_l0_insert_0:
   $i0_zalloc_or_die0 := 24;
   goto $bb0_zalloc_or_die_0;
 $bb5_l0_insert_0:
   $p2_l0_insert0 := $bitcast.ref.ref($p1_l0_insert0);
   goto $bb1_l0_insert_0;
 $bb9_l0_insert_0:
   goto $bb8_l0_insert_0;
 $bb10_l0_insert_0:
   $p0_l1_insert0 := $p3_l0_insert0;
   goto $bb0_l1_insert_0;
 $bb8_l0_insert_0:
   goto $bb2_l0_insert_0;
 $bb0_zalloc_or_die_0:
   call {:cexpr "zalloc_or_die:arg:size"} boogie_si_record_i32($i0_zalloc_or_die0);
   $i1_zalloc_or_die0 := $zext.i32.i64($i0_zalloc_or_die0);
   goto $bb5_zalloc_or_die_0;
 $bb1_zalloc_or_die_0:
   assume ($i3_zalloc_or_die0 == 1);
   $r_zalloc_or_die0 := $p2_zalloc_or_die0;
   goto $bb6_l0_insert_0;
 $bb2_zalloc_or_die_0:
   assume !(($i3_zalloc_or_die0 == 1));
   call abort();
   assume false;
 $bb4_zalloc_or_die_0:
   $p2_zalloc_or_die0 := $r_calloc_model0;
   goto $bb3_zalloc_or_die_0;
 $bb5_zalloc_or_die_0:
   $i0_calloc_model0 := 1;
   $i1_calloc_model0 := $i1_zalloc_or_die0;
   goto $bb0_calloc_model_0;
 $bb3_zalloc_or_die_0:
   $i3_zalloc_or_die0 := $ne.ref($p2_zalloc_or_die0, $0.ref_zalloc_or_die0);
   assume true;
   goto $bb1_zalloc_or_die_0, $bb2_zalloc_or_die_0;
 $bb0_calloc_model_0:
   call {:cexpr "calloc_model:arg:nmemb"} boogie_si_record_i64($i0_calloc_model0);
   call {:cexpr "calloc_model:arg:size"} boogie_si_record_i64($i1_calloc_model0);
   $i2_calloc_model0 := $mul.i64($i0_calloc_model0, $i1_calloc_model0);
   call $p3_calloc_model0 := malloc($i2_calloc_model0);
   $i4_calloc_model0 := $mul.i64($i0_calloc_model0, $i1_calloc_model0);
   call $M.0_calloc_model0 := $memset.i8($M.0, $p3_calloc_model0, 0, $i4_calloc_model0, false);
   $r_calloc_model0 := $p3_calloc_model0;
   goto $bb4_zalloc_or_die_0;
 $bb0_l1_insert_0:
   goto $bb7_l1_insert_0;
 $bb1_l1_insert_0:
   $p3_l1_insert0 := $add.ref($add.ref($p2_l1_insert0, $mul.ref(0, 24)), $mul.ref(0, 1));
   goto $bb10_l1_insert_0;
 $bb2_l1_insert_0:
   call $i4_l1_insert0 := __VERIFIER_nondet_int();
   call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4_l1_insert0);
   $i5_l1_insert0 := $ne.i32($i4_l1_insert0, 0);
   assume true;
   goto $bb3_l1_insert_0, $bb4_l1_insert_0;
 $bb3_l1_insert_0:
   assume ($i5_l1_insert0 == 1);
   goto $bb1_l1_insert_0;
 $bb4_l1_insert_0:
   assume !(($i5_l1_insert0 == 1));
   $p6_l1_insert0 := $add.ref($add.ref($p2_l1_insert0, $mul.ref(0, 24)), $mul.ref(16, 1));
   $M.0 := $store.ref($M.0, $p6_l1_insert0, $p0_l1_insert0);
   $p7_l1_insert0 := $load.ref($M.0, $p0_l1_insert0);
   $p8_l1_insert0 := $add.ref($add.ref($p2_l1_insert0, $mul.ref(0, 24)), $mul.ref(8, 1));
   $M.0 := $store.ref($M.0, $p8_l1_insert0, $p7_l1_insert0);
   $M.0 := $store.ref($M.0, $p0_l1_insert0, $p1_l1_insert0);
   goto $bb9_l0_insert_0;
 $bb6_l1_insert_0:
   $p1_l1_insert0 := $r_zalloc_or_die1;
   goto $bb5_l1_insert_0;
 $bb7_l1_insert_0:
   $i0_zalloc_or_die1 := 24;
   goto $bb0_zalloc_or_die_1;
 $bb5_l1_insert_0:
   $p2_l1_insert0 := $bitcast.ref.ref($p1_l1_insert0);
   goto $bb1_l1_insert_0;
 $bb9_l1_insert_0:
   goto $bb8_l1_insert_0;
 $bb10_l1_insert_0:
   $p0_l2_insert0 := $p3_l1_insert0;
   goto $bb0_l2_insert_0;
 $bb8_l1_insert_0:
   goto $bb2_l1_insert_0;
 $bb0_zalloc_or_die_1:
   call {:cexpr "zalloc_or_die:arg:size"} boogie_si_record_i32($i0_zalloc_or_die1);
   $i1_zalloc_or_die1 := $zext.i32.i64($i0_zalloc_or_die1);
   call $p2_zalloc_or_die1 := calloc_model(1, $i1_zalloc_or_die1);
   $i3_zalloc_or_die1 := $ne.ref($p2_zalloc_or_die1, $0.ref_zalloc_or_die1);
   assume true;
   goto $bb1_zalloc_or_die_1, $bb2_zalloc_or_die_1;
 $bb1_zalloc_or_die_1:
   assume ($i3_zalloc_or_die1 == 1);
   $r_zalloc_or_die1 := $p2_zalloc_or_die1;
   goto $bb6_l1_insert_0;
 $bb2_zalloc_or_die_1:
   assume !(($i3_zalloc_or_die1 == 1));
   call abort();
   assume false;
 $bb0_l2_insert_0:
   call $p1_l2_insert0 := zalloc_or_die(24);
   $p2_l2_insert0 := $bitcast.ref.ref($p1_l2_insert0);
   goto $bb1_l2_insert_0;
 $bb1_l2_insert_0:
   $p3_l2_insert0 := $add.ref($add.ref($p2_l2_insert0, $mul.ref(0, 24)), $mul.ref(16, 1));
   call l3_insert($p3_l2_insert0);
   goto $bb2_l2_insert_0;
 $bb2_l2_insert_0:
   call $i4_l2_insert0 := __VERIFIER_nondet_int();
   call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4_l2_insert0);
   $i5_l2_insert0 := $ne.i32($i4_l2_insert0, 0);
   assume true;
   goto $bb3_l2_insert_0, $bb4_l2_insert_0;
 $bb3_l2_insert_0:
   assume ($i5_l2_insert0 == 1);
   goto $bb1_l2_insert_0;
 $bb4_l2_insert_0:
   assume !(($i5_l2_insert0 == 1));
   $p6_l2_insert0 := $add.ref($add.ref($p2_l2_insert0, $mul.ref(0, 24)), $mul.ref(0, 1));
   $M.0 := $store.ref($M.0, $p6_l2_insert0, $p0_l2_insert0);
   $p7_l2_insert0 := $load.ref($M.0, $p0_l2_insert0);
   $p8_l2_insert0 := $add.ref($add.ref($p2_l2_insert0, $mul.ref(0, 24)), $mul.ref(8, 1));
   $M.0 := $store.ref($M.0, $p8_l2_insert0, $p7_l2_insert0);
   $M.0 := $store.ref($M.0, $p0_l2_insert0, $p1_l2_insert0);
   goto $bb9_l1_insert_0;
 $bb0_l0_destroy_0:
   $p1_l0_destroy0 := $p0_l0_destroy0;
   goto $bb1_l0_destroy_0;
 $bb1_l0_destroy_0:
   $p2_l0_destroy0 := $add.ref($add.ref($p1_l0_destroy0, $mul.ref(0, 24)), $mul.ref(16, 1));
   $p3_l0_destroy0 := $load.ref($M.0, $p2_l0_destroy0);
   goto $bb7_l0_destroy_0;
 $bb2_l0_destroy_0:
   $i7_l0_destroy0 := $ne.ref($p5_l0_destroy0, $0.ref_l0_destroy0);
   assume true;
   goto $bb3_l0_destroy_0, $bb4_l0_destroy_0;
 $bb3_l0_destroy_0:
   assume ($i7_l0_destroy0 == 1);
   $p1_l0_destroy0 := $p5_l0_destroy0;
   goto $bb1_l0_destroy_0;
 $bb4_l0_destroy_0:
   assume !(($i7_l0_destroy0 == 1));
   goto $bb9_main_0;
 $bb6_l0_destroy_0:
   goto $bb5_l0_destroy_0;
 $bb7_l0_destroy_0:
   $p0_l1_destroy0 := $p3_l0_destroy0;
   goto $bb0_l1_destroy_0;
 $bb5_l0_destroy_0:
   $p4_l0_destroy0 := $add.ref($add.ref($p1_l0_destroy0, $mul.ref(0, 24)), $mul.ref(8, 1));
   $p5_l0_destroy0 := $load.ref($M.0, $p4_l0_destroy0);
   $p6_l0_destroy0 := $bitcast.ref.ref($p1_l0_destroy0);
   call free_($p6_l0_destroy0);
   goto $bb2_l0_destroy_0;
 $bb0_l1_destroy_0:
   $p1_l1_destroy0 := $p0_l1_destroy0;
   goto $bb1_l1_destroy_0;
 $bb1_l1_destroy_0:
   $p2_l1_destroy0 := $add.ref($add.ref($p1_l1_destroy0, $mul.ref(0, 24)), $mul.ref(0, 1));
   $p3_l1_destroy0 := $load.ref($M.0, $p2_l1_destroy0);
   goto $bb7_l1_destroy_0;
 $bb2_l1_destroy_0:
   $i7_l1_destroy0 := $ne.ref($p5_l1_destroy0, $0.ref_l1_destroy0);
   assume true;
   goto $bb3_l1_destroy_0, $bb4_l1_destroy_0;
 $bb3_l1_destroy_0:
   assume ($i7_l1_destroy0 == 1);
   $p1_l1_destroy0 := $p5_l1_destroy0;
   goto $bb1_l1_destroy_0;
 $bb4_l1_destroy_0:
   assume !(($i7_l1_destroy0 == 1));
   goto $bb6_l0_destroy_0;
 $bb6_l1_destroy_0:
   goto $bb5_l1_destroy_0;
 $bb7_l1_destroy_0:
   $p0_l2_destroy0 := $p3_l1_destroy0;
   goto $bb0_l2_destroy_0;
 $bb5_l1_destroy_0:
   $p4_l1_destroy0 := $add.ref($add.ref($p1_l1_destroy0, $mul.ref(0, 24)), $mul.ref(8, 1));
   $p5_l1_destroy0 := $load.ref($M.0, $p4_l1_destroy0);
   $p6_l1_destroy0 := $bitcast.ref.ref($p1_l1_destroy0);
   call free_($p6_l1_destroy0);
   goto $bb2_l1_destroy_0;
 $bb0_l2_destroy_0:
   $p1_l2_destroy0 := $p0_l2_destroy0;
   goto $bb1_l2_destroy_0;
 $bb1_l2_destroy_0:
   $p2_l2_destroy0 := $add.ref($add.ref($p1_l2_destroy0, $mul.ref(0, 24)), $mul.ref(16, 1));
   $p3_l2_destroy0 := $load.ref($M.0, $p2_l2_destroy0);
   call l3_destroy($p3_l2_destroy0);
   $p4_l2_destroy0 := $add.ref($add.ref($p1_l2_destroy0, $mul.ref(0, 24)), $mul.ref(8, 1));
   $p5_l2_destroy0 := $load.ref($M.0, $p4_l2_destroy0);
   $p6_l2_destroy0 := $bitcast.ref.ref($p1_l2_destroy0);
   call free_($p6_l2_destroy0);
   goto $bb2_l2_destroy_0;
 $bb2_l2_destroy_0:
   $i7_l2_destroy0 := $ne.ref($p5_l2_destroy0, $0.ref_l2_destroy0);
   assume true;
   goto $bb3_l2_destroy_0, $bb4_l2_destroy_0;
 $bb3_l2_destroy_0:
   assume ($i7_l2_destroy0 == 1);
   $p1_l2_destroy0 := $p5_l2_destroy0;
   goto $bb1_l2_destroy_0;
 $bb4_l2_destroy_0:
   assume !(($i7_l2_destroy0 == 1));
   goto $bb6_l1_destroy_0;
 }
 =====================CENTER NEW===================
 from bb: $bb0_main_0 to bb: $bb1_main_0 
 from bb: $bb1_main_0 to bb: $bb7_main_0 
 from bb: $bb2_main_0 to bb: $bb3_main_0 $bb4_main_0 
 from bb: $bb3_main_0 to bb: $bb1_main_0 
 from bb: $bb4_main_0 to bb: $bb10_main_0 
 from bb: $bb6_main_0 to bb: $bb5_main_0 
 from bb: $bb7_main_0 to bb: $bb0_l0_insert_0 
 from bb: $bb5_main_0 to bb: $bb2_main_0 
 from bb: $bb9_main_0 to bb: $bb8_main_0 
 from bb: $bb10_main_0 to bb: $bb0_l0_destroy_0 
 from bb: $bb0_l0_insert_0 to bb: $bb7_l0_insert_0 
 from bb: $bb1_l0_insert_0 to bb: $bb10_l0_insert_0 
 from bb: $bb2_l0_insert_0 to bb: $bb3_l0_insert_0 $bb4_l0_insert_0 
 from bb: $bb3_l0_insert_0 to bb: $bb1_l0_insert_0 
 from bb: $bb4_l0_insert_0 to bb: $bb6_main_0 
 from bb: $bb6_l0_insert_0 to bb: $bb5_l0_insert_0 
 from bb: $bb7_l0_insert_0 to bb: $bb0_zalloc_or_die_0 
 from bb: $bb5_l0_insert_0 to bb: $bb1_l0_insert_0 
 from bb: $bb9_l0_insert_0 to bb: $bb8_l0_insert_0 
 from bb: $bb10_l0_insert_0 to bb: $bb0_l1_insert_0 
 from bb: $bb8_l0_insert_0 to bb: $bb2_l0_insert_0 
 from bb: $bb0_zalloc_or_die_0 to bb: $bb5_zalloc_or_die_0 
 from bb: $bb1_zalloc_or_die_0 to bb: $bb6_l0_insert_0 
 from bb: $bb4_zalloc_or_die_0 to bb: $bb3_zalloc_or_die_0 
 from bb: $bb5_zalloc_or_die_0 to bb: $bb0_calloc_model_0 
 from bb: $bb3_zalloc_or_die_0 to bb: $bb1_zalloc_or_die_0 $bb2_zalloc_or_die_0 
 from bb: $bb0_calloc_model_0 to bb: $bb4_zalloc_or_die_0 
 from bb: $bb0_l1_insert_0 to bb: $bb7_l1_insert_0 
 from bb: $bb1_l1_insert_0 to bb: $bb10_l1_insert_0 
 from bb: $bb2_l1_insert_0 to bb: $bb3_l1_insert_0 $bb4_l1_insert_0 
 from bb: $bb3_l1_insert_0 to bb: $bb1_l1_insert_0 
 from bb: $bb4_l1_insert_0 to bb: $bb9_l0_insert_0 
 from bb: $bb6_l1_insert_0 to bb: $bb5_l1_insert_0 
 from bb: $bb7_l1_insert_0 to bb: $bb0_zalloc_or_die_1 
 from bb: $bb5_l1_insert_0 to bb: $bb1_l1_insert_0 
 from bb: $bb9_l1_insert_0 to bb: $bb8_l1_insert_0 
 from bb: $bb10_l1_insert_0 to bb: $bb0_l2_insert_0 
 from bb: $bb8_l1_insert_0 to bb: $bb2_l1_insert_0 
 from bb: $bb0_zalloc_or_die_1 to bb: $bb1_zalloc_or_die_1 $bb2_zalloc_or_die_1 
 from bb: $bb1_zalloc_or_die_1 to bb: $bb6_l1_insert_0 
 from bb: $bb0_l2_insert_0 to bb: $bb1_l2_insert_0 
 from bb: $bb1_l2_insert_0 to bb: $bb2_l2_insert_0 
 from bb: $bb2_l2_insert_0 to bb: $bb3_l2_insert_0 $bb4_l2_insert_0 
 from bb: $bb3_l2_insert_0 to bb: $bb1_l2_insert_0 
 from bb: $bb4_l2_insert_0 to bb: $bb9_l1_insert_0 
 from bb: $bb0_l0_destroy_0 to bb: $bb1_l0_destroy_0 
 from bb: $bb1_l0_destroy_0 to bb: $bb7_l0_destroy_0 
 from bb: $bb2_l0_destroy_0 to bb: $bb3_l0_destroy_0 $bb4_l0_destroy_0 
 from bb: $bb3_l0_destroy_0 to bb: $bb1_l0_destroy_0 
 from bb: $bb4_l0_destroy_0 to bb: $bb9_main_0 
 from bb: $bb6_l0_destroy_0 to bb: $bb5_l0_destroy_0 
 from bb: $bb7_l0_destroy_0 to bb: $bb0_l1_destroy_0 
 from bb: $bb5_l0_destroy_0 to bb: $bb2_l0_destroy_0 
 from bb: $bb0_l1_destroy_0 to bb: $bb1_l1_destroy_0 
 from bb: $bb1_l1_destroy_0 to bb: $bb7_l1_destroy_0 
 from bb: $bb2_l1_destroy_0 to bb: $bb3_l1_destroy_0 $bb4_l1_destroy_0 
 from bb: $bb3_l1_destroy_0 to bb: $bb1_l1_destroy_0 
 from bb: $bb4_l1_destroy_0 to bb: $bb6_l0_destroy_0 
 from bb: $bb6_l1_destroy_0 to bb: $bb5_l1_destroy_0 
 from bb: $bb7_l1_destroy_0 to bb: $bb0_l2_destroy_0 
 from bb: $bb5_l1_destroy_0 to bb: $bb2_l1_destroy_0 
 from bb: $bb0_l2_destroy_0 to bb: $bb1_l2_destroy_0 
 from bb: $bb1_l2_destroy_0 to bb: $bb2_l2_destroy_0 
 from bb: $bb2_l2_destroy_0 to bb: $bb3_l2_destroy_0 $bb4_l2_destroy_0 
 from bb: $bb3_l2_destroy_0 to bb: $bb1_l2_destroy_0 
 from bb: $bb4_l2_destroy_0 to bb: $bb6_l1_destroy_0 
 In $bb8_main_0
 [0mpop: $bb8_main_0
 [0mpop finished
 [0mIn $bb9_main_0
 [0mpop: $bb9_main_0
 [0mpop finished
 [0mIn $bb4_l0_destroy_0
 [0mpop: $bb4_l0_destroy_0
 [0mpop finished
 [0mIn $bb1_l0_destroy_0
 [0mpop: $bb3_l0_destroy_0
 [0mpop: $bb2_l0_destroy_0
 [0mpop: $bb5_l0_destroy_0
 [0mpop: $bb6_l0_destroy_0
 [0mpop: $bb4_l1_destroy_0
 [0mpop: $bb3_l1_destroy_0
 [0mpop: $bb2_l1_destroy_0
 [0mpop: $bb5_l1_destroy_0
 [0mpop: $bb6_l1_destroy_0
 [0mpop: $bb4_l2_destroy_0
 [0mpop: $bb3_l2_destroy_0
 [0mpop: $bb2_l2_destroy_0
 [0mpop: $bb1_l2_destroy_0
 [0mpop: $bb0_l2_destroy_0
 [0mpop: $bb7_l1_destroy_0
 [0mpop: $bb1_l1_destroy_0
 [0mpop: $bb0_l1_destroy_0
 [0mpop: $bb7_l0_destroy_0
 [0mpop: $bb1_l0_destroy_0
 [0mpop finished
 [0mIn $bb0_l0_destroy_0
 [0mpop: $bb0_l0_destroy_0
 [0mpop finished
 [0mIn $bb10_main_0
 [0mpop: $bb10_main_0
 [0mpop finished
 [0mIn $bb4_main_0
 [0mpop: $bb4_main_0
 [0mpop finished
 [0mIn $bb2_zalloc_or_die_1
 [0mpop: $bb2_zalloc_or_die_1
 [0mpop finished
 [0mIn $bb2_zalloc_or_die_0
 [0mpop: $bb2_zalloc_or_die_0
 [0mpop finished
 [0mIn $bb1_main_0
 [0mpop: $bb3_main_0
 [0mpop: $bb2_main_0
 [0mpop: $bb5_main_0
 [0mpop: $bb6_main_0
 [0mpop: $bb4_l0_insert_0
 [0mpop: $bb3_l0_insert_0
 [0mpop: $bb2_l0_insert_0
 [0mpop: $bb8_l0_insert_0
 [0mpop: $bb9_l0_insert_0
 [0mpop: $bb4_l1_insert_0
 [0mpop: $bb3_l1_insert_0
 [0mpop: $bb2_l1_insert_0
 [0mpop: $bb8_l1_insert_0
 [0mpop: $bb9_l1_insert_0
 [0mpop: $bb4_l2_insert_0
 [0mpop: $bb3_l2_insert_0
 [0mpop: $bb2_l2_insert_0
 [0mpop: $bb1_l2_insert_0
 [0mpop: $bb0_l2_insert_0
 [0mpop: $bb10_l1_insert_0
 [0mpop: $bb1_l1_insert_0
 [0mpop: $bb5_l1_insert_0
 [0mpop: $bb6_l1_insert_0
 [0mpop: $bb1_zalloc_or_die_1
 [0mpop: $bb0_zalloc_or_die_1
 [0mpop: $bb7_l1_insert_0
 [0mpop: $bb0_l1_insert_0
 [0mpop: $bb10_l0_insert_0
 [0mpop: $bb1_l0_insert_0
 [0mpop: $bb5_l0_insert_0
 [0mpop: $bb6_l0_insert_0
 [0mpop: $bb1_zalloc_or_die_0
 [0mpop: $bb3_zalloc_or_die_0
 [0mpop: $bb4_zalloc_or_die_0
 [0mpop: $bb0_calloc_model_0
 [0mpop: $bb5_zalloc_or_die_0
 [0mpop: $bb0_zalloc_or_die_0
 [0mpop: $bb7_l0_insert_0
 [0mpop: $bb0_l0_insert_0
 [0mpop: $bb7_main_0
 [0mpop: $bb1_main_0
 [0mpop finished
 [0mIn $bb0_main_0
 [0mpop: $bb0_main_0
 [0mpop finished
 [0mIn pro:$bb0_main_0 1 $bb1_main_0 
 In pro:$bb1_main_0 1 $bb7_main_0 
 In pro:$bb7_main_0 1 $bb0_l0_insert_0 
 In pro:$bb0_l0_insert_0 1 $bb7_l0_insert_0 
 In pro:$bb7_l0_insert_0 1 $bb0_zalloc_or_die_0 
 In pro:$bb0_zalloc_or_die_0 1 $bb5_zalloc_or_die_0 
 In pro:$bb5_zalloc_or_die_0 1 $bb0_calloc_model_0 
 In pro:$bb0_calloc_model_0 1 $bb4_zalloc_or_die_0 
 In pro:$bb4_zalloc_or_die_0 1 $bb3_zalloc_or_die_0 
 In pro:$bb3_zalloc_or_die_0 1 $bb1_zalloc_or_die_0 $bb2_zalloc_or_die_0 
 In pro:$bb1_zalloc_or_die_0 1 $bb6_l0_insert_0 
 In pro:$bb6_l0_insert_0 1 $bb5_l0_insert_0 
 In pro:$bb5_l0_insert_0 1 $bb1_l0_insert_0 
 In pro:$bb1_l0_insert_0 1 $bb10_l0_insert_0 
 In pro:$bb10_l0_insert_0 1 $bb0_l1_insert_0 
 In pro:$bb0_l1_insert_0 1 $bb7_l1_insert_0 
 In pro:$bb7_l1_insert_0 1 $bb0_zalloc_or_die_1 
 In pro:$bb0_zalloc_or_die_1 1 $bb1_zalloc_or_die_1 $bb2_zalloc_or_die_1 
 In pro:$bb1_zalloc_or_die_1 1 $bb6_l1_insert_0 
 In pro:$bb6_l1_insert_0 1 $bb5_l1_insert_0 
 In pro:$bb5_l1_insert_0 1 $bb1_l1_insert_0 
 In pro:$bb1_l1_insert_0 1 $bb10_l1_insert_0 
 In pro:$bb10_l1_insert_0 1 $bb0_l2_insert_0 
 In pro:$bb0_l2_insert_0 1 $bb1_l2_insert_0 
 In pro:$bb1_l2_insert_0 1 $bb2_l2_insert_0 
 In pro:$bb2_l2_insert_0 1 $bb3_l2_insert_0 $bb4_l2_insert_0 
 In pro:$bb3_l2_insert_0 1 $bb1_l2_insert_0 
 In pro:$bb1_l2_insert_0 2 $bb2_l2_insert_0 
 In pro:$bb2_l2_insert_0 2 $bb3_l2_insert_0 $bb4_l2_insert_0 
 In pro:$bb3_l2_insert_0 2 $bb1_l2_insert_0 
 In pro:$bb1_l2_insert_0 3 $bb2_l2_insert_0 
 In pro:$bb2_l2_insert_0 3 $bb3_l2_insert_0 $bb4_l2_insert_0 
 In pro:$bb3_l2_insert_0 3 $bb1_l2_insert_0 
 In pro:$bb4_l2_insert_0 1 $bb9_l1_insert_0 
 In pro:$bb9_l1_insert_0 1 $bb8_l1_insert_0 
 In pro:$bb8_l1_insert_0 1 $bb2_l1_insert_0 
 In pro:$bb2_l1_insert_0 1 $bb3_l1_insert_0 $bb4_l1_insert_0 
 In pro:$bb3_l1_insert_0 1 $bb1_l1_insert_0 
 In pro:$bb1_l1_insert_0 2 $bb10_l1_insert_0 
 In pro:$bb10_l1_insert_0 2 $bb0_l2_insert_0 
 In pro:$bb0_l2_insert_0 2 $bb1_l2_insert_0 
 In pro:$bb4_l1_insert_0 1 $bb9_l0_insert_0 
 In pro:$bb9_l0_insert_0 1 $bb8_l0_insert_0 
 In pro:$bb8_l0_insert_0 1 $bb2_l0_insert_0 
 In pro:$bb2_l0_insert_0 1 $bb3_l0_insert_0 $bb4_l0_insert_0 
 In pro:$bb3_l0_insert_0 1 $bb1_l0_insert_0 
 In pro:$bb1_l0_insert_0 2 $bb10_l0_insert_0 
 In pro:$bb10_l0_insert_0 2 $bb0_l1_insert_0 
 In pro:$bb0_l1_insert_0 2 $bb7_l1_insert_0 
 In pro:$bb7_l1_insert_0 2 $bb0_zalloc_or_die_1 
 In pro:$bb0_zalloc_or_die_1 2 $bb1_zalloc_or_die_1 $bb2_zalloc_or_die_1 
 In pro:$bb1_zalloc_or_die_1 2 $bb6_l1_insert_0 
 In pro:$bb6_l1_insert_0 2 $bb5_l1_insert_0 
 In pro:$bb5_l1_insert_0 2 $bb1_l1_insert_0 
 In pro:$bb1_l1_insert_0 2 $bb10_l1_insert_0 
 In pro:$bb10_l1_insert_0 2 $bb0_l2_insert_0 
 In pro:$bb4_l0_insert_0 1 $bb6_main_0 
 In pro:$bb6_main_0 1 $bb5_main_0 
 In pro:$bb5_main_0 1 $bb2_main_0 
 In pro:$bb2_main_0 1 $bb3_main_0 $bb4_main_0 
 In pro:$bb3_main_0 1 $bb1_main_0 
 In pro:$bb1_main_0 2 $bb7_main_0 
 In pro:$bb7_main_0 2 $bb0_l0_insert_0 
 In pro:$bb0_l0_insert_0 2 $bb7_l0_insert_0 
 In pro:$bb7_l0_insert_0 2 $bb0_zalloc_or_die_0 
 In pro:$bb0_zalloc_or_die_0 2 $bb5_zalloc_or_die_0 
 In pro:$bb5_zalloc_or_die_0 2 $bb0_calloc_model_0 
 In pro:$bb4_main_0 1 $bb10_main_0 
 In pro:$bb10_main_0 1 $bb0_l0_destroy_0 
 In pro:$bb0_l0_destroy_0 1 $bb1_l0_destroy_0 
 In pro:$bb1_l0_destroy_0 1 $bb7_l0_destroy_0 
 In pro:$bb7_l0_destroy_0 1 $bb0_l1_destroy_0 
 In pro:$bb0_l1_destroy_0 1 $bb1_l1_destroy_0 
 In pro:$bb1_l1_destroy_0 1 $bb7_l1_destroy_0 
 In pro:$bb4_l2_insert_0 1 $bb9_l1_insert_0 
 In pro:$bb9_l1_insert_0 1 $bb8_l1_insert_0 
 In pro:$bb8_l1_insert_0 1 $bb2_l1_insert_0 
 In pro:$bb2_l1_insert_0 1 $bb3_l1_insert_0 $bb4_l1_insert_0 
 In pro:$bb3_l1_insert_0 1 $bb1_l1_insert_0 
 In pro:$bb1_l1_insert_0 2 $bb10_l1_insert_0 
 In pro:$bb10_l1_insert_0 2 $bb0_l2_insert_0 
 In pro:$bb0_l2_insert_0 2 $bb1_l2_insert_0 
 In pro:$bb1_l2_insert_0 3 $bb2_l2_insert_0 
 In pro:$bb2_l2_insert_0 3 $bb3_l2_insert_0 $bb4_l2_insert_0 
 In pro:$bb3_l2_insert_0 2 $bb1_l2_insert_0 
 In pro:$bb4_l2_insert_0 2 $bb9_l1_insert_0 
 In pro:$bb9_l1_insert_0 2 $bb8_l1_insert_0 
 In pro:$bb8_l1_insert_0 2 $bb2_l1_insert_0 
 In pro:$bb2_l1_insert_0 2 $bb3_l1_insert_0 $bb4_l1_insert_0 
 In pro:$bb3_l1_insert_0 2 $bb1_l1_insert_0 
 In pro:$bb1_l1_insert_0 3 $bb10_l1_insert_0 
 In pro:$bb10_l1_insert_0 3 $bb0_l2_insert_0 
 In pro:$bb0_l2_insert_0 3 $bb1_l2_insert_0 
 In pro:$bb4_l1_insert_0 1 $bb9_l0_insert_0 
 In pro:$bb9_l0_insert_0 1 $bb8_l0_insert_0 
 In pro:$bb8_l0_insert_0 1 $bb2_l0_insert_0 
 In pro:$bb2_l0_insert_0 1 $bb3_l0_insert_0 $bb4_l0_insert_0 
 In pro:$bb3_l0_insert_0 1 $bb1_l0_insert_0 
 In pro:$bb1_l0_insert_0 2 $bb10_l0_insert_0 
 In pro:$bb10_l0_insert_0 2 $bb0_l1_insert_0 
 In pro:$bb0_l1_insert_0 2 $bb7_l1_insert_0 
 In pro:$bb4_l0_insert_0 1 $bb6_main_0 
 In pro:$bb6_main_0 1 $bb5_main_0 
 In pro:$bb5_main_0 1 $bb2_main_0 
 In pro:$bb2_main_0 1 $bb3_main_0 $bb4_main_0 
 In pro:$bb4_l1_insert_0 1 $bb9_l0_insert_0 
 In pro:$bb9_l0_insert_0 1 $bb8_l0_insert_0 
 In pro:$bb8_l0_insert_0 1 $bb2_l0_insert_0 
 In pro:$bb2_l0_insert_0 1 $bb3_l0_insert_0 $bb4_l0_insert_0 
 In pro:$bb3_l0_insert_0 1 $bb1_l0_insert_0 
 In pro:$bb1_l0_insert_0 2 $bb10_l0_insert_0 
 In pro:$bb10_l0_insert_0 2 $bb0_l1_insert_0 
 In pro:$bb0_l1_insert_0 2 $bb7_l1_insert_0 
 In pro:$bb7_l1_insert_0 2 $bb0_zalloc_or_die_1 
 In pro:$bb0_zalloc_or_die_1 2 $bb1_zalloc_or_die_1 $bb2_zalloc_or_die_1 
 In pro:$bb1_zalloc_or_die_1 2 $bb6_l1_insert_0 
 In pro:$bb6_l1_insert_0 2 $bb5_l1_insert_0 
 In pro:$bb5_l1_insert_0 2 $bb1_l1_insert_0 
 In pro:$bb1_l1_insert_0 2 $bb10_l1_insert_0 
 In pro:$bb10_l1_insert_0 2 $bb0_l2_insert_0 
 In pro:$bb0_l2_insert_0 2 $bb1_l2_insert_0 
 In pro:$bb1_l2_insert_0 3 $bb2_l2_insert_0 
 In pro:$bb2_l2_insert_0 3 $bb3_l2_insert_0 $bb4_l2_insert_0 
 In pro:$bb4_l0_insert_0 1 $bb6_main_0 
 In pro:$bb6_main_0 1 $bb5_main_0 
 In pro:$bb5_main_0 1 $bb2_main_0 
 In pro:$bb2_main_0 1 $bb3_main_0 $bb4_main_0 
 In pro:$bb3_main_0 1 $bb1_main_0 
 In pro:$bb1_main_0 2 $bb7_main_0 
 In pro:$bb7_main_0 2 $bb0_l0_insert_0 
 In pro:$bb0_l0_insert_0 2 $bb7_l0_insert_0 
 In pro:$bb7_l0_insert_0 2 $bb0_zalloc_or_die_0 
 In pro:$bb0_zalloc_or_die_0 2 $bb5_zalloc_or_die_0 
 In pro:$bb5_zalloc_or_die_0 2 $bb0_calloc_model_0 
 In pro:$bb0_calloc_model_0 2 $bb4_zalloc_or_die_0 
 In pro:$bb4_zalloc_or_die_0 2 $bb3_zalloc_or_die_0 
 In pro:$bb3_zalloc_or_die_0 2 $bb1_zalloc_or_die_0 $bb2_zalloc_or_die_0 
 In pro:$bb4_main_0 1 $bb10_main_0 
 In pro:$bb10_main_0 1 $bb0_l0_destroy_0 
 In pro:$bb0_l0_destroy_0 1 $bb1_l0_destroy_0 
 In pro:$bb1_l0_destroy_0 1 $bb7_l0_destroy_0 
 In pro:$bb7_l0_destroy_0 1 $bb0_l1_destroy_0 
 In pro:$bb0_l1_destroy_0 1 $bb1_l1_destroy_0 
 In pro:$bb1_l1_destroy_0 1 $bb7_l1_destroy_0 
 In pro:$bb7_l1_destroy_0 1 $bb0_l2_destroy_0 
 In pro:$bb0_l2_destroy_0 1 $bb1_l2_destroy_0 
 In pro:$bb1_l2_destroy_0 1 $bb2_l2_destroy_0 
 In pro:$bb4_l2_insert_0 1 $bb9_l1_insert_0 
 In pro:$bb9_l1_insert_0 1 $bb8_l1_insert_0 
 In pro:$bb8_l1_insert_0 1 $bb2_l1_insert_0 
 In pro:$bb2_l1_insert_0 1 $bb3_l1_insert_0 $bb4_l1_insert_0 
 In pro:$bb3_l1_insert_0 1 $bb1_l1_insert_0 
 In pro:$bb1_l1_insert_0 2 $bb10_l1_insert_0 
 In pro:$bb10_l1_insert_0 2 $bb0_l2_insert_0 
 In pro:$bb0_l2_insert_0 2 $bb1_l2_insert_0 
 In pro:$bb1_l2_insert_0 2 $bb2_l2_insert_0 
 In pro:$bb2_l2_insert_0 2 $bb3_l2_insert_0 $bb4_l2_insert_0 
 In pro:$bb3_l2_insert_0 1 $bb1_l2_insert_0 
 In pro:$bb1_l2_insert_0 3 $bb2_l2_insert_0 
 In pro:$bb2_l2_insert_0 3 $bb3_l2_insert_0 $bb4_l2_insert_0 
 In pro:$bb3_l2_insert_0 2 $bb1_l2_insert_0 
 In pro:$bb4_l2_insert_0 2 $bb9_l1_insert_0 
 In pro:$bb9_l1_insert_0 2 $bb8_l1_insert_0 
 In pro:$bb8_l1_insert_0 2 $bb2_l1_insert_0 
 In pro:$bb2_l1_insert_0 2 $bb3_l1_insert_0 $bb4_l1_insert_0 
 In pro:$bb3_l1_insert_0 2 $bb1_l1_insert_0 
 In pro:$bb1_l1_insert_0 3 $bb10_l1_insert_0 
 In pro:$bb10_l1_insert_0 3 $bb0_l2_insert_0 
 In pro:$bb0_l2_insert_0 3 $bb1_l2_insert_0 
 In pro:$bb4_l1_insert_0 1 $bb9_l0_insert_0 
 In pro:$bb9_l0_insert_0 1 $bb8_l0_insert_0 
 In pro:$bb8_l0_insert_0 1 $bb2_l0_insert_0 
 In pro:$bb2_l0_insert_0 1 $bb3_l0_insert_0 $bb4_l0_insert_0 
 In pro:$bb3_l0_insert_0 1 $bb1_l0_insert_0 
 In pro:$bb1_l0_insert_0 2 $bb10_l0_insert_0 
 In pro:$bb10_l0_insert_0 2 $bb0_l1_insert_0 
 In pro:$bb0_l1_insert_0 2 $bb7_l1_insert_0 
 In pro:$bb4_l0_insert_0 1 $bb6_main_0 
 In pro:$bb6_main_0 1 $bb5_main_0 
 In pro:$bb5_main_0 1 $bb2_main_0 
 In pro:$bb2_main_0 1 $bb3_main_0 $bb4_main_0 
 In pro:$bb4_l2_insert_0 2 $bb9_l1_insert_0 
 In pro:$bb9_l1_insert_0 2 $bb8_l1_insert_0 
 In pro:$bb8_l1_insert_0 2 $bb2_l1_insert_0 
 In pro:$bb2_l1_insert_0 2 $bb3_l1_insert_0 $bb4_l1_insert_0 
 In pro:$bb3_l1_insert_0 2 $bb1_l1_insert_0 
 In pro:$bb1_l1_insert_0 3 $bb10_l1_insert_0 
 In pro:$bb10_l1_insert_0 3 $bb0_l2_insert_0 
 In pro:$bb0_l2_insert_0 3 $bb1_l2_insert_0 
 In pro:$bb1_l2_insert_0 3 $bb2_l2_insert_0 
 In pro:$bb2_l2_insert_0 3 $bb3_l2_insert_0 $bb4_l2_insert_0 
 In pro:$bb3_l2_insert_0 1 $bb1_l2_insert_0 
 In pro:$bb4_l2_insert_0 3 $bb9_l1_insert_0 
 In pro:$bb9_l1_insert_0 3 $bb8_l1_insert_0 
 In pro:$bb8_l1_insert_0 3 $bb2_l1_insert_0 
 In pro:$bb2_l1_insert_0 3 $bb3_l1_insert_0 $bb4_l1_insert_0 
 In pro:$bb3_l1_insert_0 3 $bb1_l1_insert_0 
 In pro:$bb4_l1_insert_0 1 $bb9_l0_insert_0 
 In pro:$bb4_l1_insert_0 1 $bb9_l0_insert_0 
 In pro:$bb9_l0_insert_0 1 $bb8_l0_insert_0 
 In pro:$bb8_l0_insert_0 1 $bb2_l0_insert_0 
 In pro:$bb2_l0_insert_0 1 $bb3_l0_insert_0 $bb4_l0_insert_0 
 In pro:$bb3_l0_insert_0 1 $bb1_l0_insert_0 
 In pro:$bb1_l0_insert_0 2 $bb10_l0_insert_0 
 In pro:$bb10_l0_insert_0 2 $bb0_l1_insert_0 
 In pro:$bb0_l1_insert_0 2 $bb7_l1_insert_0 
 In pro:$bb7_l1_insert_0 2 $bb0_zalloc_or_die_1 
 In pro:$bb0_zalloc_or_die_1 2 $bb1_zalloc_or_die_1 $bb2_zalloc_or_die_1 
 In pro:$bb1_zalloc_or_die_1 2 $bb6_l1_insert_0 
 In pro:$bb4_l0_insert_0 1 $bb6_main_0 
 In pro:$bb6_main_0 1 $bb5_main_0 
 In pro:$bb5_main_0 1 $bb2_main_0 
 In pro:$bb2_main_0 1 $bb3_main_0 $bb4_main_0 
 In pro:$bb3_main_0 1 $bb1_main_0 
 In pro:$bb1_main_0 2 $bb7_main_0 
 In pro:$bb7_main_0 2 $bb0_l0_insert_0 
 In pro:$bb4_main_0 1 $bb10_main_0 
 In pro:$bb10_main_0 1 $bb0_l0_destroy_0 
 In pro:$bb0_l0_destroy_0 1 $bb1_l0_destroy_0 
 In pro:$bb4_l1_insert_0 1 $bb9_l0_insert_0 
 In pro:$bb9_l0_insert_0 1 $bb8_l0_insert_0 
 In pro:$bb8_l0_insert_0 1 $bb2_l0_insert_0 
 In pro:$bb2_l0_insert_0 1 $bb3_l0_insert_0 $bb4_l0_insert_0 
 In pro:$bb3_l0_insert_0 1 $bb1_l0_insert_0 
 In pro:$bb1_l0_insert_0 2 $bb10_l0_insert_0 
 In pro:$bb10_l0_insert_0 2 $bb0_l1_insert_0 
 In pro:$bb0_l1_insert_0 2 $bb7_l1_insert_0 
 In pro:$bb7_l1_insert_0 2 $bb0_zalloc_or_die_1 
 In pro:$bb0_zalloc_or_die_1 2 $bb1_zalloc_or_die_1 $bb2_zalloc_or_die_1 
 In pro:$bb1_zalloc_or_die_1 2 $bb6_l1_insert_0 
 In pro:$bb6_l1_insert_0 2 $bb5_l1_insert_0 
 In pro:$bb5_l1_insert_0 2 $bb1_l1_insert_0 
 In pro:$bb1_l1_insert_0 2 $bb10_l1_insert_0 
 In pro:$bb10_l1_insert_0 2 $bb0_l2_insert_0 
 In pro:$bb0_l2_insert_0 2 $bb1_l2_insert_0 
 In pro:$bb1_l2_insert_0 2 $bb2_l2_insert_0 
 In pro:$bb2_l2_insert_0 2 $bb3_l2_insert_0 $bb4_l2_insert_0 
 In pro:$bb3_l2_insert_0 1 $bb1_l2_insert_0 
 In pro:$bb1_l2_insert_0 3 $bb2_l2_insert_0 
 In pro:$bb2_l2_insert_0 3 $bb3_l2_insert_0 $bb4_l2_insert_0 
 In pro:$bb4_l2_insert_0 2 $bb9_l1_insert_0 
 In pro:$bb9_l1_insert_0 2 $bb8_l1_insert_0 
 In pro:$bb8_l1_insert_0 2 $bb2_l1_insert_0 
 In pro:$bb4_l0_insert_0 1 $bb6_main_0 
 In pro:$bb6_main_0 1 $bb5_main_0 
 In pro:$bb5_main_0 1 $bb2_main_0 
 In pro:$bb2_main_0 1 $bb3_main_0 $bb4_main_0 
 In pro:$bb3_main_0 1 $bb1_main_0 
 In pro:$bb1_main_0 2 $bb7_main_0 
 In pro:$bb7_main_0 2 $bb0_l0_insert_0 
 In pro:$bb0_l0_insert_0 2 $bb7_l0_insert_0 
 In pro:$bb7_l0_insert_0 2 $bb0_zalloc_or_die_0 
 In pro:$bb0_zalloc_or_die_0 2 $bb5_zalloc_or_die_0 
 In pro:$bb5_zalloc_or_die_0 2 $bb0_calloc_model_0 
 In pro:$bb0_calloc_model_0 2 $bb4_zalloc_or_die_0 
 In pro:$bb4_zalloc_or_die_0 2 $bb3_zalloc_or_die_0 
 In pro:$bb3_zalloc_or_die_0 2 $bb1_zalloc_or_die_0 $bb2_zalloc_or_die_0 
 In pro:$bb1_zalloc_or_die_0 2 $bb6_l0_insert_0 
 In pro:$bb6_l0_insert_0 2 $bb5_l0_insert_0 
 In pro:$bb5_l0_insert_0 2 $bb1_l0_insert_0 
 In pro:$bb4_main_0 1 $bb10_main_0 
 In pro:$bb10_main_0 1 $bb0_l0_destroy_0 
 In pro:$bb0_l0_destroy_0 1 $bb1_l0_destroy_0 
 In pro:$bb1_l0_destroy_0 1 $bb7_l0_destroy_0 
 In pro:$bb7_l0_destroy_0 1 $bb0_l1_destroy_0 
 In pro:$bb0_l1_destroy_0 1 $bb1_l1_destroy_0 
 In pro:$bb1_l1_destroy_0 1 $bb7_l1_destroy_0 
 In pro:$bb7_l1_destroy_0 1 $bb0_l2_destroy_0 
 In pro:$bb0_l2_destroy_0 1 $bb1_l2_destroy_0 
 In pro:$bb1_l2_destroy_0 1 $bb2_l2_destroy_0 
 In pro:$bb2_l2_destroy_0 1 $bb3_l2_destroy_0 $bb4_l2_destroy_0 
 In pro:$bb3_l2_destroy_0 1 $bb1_l2_destroy_0 
 In pro:$bb1_l2_destroy_0 2 $bb2_l2_destroy_0 
 In pro:$bb4_l2_destroy_0 1 $bb6_l1_destroy_0 
 In pro:$bb6_l1_destroy_0 1 $bb5_l1_destroy_0 
 =========== DO SYMBOLIC EXECUTION FOR ONE PATH
 [32mDebug VarEquiv: 
 [0m[32mKey: $Null| Var: $Null
 [0m[32mDebug BlkLinkName: 
 [0m[32mKey: $Null| Var: $Null
 [0m[32mDebug Offset:
 [0m[32mKey: $Null| Var: 0
 [0m[32mDebug IntVal: 
 [0m[32mKey: $Null| Val: 0
 [0m[34mINFO: executing for stmt: 
 [0mcall {:cexpr "smack:entry:main"} boogie_si_record_ref(main_main0);[34m
 [0m[34mINFO: stmt kind CALL
 [0m[34mINFO: UNsolved proc call: boogie_si_record_ref
 [0m[32mDebug VarEquiv: 
 [0m[32mKey: $Null| Var: $Null
 [0m[32mDebug BlkLinkName: 
 [0m[32mKey: $Null| Var: $Null
 [0m[32mDebug Offset:
 [0m[32mKey: $Null| Var: 0
 [0m[32mDebug IntVal: 
 [0m[32mKey: $Null| Val: 0
 [0m[34mINFO: executing for stmt: 
 [0mgoto $bb1_main_0;[34m
 [0m[34mINFO: stmt kind 5
 [0m[32mDebug VarEquiv: 
 [0m[32mKey: $Null| Var: $Null
 [0m[32mDebug BlkLinkName: 
 [0m[32mKey: $Null| Var: $Null
 [0m[32mDebug Offset:
 [0m[32mKey: $Null| Var: 0
 [0m[32mDebug IntVal: 
 [0m[32mKey: $Null| Val: 0
 [0m[34mINFO: executing for stmt: 
 [0mgoto $bb7_main_0;[34m
 [0m[34mINFO: stmt kind 5
 [0m[32mDebug VarEquiv: 
 [0m[32mKey: $Null| Var: $Null
 [0m[32mDebug BlkLinkName: 
 [0m[32mKey: $Null| Var: $Null
 [0m[32mDebug Offset:
 [0m[32mKey: $Null| Var: 0
 [0m[32mDebug IntVal: 
 [0m[32mKey: $Null| Val: 0
 [0m[34mINFO: executing for stmt: 
 [0m$p0_l0_insert0 := main.list_main0;[34m
 [0m[34mINFO: stmt kind ASSIGN
 [0m[34mINFO: ASSIGN RHS is not a funcExprmain.list_main0 $p0_l0_insert0
 [0m[34mINFO: RHS is Var
 [0m[34mWARNING: This is not correct use, please check, getVar after useVar
  #0 0x00007fbb8247f4ff llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/lib/x86_64-linux-gnu/libLLVM-10.so.1+0x9814ff)
  #1 0x00007fbb8247d782 llvm::sys::RunSignalHandlers() (/lib/x86_64-linux-gnu/libLLVM-10.so.1+0x97f782)
  #2 0x00007fbb8247fac5 (/lib/x86_64-linux-gnu/libLLVM-10.so.1+0x981ac5)
  #3 0x00007fbb80299210 (/lib/x86_64-linux-gnu/libc.so.6+0x46210)
  #4 0x00007fbb806f6c08 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (/lib/x86_64-linux-gnu/libstdc++.so.6+0x145c08)
  #5 0x00000000004d5b9d smack::VarExpr::name[abi:cxx11]() const /home/clexma/Desktop/Disk_D/Tools/SMACK/SmackBasedPrj/build/../include/smack/BoogieAst.h:492:43
  #6 0x000000000050bc80 smack::BlockExecutor::executeAssign(std::shared_ptr<smack::SymbolicHeapExpr>, smack::Stmt const*) /home/clexma/Desktop/Disk_D/Tools/SMACK/SmackBasedPrj/build/../lib/smack/BlockExecutor.cpp:262:45
  #7 0x0000000000516f10 smack::BlockExecutor::executeStmt(std::shared_ptr<smack::SymbolicHeapExpr>, smack::Stmt const*) /home/clexma/Desktop/Disk_D/Tools/SMACK/SmackBasedPrj/build/../lib/smack/BlockExecutor.cpp:1705:13
  #8 0x00000000005172bc smack::BlockExecutor::execute[abi:cxx11](std::shared_ptr<smack::ExecutionState>) /home/clexma/Desktop/Disk_D/Tools/SMACK/SmackBasedPrj/build/../lib/smack/BlockExecutor.cpp:1736:31
  #9 0x00000000004aa77e smack::MemSafeVerifier::runOnModule(llvm::Module&) /home/clexma/Desktop/Disk_D/Tools/SMACK/SmackBasedPrj/build/../lib/smack/MemSafeVerifier.cpp:76:69
 #10 0x00007fbb825854a0 llvm::legacy::PassManagerImpl::run(llvm::Module&) (/lib/x86_64-linux-gnu/libLLVM-10.so.1+0xa874a0)
 #11 0x000000000042bf91 main /home/clexma/Desktop/Disk_D/Tools/SMACK/SmackBasedPrj/build/../tools/llvm2bpl/llvm2bpl.cpp:278:17
 #12 0x00007fbb8027a0b3 __libc_start_main /build/glibc-YbNSs7/glibc-2.31/csu/../csu/libc-start.c:342:3
 #13 0x000000000042a60e _start (/usr/local/bin/llvm2bpl+0x42a60e)
 Stack dump:
 0.	Program arguments: llvm2bpl /home/clexma/Desktop/Disk_D/Tools/SMACK/SmackBasedPrj/testcases/benchmark/b-vuesr052.bc -bpl ../svcomp/memsafety//test-0236.bpl -warn-type unsound -sea-dsa=ci -source-loc-syms -entry-points main -ll ../svcomp/memsafety//test-0236_IR.ll -mem-mod-impls -llvm-assumes=none -sh-mem-leak 
 1.	Running pass 'MemSafeVerifier' on module '/home/clexma/Desktop/Disk_D/Tools/SMACK/SmackBasedPrj/testcases/benchmark/b-vuesr052.bc'.
 