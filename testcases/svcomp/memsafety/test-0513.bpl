// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/smack ../testcases/svcomp/memsafety/test-0513.c -ll ../testcases/svcomp/memsafety/test-0513_IR.ll --bpl ../testcases/svcomp/memsafety/test-0513.bpl -t --sh-mem-leak

const main: ref;
axiom (main == $sub.ref(0, 1032));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $p3: ref;
  var $p4: ref8;
  var $p5: ref;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref32;
  var $p10: ref8;
  var $p11: ref;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p17: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p2: ref;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref8;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i1;
  var $i47: i1;
  var $i46: i1;
  var $p51: ref32;
  var $i52: i32;
  var $p53: ref32;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p60: ref;
  var $p61: ref;
  var $p58: ref;
  var $p59: ref;
  var $p62: ref;
  var $p63: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i64: i1;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i1;
  var $p71: ref;
  var $p27: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref8;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref8;
  var $i80: i1;
$bb0:
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  call $i0 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
  $i1 := $ne.i32($i0, 0);
  $p2 := $0.ref;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  $p3 := $0.ref;
  goto $bb4;
$bb2:
  assume !(($i1 == 1));
  goto $bb3;
$bb3:
  $i23 := $ne.ref($p2, $0.ref);
  assume {:branchcond $i23} true;
  goto $bb12, $bb13;
$bb4:
  call $p4 := malloc(16);
  $p5 := $bitcast.ref.ref($p4);
  $i6 := $ne.ref($p5, $0.ref);
  assume {:branchcond $i6} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i6 == 1);
  $p7 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.0 := $store.ref($M.0, $p7, $0.ref);
  call $i8 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i8);
  $p9 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.1 := $store.i32($M.1, $p9, $i8);
  call $p10 := malloc(16);
  $p11 := $bitcast.ref.ref($p10);
  $i12 := $ne.ref($p3, $0.ref);
  assume {:branchcond $i12} true;
  goto $bb7, $bb8;
$bb6:
  assume !(($i6 == 1));
  call abort();
  assume false;
$bb7:
  assume ($i12 == 1);
  $p13 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p14 := $load.ref($M.2, $p13);
  $p15 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.2 := $store.ref($M.2, $p15, $p14);
  $p16 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.2 := $store.ref($M.2, $p16, $p10);
  $p17 := $p3;
  goto $bb9;
$bb8:
  assume !(($i12 == 1));
  $p18 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.2 := $store.ref($M.2, $p18, $p10);
  $p17 := $p10;
  goto $bb9;
$bb9:
  $p19 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(8, 1));
  $M.0 := $store.ref($M.0, $p19, $p4);
  call $i20 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i20);
  $i21 := $ne.i32($i20, 0);
  $p22 := $p17;
  assume {:branchcond $i21} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i21 == 1);
  $p3 := $p17;
  goto $bb4;
$bb11:
  assume !(($i21 == 1));
  $p2 := $p22;
  goto $bb3;
$bb12:
  assume ($i23 == 1);
  $p24 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p25 := $load.ref($M.2, $p24);
  $i26 := $ne.ref($p25, $p2);
  $p27 := $p2;
  assume {:branchcond $i26} true;
  goto $bb15, $bb16;
$bb13:
  assume !(($i23 == 1));
  goto $bb14;
$bb14:
  $r := 0;
  return;
$bb15:
  assume ($i26 == 1);
  $p28 := $p2;
  goto $bb18;
$bb16:
  assume !(($i26 == 1));
  goto $bb17;
$bb17:
  $p72 := $add.ref($add.ref($p27, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p73 := $load.ref($M.0, $p72);
  $p74 := $bitcast.ref.ref($p27);
  call free_($p74);
  $i75 := $ne.ref($p73, $0.ref);
  assume {:branchcond $i75} true;
  goto $bb36, $bb37;
$bb18:
  $p29 := $add.ref($add.ref($p28, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p30 := $load.ref($M.0, $p29);
  $p31 := $add.ref($add.ref($p28, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p32 := $load.ref($M.2, $p31);
  $p33 := $add.ref($add.ref($p32, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p34 := $load.ref($M.0, $p33);
  $p35 := $add.ref($add.ref($p28, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p36 := $load.ref($M.2, $p35);
  $p37 := $add.ref($add.ref($p36, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p38 := $load.ref($M.2, $p37);
  $p39 := $add.ref($add.ref($p28, $mul.ref(0, 16)), $mul.ref(0, 1));
  $M.2 := $store.ref($M.2, $p39, $p38);
  $p40 := $bitcast.ref.ref($p36);
  call free_($p40);
  $p41 := $add.ref($add.ref($p28, $mul.ref(0, 16)), $mul.ref(8, 1));
  $p42, $p43, $p44 := $p41, $p34, $p30;
  goto $bb19;
$bb19:
  $i45 := $ne.ref($p44, $0.ref);
  $i46 := 0;
  assume {:branchcond $i45} true;
  goto $bb20, $bb21;
$bb20:
  assume ($i45 == 1);
  $i47 := $ne.ref($p43, $0.ref);
  $i46 := $i47;
  goto $bb22;
$bb21:
  assume !(($i45 == 1));
  goto $bb22;
$bb22:
  $p48, $p49, $p50 := $p42, $p43, $p44;
  assume {:branchcond $i46} true;
  goto $bb23, $bb24;
$bb23:
  assume ($i46 == 1);
  $p51 := $add.ref($add.ref($p44, $mul.ref(0, 16)), $mul.ref(8, 1));
  $i52 := $load.i32($M.1, $p51);
  $p53 := $add.ref($add.ref($p43, $mul.ref(0, 16)), $mul.ref(8, 1));
  $i54 := $load.i32($M.1, $p53);
  $i55 := $slt.i32($i52, $i54);
  assume {:branchcond $i55} true;
  goto $bb25, $bb26;
$bb24:
  assume !(($i46 == 1));
  $i64 := $ne.ref($p50, $0.ref);
  assume {:branchcond $i64} true;
  goto $bb28, $bb29;
$bb25:
  assume ($i55 == 1);
  $M.0 := $store.ref($M.0, $p42, $p44);
  $p56 := $add.ref($add.ref($p44, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p57 := $load.ref($M.0, $p56);
  $p58, $p59 := $p43, $p57;
  goto $bb27;
$bb26:
  assume !(($i55 == 1));
  $M.0 := $store.ref($M.0, $p42, $p43);
  $p60 := $add.ref($add.ref($p43, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p61 := $load.ref($M.0, $p60);
  $p58, $p59 := $p61, $p44;
  goto $bb27;
$bb27:
  $p62 := $load.ref($M.0, $p42);
  $p63 := $add.ref($add.ref($p62, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p42, $p43, $p44 := $p62, $p58, $p59;
  goto $bb19;
$bb28:
  assume ($i64 == 1);
  $M.0 := $store.ref($M.0, $p48, $p50);
  goto $bb30;
$bb29:
  assume !(($i64 == 1));
  $i65 := $ne.ref($p49, $0.ref);
  assume {:branchcond $i65} true;
  goto $bb31, $bb32;
$bb30:
  $p66 := $add.ref($add.ref($p28, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p67 := $load.ref($M.2, $p66);
  $p68 := $add.ref($add.ref($p67, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p69 := $load.ref($M.2, $p68);
  $i70 := $ne.ref($p69, $p67);
  $p71 := $p67;
  assume {:branchcond $i70} true;
  goto $bb34, $bb35;
$bb31:
  assume ($i65 == 1);
  $M.0 := $store.ref($M.0, $p48, $p49);
  goto $bb33;
$bb32:
  assume !(($i65 == 1));
  goto $bb33;
$bb33:
  goto $bb30;
$bb34:
  assume ($i70 == 1);
  $p28 := $p67;
  goto $bb18;
$bb35:
  assume !(($i70 == 1));
  $p27 := $p71;
  goto $bb17;
$bb36:
  assume ($i75 == 1);
  $p76 := $p73;
  goto $bb39;
$bb37:
  assume !(($i75 == 1));
  goto $bb38;
$bb38:
  goto $bb14;
$bb39:
  $p77 := $add.ref($add.ref($p76, $mul.ref(0, 16)), $mul.ref(0, 1));
  $p78 := $load.ref($M.0, $p77);
  $p79 := $bitcast.ref.ref($p76);
  call free_($p79);
  $i80 := $ne.ref($p78, $0.ref);
  assume {:branchcond $i80} true;
  goto $bb40, $bb41;
$bb40:
  assume ($i80 == 1);
  $p76 := $p78;
  goto $bb39;
$bb41:
  assume !(($i80 == 1));
  goto $bb38;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 2064));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0, 3096));
procedure  __VERIFIER_nondet_int()
  returns ($r: i32);
const malloc: ref;
axiom (malloc == $sub.ref(0, 4128));
procedure  malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $malloc($i0);
}
const abort: ref;
axiom (abort == $sub.ref(0, 5160));
procedure  abort();
const free_: ref;
axiom (free_ == $sub.ref(0, 6192));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 7224));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 8256));
procedure  __SMACK_static_init()
{
$bb0:
  return;
}
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
