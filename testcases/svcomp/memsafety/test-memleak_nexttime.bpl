// generated by SMACK version 2.6.3 for corral
// via /usr/local/bin/smack svcomp/memsafety/test-memleak_nexttime.c -ll svcomp/memsafety/test-memleak_nexttime_IR.ll --bpl svcomp/memsafety/test-memleak_nexttime.bpl -t --sh-mem-leak

const {:global_variable} {:pointer_to_size 64} {:count 8} a: ref;
axiom (a == $sub.ref(0, 1032));
const {:global_variable} {:pointer_to_size 16} .str: ref;
axiom (.str == $sub.ref(0, 2058));
const {:global_variable} {:pointer_to_size 328} {:count 41} .str.1: ref;
axiom (.str.1 == $sub.ref(0, 3123));
const {:global_variable} {:pointer_to_size 152} {:count 19} __PRETTY_FUNCTION__.reach_error: ref;
axiom (__PRETTY_FUNCTION__.reach_error == $sub.ref(0, 4166));
const reach_error: ref;
axiom (reach_error == $sub.ref(0, 5198));
procedure  reach_error()
{
$bb0:
  call __assert_fail(.str, .str.1, 3, __PRETTY_FUNCTION__.reach_error);
  assume false;
}
const __assert_fail: ref;
axiom (__assert_fail == $sub.ref(0, 6230));
procedure  __assert_fail($p0: ref, $p1: ref, $i2: i32, $p3: ref);
const foo: ref;
axiom (foo == $sub.ref(0, 7262));
procedure  foo()
{
  var $p0: ref;
  var $p1: ref8;
  var $p2: ref32;
  var $p3: ref8;
$bb0:
  call $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume true;
  call $p1 := malloc(10);
  $p2 := $bitcast.ref.ref($p1);
  $M.0 := $store.ref($M.0, $p0, $p1);
  $p3 := $bitcast.ref.ref($p0);
  call $M.0 := $memcpy.i8($M.0, $M.0, a, $p3, 8, false);
  return;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 8294));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const malloc: ref;
axiom (malloc == $sub.ref(0, 9326));
procedure  malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $malloc($i0);
}
const llvm.memcpy.p0i8.p0i8.i64: ref;
axiom (llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 10358));
procedure  llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i1);
const main: ref;
axiom (main == $sub.ref(0, 11390));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref8;
  var $p2: ref8;
$bb0:
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  call $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  call foo();
  assume true;
  $p1 := $bitcast.ref.ref($p0);
  call $M.1 := $memcpy.i8($M.1, $M.0, $p1, a, 8, false);
  $p2 := $load.ref($M.1, $p0);
  call free_($p2);
  $r := 0;
  return;
}
const free_: ref;
axiom (free_ == $sub.ref(0, 12422));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 13454));
procedure  __SMACK_static_init()
{
$bb0:
  $M.0 := $store.i8($M.0, a, 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(a, $mul.ref(0, 8)), $mul.ref(1, 1)), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(a, $mul.ref(0, 8)), $mul.ref(2, 1)), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(a, $mul.ref(0, 8)), $mul.ref(3, 1)), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(a, $mul.ref(0, 8)), $mul.ref(4, 1)), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(a, $mul.ref(0, 8)), $mul.ref(5, 1)), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(a, $mul.ref(0, 8)), $mul.ref(6, 1)), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(a, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
  return;
}
procedure  $memcpy.i8(M.dst: [ref] i8, M.src: [ref] i8, dst: ref, src: ref, len: ref, isvolatile: bool) returns (M.ret: [ref] i8)
{
  assume (forall x: ref :: $sle.ref.bool(dst,x) && $slt.ref.bool(x,$add.ref(dst,len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src,dst),x)]);
  assume (forall x: ref :: $slt.ref.bool(x,dst) ==> M.ret[x] == M.dst[x]);
  assume (forall x: ref :: $sle.ref.bool($add.ref(dst,len),x) ==> M.ret[x] == M.dst[x]);
}

procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  return;
}
